<?xml version="1.0" encoding="utf-8"?>
<django-objects version="1.0">
    <object pk="2" model="buildingblock.buildingblock">
        <field type="CharField" name="type">screen</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Order Screen</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "code": "http://demo.fast.morfeo-project.org/gvsdata/screens/amazonOrder.scr.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This form allows users to purchase their shopping cart. It shows an Amazon interface to fulfill the required data to purchase the shopping cart"},
  "domainContext": {
    "tags": [
      "scratch",
      "amazon",
      "order",
      "purchase"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonOrder",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonOrder.png",
  "id": "2",
  "label": {"en-gb": "Order"},
  "name": "Amazon Order Screen",
  "postconditions": [],
  "preconditions": [[{
    "label": {"en-gb": "A Amazon Purchase URL"},
    "pattern": "?P http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#PurchaseURL",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonOrder.png",
  "type": "screen",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#Screen1263312762903",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#Screen1263312762903</field>
    </object>
    <object pk="3" model="buildingblock.buildingblock">
        <field type="CharField" name="type">screen</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Price Comparative Screen</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "code": "http://demo.fast.morfeo-project.org/gvsdata/screens/amazonPrice.scr.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen shows a price comparative for a given product."},
  "domainContext": {
    "tags": [
      "scratch",
      "amazon",
      "list",
      "suggestion",
      "price comparative"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonPrice",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonPrice.png",
  "id": "3",
  "label": {"en-gb": "Price Comparative"},
  "name": "Amazon Price Comparative Screen",
  "postconditions": [[{
    "id": "cart",
    "label": {"en-gb": "An shopping cart"},
    "pattern": "?Cart http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ShoppingCart",
    "positive": true
  }]],
  "preconditions": [[{
    "label": {"en-gb": "An item"},
    "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonPriceComparative.png",
  "type": "screen",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#Screen1263312768872",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#Screen1263312768872</field>
    </object>
    <object pk="4" model="buildingblock.buildingblock">
        <field type="CharField" name="type">screen</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Product Screen</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "code": "http://demo.fast.morfeo-project.org/gvsdata/screens/amazonProduct.scr.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen shows the the details of a product in Amazon"},
  "domainContext": {
    "tags": [
      "scratch",
      "amazon",
      "details",
      "product"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonProduct",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonProduct.png",
  "id": "4",
  "label": {"en-gb": "Product Details"},
  "name": "Amazon Product Screen",
  "postconditions": [[{
    "id": "cart",
    "label": {"en-gb": "An shopping cart"},
    "pattern": "?Cart http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ShoppingCart",
    "positive": true
  }]],
  "preconditions": [[{
    "label": {"en-gb": "An item"},
    "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonProductDetail.png",
  "type": "screen",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#Screen1263312773904",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#Screen1263312773904</field>
    </object>
    <object pk="1" model="buildingblock.buildingblock">
        <field type="CharField" name="type">screen</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon List Screen</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "code": "http://demo.fast.morfeo-project.org/gvsdata/screens/amazonList.scr.html",
  "creationDate": null,
  "creator": "http://www.ismaelrivera.es/",
  "description": {"en-gb": "This screen shows the results of a given search in Amazon. It allows users to choose a product to see its details."},
  "domainContext": {
    "tags": [
      "scratch",
      "amazon",
      "list"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonList",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonList.png",
  "id": "1",
  "label": {"en-gb": "Product List"},
  "name": "Amazon List Screen",
  "postconditions": [[{
    "id": "item",
    "label": {"en-gb": "An item"},
    "pattern": "?I http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
    "positive": true
  }]],
  "preconditions": [[{
    "label": {"en-gb": "A search criteria"},
    "pattern": "?F http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#SearchCriteria",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://localhost:8010/images/screenshots/amazonProductList.png",
  "type": "screen",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#Screen1263312755372",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#Screen1263312755372</field>
    </object>
    <object pk="8" model="buildingblock.buildingblock">
        <field type="CharField" name="type">screen</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Ebay List Screen</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "code": "http://demo.fast.morfeo-project.org/gvsdata/screens/eBayList.scr.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen shows the results of a given search in eBay of a related Amazon product. It allows users to choose a product to see its details"},
  "domainContext": {
    "tags": [
      "scratch",
      "ebay",
      "list"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/eBayList",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/eBayList.png",
  "id": "8",
  "label": {"en-gb": "Ebay List"},
  "name": "Ebay List Screen",
  "postconditions": [[{
    "id": "itemEbay",
    "label": {"en-gb": "An eBay item"},
    "pattern": "?eItem http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://developer.ebay.com/DevZone/shopping/docs/CallRef/GetSingleItem.html#Request",
    "positive": true
  }]],
  "preconditions": [[{
    "label": {"en-gb": "An Amazon item"},
    "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/ebayComparative.png",
  "type": "screen",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#Screen1263312793560",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#Screen1263312793560</field>
    </object>
    <object pk="5" model="buildingblock.buildingblock">
        <field type="CharField" name="type">screen</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Search Screen</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "code": "http://demo.fast.morfeo-project.org/gvsdata/screens/amazonSearch.scr.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen allows users to look for a product in Amazon, providing a keyword search interface. It produces a search criteria or filter fact."},
  "domainContext": {
    "tags": [
      "scratch",
      "amazon",
      "search"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonSearch",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonSearch.png",
  "id": "5",
  "label": {"en-gb": "Product Search"},
  "name": "Amazon Search Screen",
  "postconditions": [[{
    "id": "filter",
    "label": {"en-gb": "A search criteria"},
    "pattern": "?F http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#SearchCriteria",
    "positive": true
  }]],
  "preconditions": [],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonSearch.png",
  "type": "screen",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#Screen1263312778919",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#Screen1263312778919</field>
    </object>
    <object pk="6" model="buildingblock.buildingblock">
        <field type="CharField" name="type">screen</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Shopping Cart Screen</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "code": "http://demo.fast.morfeo-project.org/gvsdata/screens/amazonShopping.scr.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen shows the list of products added to the user shopping cart. It allows users to update product quantity and clear the cart."},
  "domainContext": {
    "tags": [
      "scratch",
      "amazon",
      "cart"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonShopping",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonShopping.png",
  "id": "6",
  "label": {"en-gb": "Shopping Cart"},
  "name": "Amazon Shopping Cart Screen",
  "postconditions": [[
    {
      "id": "notpurchase",
      "label": {"en-gb": "A purchase"},
      "pattern": "?Purchase http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#PurchaseURL",
      "positive": false
    },
    {
      "id": "purchase",
      "label": {"en-gb": "A purchase"},
      "pattern": "?Purchase http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#PurchaseURL",
      "positive": true
    },
    {
      "id": "item",
      "label": {"en-gb": "An item"},
      "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
      "positive": true
    }
  ]],
  "preconditions": [[{
    "label": {"en-gb": "A Cart"},
    "pattern": "?Cart http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ShoppingCart",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonShoppingCart.png",
  "type": "screen",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#Screen1263312783701",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#Screen1263312783701</field>
    </object>
    <object pk="7" model="buildingblock.buildingblock">
        <field type="CharField" name="type">screen</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Suggestion Screen</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "code": "http://demo.fast.morfeo-project.org/gvsdata/screens/amazonSuggestion.scr.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen shows the list of products related to a given one. It allows users select a new product from this list."},
  "domainContext": {
    "tags": [
      "scratch",
      "amazon",
      "list",
      "suggestion"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonSuggestion",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonSuggestion.png",
  "id": "7",
  "label": {"en-gb": "Suggestion List"},
  "name": "Amazon Suggestion Screen",
  "postconditions": [[{
    "id": "item",
    "label": {"en-gb": "An item"},
    "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
    "positive": true
  }]],
  "preconditions": [[{
    "label": {"en-gb": "An item"},
    "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonSuggestion.png",
  "type": "screen",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#Screen1263312788794",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#Screen1263312788794</field>
    </object>
    <object pk="12" model="buildingblock.buildingblock">
        <field type="CharField" name="type">form</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Product Form</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [
    {
      "name": "init",
      "preconditions": [],
      "uses": []
    },
    {
      "name": "showProductInfo",
      "preconditions": [{
        "id": "product",
        "label": {"en-gb": "An item"},
        "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
        "positive": true
      }],
      "uses": []
    },
    {
      "name": "showMessage",
      "preconditions": [{
        "id": "message",
        "label": {"en-gb": "A message"},
        "pattern": "?Message http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Message",
        "positive": true
      }],
      "uses": []
    }
  ],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/forms/amazonProduct.src.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen shows the the details of a product in Amazon"},
  "domainContext": {
    "tags": [
      "amazon",
      "details",
      "product"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonProduct",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonProduct.png",
  "id": "12",
  "label": {"en-gb": "Product Details"},
  "libraries": [],
  "name": "Amazon Product Form",
  "postconditions": [],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonProductDetail.png",
  "triggers": ["addToCart"],
  "type": "form",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#FormElement1263313183724",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#FormElement1263313183724</field>
    </object>
    <object pk="14" model="buildingblock.buildingblock">
        <field type="CharField" name="type">form</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Shopping Form</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [
    {
      "name": "init",
      "preconditions": [],
      "uses": []
    },
    {
      "name": "showTable",
      "preconditions": [{
        "id": "list",
        "label": {"en-gb": "A product list"},
        "pattern": "?PList http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ProductList",
        "positive": true
      }],
      "uses": []
    }
  ],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/forms/amazonShopping.src.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen shows the list of products added to the user shopping cart. It allows users to update product quantity and clear the cart."},
  "domainContext": {
    "tags": [
      "amazon",
      "cart"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonShopping",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonShopping.png",
  "id": "14",
  "label": {"en-gb": "Shopping Cart"},
  "libraries": [],
  "name": "Amazon Shopping Form",
  "postconditions": [[
    {
      "id": "updateCart",
      "label": {"en-gb": "A shopping cart update"},
      "pattern": "?UCart http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#UpdatingCart",
      "positive": true
    },
    {
      "id": "purchase",
      "label": {"en-gb": "A purchase"},
      "pattern": "?Purchase http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#PurchaseURL",
      "positive": true
    },
    {
      "id": "item",
      "label": {"en-gb": "An item"},
      "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
      "positive": true
    }
  ]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonShoppingCart.png",
  "triggers": [
    "purchase",
    "clearCart",
    "updateCart",
    "newItem"
  ],
  "type": "form",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#FormElement1263313193193",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#FormElement1263313193193</field>
    </object>
    <object pk="11" model="buildingblock.buildingblock">
        <field type="CharField" name="type">form</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Price Comparative Form</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [
    {
      "name": "init",
      "preconditions": [{
        "id": "item",
        "label": {"en-gb": "An item"},
        "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
        "positive": true
      }],
      "uses": []
    },
    {
      "name": "showTable",
      "preconditions": [{
        "id": "list",
        "label": {"en-gb": "An offer list"},
        "pattern": "?OList http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#OfferList",
        "positive": true
      }],
      "uses": []
    },
    {
      "name": "showMessage",
      "preconditions": [{
        "id": "message",
        "label": {"en-gb": "A message"},
        "pattern": "?Message http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Message",
        "positive": true
      }],
      "uses": []
    }
  ],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/forms/amazonPrice.src.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen shows a price comparative for a given product."},
  "domainContext": {
    "tags": [
      "amazon",
      "list",
      "suggestion",
      "price comparative"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonPrice",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonPrice.png",
  "id": "11",
  "label": {"en-gb": "Price Comparative"},
  "libraries": [],
  "name": "Amazon Price Comparative Form",
  "postconditions": [[{
    "id": "offer",
    "label": {"en-gb": "An offer"},
    "pattern": "?Offer http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Offer",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonPriceComparative.png",
  "triggers": ["offer"],
  "type": "form",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#FormElement1263313179380",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#FormElement1263313179380</field>
    </object>
    <object pk="18" model="buildingblock.buildingblock">
        <field type="CharField" name="type">resource</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Add Item to Cart Service</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "add",
    "preconditions": [{
      "id": "item",
      "label": {"en-gb": "An item"},
      "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
      "positive": true
    }],
    "uses": [{
      "id": "cart",
      "uri": "http://aws.amazon.com/AWSECommerceService#ShoppingCart"
    }]
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/resources/amazonAddItemToCartService.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This service adds items to an Amazon shopping cart"},
  "domainContext": {
    "tags": [
      "amazon",
      "shopping",
      "cart"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonAddItemToCartService",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonAddItemToCartService.png",
  "id": "18",
  "label": {"en-gb": "Add Item To Amazon Shopping Cart"},
  "libraries": [
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"
    },
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"
    }
  ],
  "name": "Amazon Add Item to Cart Service",
  "postconditions": [[
    {
      "id": "cart",
      "label": {"en-gb": "A shopping cart"},
      "pattern": "?Cart http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ShoppingCart",
      "positive": true
    },
    {
      "id": "message",
      "label": {"en-gb": "A message"},
      "pattern": "?Message http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Message",
      "positive": true
    }
  ]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/amazonAddItemToCartService.jpg",
  "triggers": ["message"],
  "type": "resource",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#BackendService1263313213318",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#BackendService1263313213318</field>
    </object>
    <object pk="15" model="buildingblock.buildingblock">
        <field type="CharField" name="type">form</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Suggestion Form</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [
    {
      "name": "init",
      "preconditions": [{
        "id": "item",
        "label": {"en-gb": "An item"},
        "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
        "positive": true
      }],
      "uses": []
    },
    {
      "name": "showTable",
      "preconditions": [{
        "id": "list",
        "label": {"en-gb": "A product list"},
        "pattern": "?PList http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ProductList",
        "positive": true
      }],
      "uses": []
    },
    {
      "name": "showMessage",
      "preconditions": [{
        "id": "message",
        "label": {"en-gb": "A message"},
        "pattern": "?Message http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Message",
        "positive": true
      }],
      "uses": []
    }
  ],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/forms/amazonSuggestion.src.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen shows the list of products related to a given one. It allows users select a new product from this list."},
  "domainContext": {
    "tags": [
      "amazon",
      "list",
      "suggestion"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonSuggestion",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonSuggestion.png",
  "id": "15",
  "label": {"en-gb": "Suggestion List"},
  "libraries": [],
  "name": "Amazon Suggestion Form",
  "postconditions": [[{
    "id": "item",
    "label": {"en-gb": "An item"},
    "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonSuggestion.png",
  "triggers": ["item"],
  "type": "form",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#FormElement1263313198255",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#FormElement1263313198255</field>
    </object>
    <object pk="16" model="buildingblock.buildingblock">
        <field type="CharField" name="type">form</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Ebay List Form</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [
    {
      "name": "init",
      "preconditions": [],
      "uses": []
    },
    {
      "name": "showTable",
      "preconditions": [{
        "id": "list",
        "label": {"en-gb": "An item"},
        "pattern": "?eList http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://developer.ebay.com/DevZone/shopping/docs/CallRef/FindItemsAdvanced.html#Response",
        "positive": true
      }],
      "uses": []
    }
  ],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/forms/eBayList.src.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen shows the results of a given search in eBay of a related Amazon product. It allows users to choose a product to see its details"},
  "domainContext": {
    "tags": [
      "ebay",
      "list"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/eBayList",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/eBayList.png",
  "id": "16",
  "label": {"en-gb": "Ebay List"},
  "libraries": [],
  "name": "Ebay List Form",
  "postconditions": [[
    {
      "id": "itemEbay",
      "label": {"en-gb": "An eBay item"},
      "pattern": "?eItem http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://developer.ebay.com/DevZone/shopping/docs/CallRef/GetSingleItem.html#Request",
      "positive": true
    },
    {
      "id": "filterEbay",
      "label": {"en-gb": "An eBay filter"},
      "pattern": "?eFilter http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://developer.ebay.com/DevZone/shopping/docs/CallRef/FindItemsAdvanced.html#Request",
      "positive": true
    }
  ]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/ebayComparative.png",
  "triggers": [
    "ebayItem",
    "nextPage",
    "previousPage"
  ],
  "type": "form",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#FormElement1263313203474",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#FormElement1263313203474</field>
    </object>
    <object pk="21" model="buildingblock.buildingblock">
        <field type="CharField" name="type">resource</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Lookup Service</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "searchProduct",
    "preconditions": [{
      "id": "item",
      "label": {"en-gb": "An Amazon item"},
      "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
      "positive": true
    }],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/resources/amazonLookupService.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This service search information about an Amazon product"},
  "domainContext": {
    "tags": [
      "amazon",
      "product"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonLookupService",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonLookupService.png",
  "id": "21",
  "label": {"en-gb": "Amazon Lookup Service"},
  "libraries": [
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"
    },
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"
    }
  ],
  "name": "Amazon Lookup Service",
  "postconditions": [[
    {
      "id": "product",
      "label": {"en-gb": "An item"},
      "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
      "positive": true
    },
    {
      "id": "message",
      "label": {"en-gb": "A message"},
      "pattern": "?Message http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Message",
      "positive": true
    }
  ]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/amazonLookupService.jpg",
  "triggers": ["newProduct"],
  "type": "resource",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#BackendService1263313234944",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#BackendService1263313234944</field>
    </object>
    <object pk="19" model="buildingblock.buildingblock">
        <field type="CharField" name="type">resource</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Add Offer to Amazon Cart Service</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "addToCart",
    "preconditions": [{
      "id": "offer",
      "label": {"en-gb": "An offer"},
      "pattern": "?Offer http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Offer",
      "positive": true
    }],
    "uses": [{
      "id": "cart",
      "uri": "http://aws.amazon.com/AWSECommerceService#ShoppingCart"
    }]
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/resources/amazonAddOfferToCartService.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This service adds offers to an Amazon shopping cart"},
  "domainContext": {
    "tags": [
      "amazon",
      "shopping",
      "cart",
      "offer"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonAddOfferToCartService",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonAddOfferToCartService.png",
  "id": "19",
  "label": {"en-gb": "Add Offer To Amazon Shopping Cart"},
  "libraries": [
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"
    },
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"
    }
  ],
  "name": "Add Offer to Amazon Cart Service",
  "postconditions": [[
    {
      "id": "cart",
      "label": {"en-gb": "A shopping cart"},
      "pattern": "?Cart http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ShoppingCart",
      "positive": true
    },
    {
      "id": "message",
      "label": {"en-gb": "A message"},
      "pattern": "?Message http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Message",
      "positive": true
    }
  ]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/amazonAddOfferToCartService.jpg",
  "triggers": ["message"],
  "type": "resource",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#BackendService1263313221850",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#BackendService1263313221850</field>
    </object>
    <object pk="20" model="buildingblock.buildingblock">
        <field type="CharField" name="type">resource</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Clear Amazon Cart Service</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "clearService",
    "preconditions": [{
      "id": "cart",
      "label": {"en-gb": "A shopping cart"},
      "pattern": "?Cart http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ShoppingCart",
      "positive": true
    }],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/resources/amazonClearCartService.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This service clears an Amazon shopping cart"},
  "domainContext": {
    "tags": [
      "amazon",
      "shopping",
      "cart"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonClearCartService",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonClearCartService.png",
  "id": "20",
  "label": {"en-gb": "Clear Amazon Shopping Cart"},
  "libraries": [
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"
    },
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"
    }
  ],
  "name": "Clear Amazon Cart Service",
  "postconditions": [[{
    "id": "purchase",
    "label": {"en-gb": "A purchase"},
    "pattern": "?Purchase http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#PurchaseURL",
    "positive": false
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/amazonClearCartService.jpg",
  "triggers": ["clearedCart"],
  "type": "resource",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#BackendService1263313229756",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#BackendService1263313229756</field>
    </object>
    <object pk="25" model="buildingblock.buildingblock">
        <field type="CharField" name="type">resource</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Suggestion Service</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "fetch",
    "preconditions": [{
      "id": "item",
      "label": {"en-gb": "An Amazon item"},
      "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
      "positive": true
    }],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/resources/amazonSuggetionListService.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This service provides suggestions related to a product in Amazon Catalogue"},
  "domainContext": {
    "tags": [
      "amazon",
      "list",
      "suggestion"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonSuggetionListService",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonSuggetionListService.png",
  "id": "25",
  "label": {"en-gb": "Amazon Suggestions"},
  "libraries": [
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"
    },
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"
    }
  ],
  "name": "Amazon Suggestion Service",
  "postconditions": [[
    {
      "id": "list",
      "label": {"en-gb": "A product list"},
      "pattern": "?PList http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ProductList",
      "positive": false
    },
    {
      "id": "message",
      "label": {"en-gb": "A message"},
      "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Message",
      "positive": false
    }
  ]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/amazonSuggetionListService.jpg",
  "triggers": ["list"],
  "type": "resource",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#BackendService1263313254194",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#BackendService1263313254194</field>
    </object>
    <object pk="26" model="buildingblock.buildingblock">
        <field type="CharField" name="type">resource</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Update Amazon Cart Service</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "updateService",
    "preconditions": [
      {
        "id": "cart",
        "label": {"en-gb": "A shopping cart"},
        "pattern": "?Cart http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ShoppingCart",
        "positive": true
      },
      {
        "id": "update",
        "label": {"en-gb": "A shopping cart update"},
        "pattern": "?UCart http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#UpdatingCart",
        "positive": true
      }
    ],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/resources/amazonUpdateCartService.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This service updates an Amazon shopping cart"},
  "domainContext": {
    "tags": [
      "amazon",
      "shopping",
      "cart"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonUpdateCartService",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonUpdateCartService.png",
  "id": "26",
  "label": {"en-gb": "Update Amazon Shopping Cart"},
  "libraries": [
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"
    },
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"
    }
  ],
  "name": "Update Amazon Cart Service",
  "postconditions": [[{
    "id": "purchase",
    "label": {"en-gb": "A purchase"},
    "pattern": "?Purchase http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#PurchaseURL",
    "positive": false
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/amazonUpdateCartService.jpg",
  "triggers": ["updatedCart"],
  "type": "resource",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#BackendService1263313258897",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#BackendService1263313258897</field>
    </object>
    <object pk="23" model="buildingblock.buildingblock">
        <field type="CharField" name="type">resource</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Search Amazon Cart Service</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "fetch",
    "preconditions": [{
      "id": "cart",
      "label": {"en-gb": "A shopping cart"},
      "pattern": "?Cart http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ShoppingCart",
      "positive": true
    }],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/resources/amazonSearchCartService.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This service provides information about user shopping cart"},
  "domainContext": {
    "tags": [
      "amazon",
      "shopping",
      "cart"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonSearchCartService",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonSearchCartService.png",
  "id": "23",
  "label": {"en-gb": "Amazon Cart"},
  "libraries": [
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"
    },
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"
    }
  ],
  "name": "Search Amazon Cart Service",
  "postconditions": [[
    {
      "id": "list",
      "label": {"en-gb": "A product list"},
      "pattern": "?PList http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ProductList",
      "positive": false
    },
    {
      "id": "message",
      "label": {"en-gb": "A message"},
      "pattern": "?Message http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Message",
      "positive": false
    }
  ]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/amazonSearchCartService.jpg",
  "triggers": [],
  "type": "resource",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#BackendService1263313244553",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#BackendService1263313244553</field>
    </object>
    <object pk="24" model="buildingblock.buildingblock">
        <field type="CharField" name="type">resource</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Search Service</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "search",
    "preconditions": [{
      "id": "filter",
      "label": {"en-gb": "A search criteria"},
      "pattern": "?F http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#SearchCriteria",
      "positive": true
    }],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/resources/amazonSearchService.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This service provides information about products in Amazon Catalogue"},
  "domainContext": {
    "tags": [
      "amazon",
      "list"
    ],
    "user": "admin"
  },
  "homepage": "hhttp://www.deri.ie/amazonSearchService",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonSearchService.png",
  "id": "24",
  "label": {"en-gb": "Amazon Search"},
  "libraries": [
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"
    },
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"
    }
  ],
  "name": "Amazon Search Service",
  "postconditions": [[{
    "id": "list",
    "label": {"en-gb": "An Amazon Item List"},
    "pattern": "?PList http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ProductList",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/amazonList-screenshot.jpg",
  "triggers": ["productList"],
  "type": "resource",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#BackendService1263313249397",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#BackendService1263313249397</field>
    </object>
    <object pk="9" model="buildingblock.buildingblock">
        <field type="CharField" name="type">form</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon List Form</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [
    {
      "name": "init",
      "preconditions": [],
      "uses": []
    },
    {
      "name": "showTable",
      "preconditions": [{
        "id": "list",
        "label": {"en-gb": "A product list"},
        "pattern": "?PList http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#ProductList",
        "positive": true
      }],
      "uses": []
    }
  ],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/forms/amazonList.src.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This form shows the results of a given search in Amazon. It allows users to choose a product to see its details"},
  "domainContext": {
    "tags": [
      "amazon",
      "list"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonList",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonList.png",
  "id": "9",
  "label": {"en-gb": "Product List"},
  "libraries": [],
  "name": "Amazon List Form",
  "postconditions": [[
    {
      "id": "item",
      "label": {"en-gb": "An item"},
      "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
      "positive": true
    },
    {
      "id": "filter",
      "label": {"en-gb": "A filter"},
      "pattern": "?Filter http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#SearchCriteria",
      "positive": true
    }
  ]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonProductList.png",
  "triggers": [],
  "type": "form",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#FormElement1263313163770",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#FormElement1263313163770</field>
    </object>
    <object pk="10" model="buildingblock.buildingblock">
        <field type="CharField" name="type">form</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Order Form</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "init",
    "preconditions": [{
      "id": "purchase",
      "label": {"en-gb": "A purchase"},
      "pattern": "?Purchase http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#PurchaseURL",
      "positive": true
    }],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/forms/amazonOrder.src.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This form allows users to purchase their shopping cart. It shows an Amazon interface to fulfill the required data to purchase the shopping cart"},
  "domainContext": {
    "tags": [
      "amazon",
      "order",
      "purchase"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonOrder",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonOrder.png",
  "id": "10",
  "label": {"en-gb": "Order"},
  "libraries": [],
  "name": "Amazon Order Form",
  "postconditions": [],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonOrder.png",
  "triggers": [],
  "type": "form",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#FormElement1263313173317",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#FormElement1263313173317</field>
    </object>
    <object pk="13" model="buildingblock.buildingblock">
        <field type="CharField" name="type">form</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Search Form</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "init",
    "preconditions": [],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/forms/amazonSearch.src.html",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This screen allows users to look for a product in Amazon, providing a keyword search interface. It produces a search criteria or filter fact."},
  "domainContext": {
    "tags": [
      "amazon",
      "search"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonSearch",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonSearch.png",
  "id": "13",
  "label": {"en-gb": "Product Search"},
  "libraries": [],
  "name": "Amazon Search Form",
  "postconditions": [[{
    "id": "filter",
    "label": {"en-gb": "A filter"},
    "pattern": "?Filter http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#SearchCriteria",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://demo.fast.morfeo-project.org/gvsdata/images/screenshots/amazonSearch.png",
  "triggers": [],
  "type": "form",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#FormElement1263313188505",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#FormElement1263313188505</field>
    </object>
    <object pk="17" model="buildingblock.buildingblock">
        <field type="CharField" name="type">operator</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Item to Ebay Filter</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "createFilter",
    "preconditions": [{
      "id": "item",
      "label": {"en-gb": "An item"},
      "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
      "positive": true
    }],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/operators/amazonEbayFilter.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This operator generates an eBay filter from a Amazon item"},
  "domainContext": {
    "tags": [
      "ebay",
      "amazon",
      "filter"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/eBayList",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/eBayList.png",
  "id": "17",
  "label": {"en-gb": "Ebay List"},
  "libraries": [],
  "name": "Amazon Item to Ebay Filter",
  "postconditions": [[{
    "id": "filterEbay",
    "label": {"en-gb": "An eBay filter"},
    "pattern": "?eFilter http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://developer.ebay.com/DevZone/shopping/docs/CallRef/FindItemsAdvanced.html#Request",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/eBayList-screenshot.jpg",
  "triggers": ["filterEbay"],
  "type": "operator",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#Operator1263313208131",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#Operator1263313208131</field>
    </object>
    <object pk="22" model="buildingblock.buildingblock">
        <field type="CharField" name="type">resource</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Amazon Price Comparative Service</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "fetch",
    "preconditions": [{
      "id": "item",
      "label": {"en-gb": "An item"},
      "pattern": "?Item http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#Item",
      "positive": true
    }],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/resources/amazonPriceComparativeService.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This service provides a price comparative related to an Amazon product"},
  "domainContext": {
    "tags": [
      "amazon",
      "price",
      "comparative"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/amazonPriceComparativeService",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/amazonPriceComparativeService.png",
  "id": "22",
  "label": {"en-gb": "Amazon Price Comparative"},
  "libraries": [
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"
    },
    {
      "language": "JavaScript",
      "source": "http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"
    }
  ],
  "name": "Amazon Price Comparative Service",
  "postconditions": [[{
    "id": "list",
    "label": {"en-gb": "A product list"},
    "pattern": "?OList http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#OfferList",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/amazonPriceComparativeService.jpg",
  "triggers": ["productList"],
  "type": "resource",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#BackendService1263313239881",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#BackendService1263313239881</field>
    </object>
    <object pk="27" model="buildingblock.buildingblock">
        <field type="CharField" name="type">resource</field>
        <field to="auth.user" name="author" rel="ManyToOneRel">1</field>
        <field type="CharField" name="name">Ebay Search Service</field>
        <field type="CharField" name="version">1.0</field>
        <field type="TextField" name="data">{
  "actions": [{
    "name": "fetch",
    "preconditions": [{
      "id": "filter",
      "label": {"en-gb": "A filter"},
      "pattern": "?eFilter http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://developer.ebay.com/DevZone/shopping/docs/CallRef/FindItemsAdvanced.html#Request",
      "positive": true
    }],
    "uses": []
  }],
  "code": "http://demo.fast.morfeo-project.org/gvsdata/resources/ebaySearchService.src.js",
  "creationDate": null,
  "creator": "http://www.fabio.es/",
  "description": {"en-gb": "This service provides information about products in eBay Catalogue"},
  "domainContext": {
    "tags": [
      "ebay",
      "list"
    ],
    "user": "admin"
  },
  "homepage": "http://www.deri.ie/ebaySearchService",
  "icon": "http://demo.fast.morfeo-project.org/gvsdata/images/catalogue/ebaySearchService.png",
  "id": "27",
  "label": {"en-gb": "eBay Search"},
  "libraries": [],
  "name": "Ebay Search Service",
  "postconditions": [[{
    "id": "list",
    "label": {"en-gb": "A product list"},
    "pattern": "?eList http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://developer.ebay.com/DevZone/shopping/docs/CallRef/FindItemsAdvanced.html#Response",
    "positive": true
  }]],
  "rights": "http://creativecommons.org/",
  "screenshot": "http://www.deri.ie/ebaySearchService.jpg",
  "triggers": ["productList"],
  "type": "resource",
  "uri": "http://purl.oclc.org/fast/ontology/gadget#BackendService1263313263804",
  "version": "1.0"
}</field>
        <field type="DecimalField" name="popularity"><None></None></field>
        <field type="CharField" name="uri">http://purl.oclc.org/fast/ontology/gadget#BackendService1263313263804</field>
    </object>
    <object pk="1" model="buildingblock.screen">
    </object>
    <object pk="2" model="buildingblock.screen">
    </object>
    <object pk="3" model="buildingblock.screen">
    </object>
    <object pk="4" model="buildingblock.screen">
    </object>
    <object pk="5" model="buildingblock.screen">
    </object>
    <object pk="6" model="buildingblock.screen">
    </object>
    <object pk="7" model="buildingblock.screen">
    </object>
    <object pk="8" model="buildingblock.screen">
    </object>
    <object pk="9" model="buildingblock.form">
    </object>
    <object pk="10" model="buildingblock.form">
    </object>
    <object pk="11" model="buildingblock.form">
    </object>
    <object pk="12" model="buildingblock.form">
    </object>
    <object pk="13" model="buildingblock.form">
    </object>
    <object pk="14" model="buildingblock.form">
    </object>
    <object pk="15" model="buildingblock.form">
    </object>
    <object pk="16" model="buildingblock.form">
    </object>
    <object pk="17" model="buildingblock.operator">
    </object>
    <object pk="18" model="buildingblock.resource">
    </object>
    <object pk="19" model="buildingblock.resource">
    </object>
    <object pk="20" model="buildingblock.resource">
    </object>
    <object pk="21" model="buildingblock.resource">
    </object>
    <object pk="22" model="buildingblock.resource">
    </object>
    <object pk="23" model="buildingblock.resource">
    </object>
    <object pk="24" model="buildingblock.resource">
    </object>
    <object pk="25" model="buildingblock.resource">
    </object>
    <object pk="26" model="buildingblock.resource">
    </object>
    <object pk="27" model="buildingblock.resource">
    </object>
    <object pk="1" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">1</field>
        <field type="TextField" name="code">&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type"
    content="application/xhtml+xml; charset=UTF-8" /&gt;
&lt;link type="text/css" rel="stylesheet"
    href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/table.css" /&gt;
&lt;link type="text/css" rel="stylesheet"
    href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
&lt;style type="text/css"&gt;
#pages {
    color: #FEBF43;
    font-weight: bold;
    padding: 10px;
}
#previousButton,#nextButton {
    visibility: hidden;
}
#loadingImg {
    margin: auto;
    padding-top: 10px;
}
#amazonImage {
    position: absolute;
    right: 0px;
    top: 3px;
}
&lt;/style&gt;
&lt;script language="JavaScript" src="http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"&gt;&lt;/script&gt;
&lt;script language="JavaScript" src="http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"&gt;&lt;/script&gt;
&lt;script language="JavaScript"&gt;
    function List(){
        //Last page fetched from Amazon Service	
        this.lastPageFetched = 0;
        //Next set of products to print in the table (0-9)
        this.currentPage = 0;
        //Product list fetched from the Service
        this.productList = new Array();
        //Are we waiting for data?
        this.waiting = true;
        //Total number of pages
        this.numPages = 1;
    };
    List.prototype.init = function (){
        $("nextButton").observe("click", list.nextPage);
        $("previousButton").observe("click", list.previousPage);
        $$('input[type="button"]').each(function(element){
            element.observe("mouseover",function(event){
                var e = Event.element(event);
                e.setStyle({cursor:"pointer"});
            });		
        });
        var tableBody = $("listBody");
        tableBody.update("");
        list.lastPageFetched = 0;
        list.currentPage = 0;
        list.numPages = 1;
        list.productList = new Array();
        list.waiting = true;
        list.showProgress();
        list.fetch();
    }
    List.prototype.fetch = function (){
        if (list.lastPageFetched &lt; ((list.numPages)/2)) { //Only for the 5 pages provided by the service
            list.search();
        }else{
            list.showTable();
        }
    }
    List.prototype.search = function (){
        //Get the facts to invoke the service
        var filter = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#SearchCriteria');
        var user = ScreenflowEngineFactory.getInstance().getFact('user');
        //Add the ItemSearch parameters
        var productType = filter.data.productType;
        if(!productType){
            productType = 'All'
        }
        var parameters = "";
        parameters += "&amp;SearchIndex=" + productType;
        parameters += "&amp;Keywords=" + encodeURIComponent(filter.data.searchText);
        //Add the page number (if is set)
        parameters += "&amp;ItemPage=" + (list.lastPageFetched + 1);
        //Base URL of the REST Service
        var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
        //Add the AccessKeyId (get from the user fact)
        /*if (user)
            url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
        else // if the KB doesn't contain a user key Id, add one by default
            url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
        //Add the operation Type
        url +="&amp;Operation=ItemSearch";
        //Add the parameters
        url += parameters;
        //Add the responseGroup
        url +="&amp;ResponseGroup=Medium";
        //Add the current version of the API
        url += "&amp;Version=2008-06-26";

        var encoder = new URLAmazonEncoder();
        encodedUrl = encoder.encode(url);
 
        //Invoke the service
        new FastAPI.Request(encodedUrl,{
            'method':       'get',
            'content':      'xml',
            'context':      list,
            'onSuccess':    list.addToList
        });
    }
    List.prototype.addToList = function (transport){
        var xml = transport;
        //Check if the service returned an error
        if (xml.getElementsByTagName("IsValid")[0].childNodes[0].nodeValue == "False") {
            //alert(xml.getElementsByTagName("Message")[0].childNodes[0].nodeValue);
        } else {
            //Correct response, create the result List
            var _list = xml.getElementsByTagName("Items")[0].getElementsByTagName("Item");
            //Fill the table, 1 row per item
            $A(_list).each(function(item){
                if (item.getElementsByTagName("Title").length &gt; 0)
                    var title = item.getElementsByTagName("Title")[0].firstChild.nodeValue;
                else
                    var title = "&amp;nbsp;";
                if (item.getElementsByTagName("FormattedPrice").length &gt; 0)
                    var price = item.getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;
                else
                    var price = "&amp;nbsp;";
                if (item.getElementsByTagName("ProductGroup").length &gt; 0)
                    var pGroup = item.getElementsByTagName("ProductGroup")[0].firstChild.nodeValue;
                else
                    var pGroup = "&amp;nbsp;";
                if (item.getElementsByTagName("ASIN").length &gt; 0)
                    var ASIN = item.getElementsByTagName("ASIN")[0].firstChild.nodeValue;
                var row = {
                    title: title,
                    price: price,
                    pGroup: pGroup,
                    ASIN: ASIN
                };
                list.productList.push(row);
            });
            if (xml.getElementsByTagName("TotalPages").length &gt; 0){
                var totalPages = parseInt(xml.getElementsByTagName("TotalPages")[0].firstChild.nodeValue);
                var totalResults = parseInt(xml.getElementsByTagName("TotalResults")[0].firstChild.nodeValue);
                //Recalculate the last page
                if (totalPages &gt; 0)
                    list.numPages = totalPages*2 - 1 + ((totalResults % 10) &gt; 5 ? 1:0);
                else
                    list.numPages = 0;
                if (list.numPages &gt; 10)
                    list.numPages = 10;
            }
            $("totalPages").update(list.numPages);
            list.lastPageFetched++;
            if (list.waiting) {
                list.waiting = false;
                list.showTable();
            }
        }
    }
    List.prototype.productDetail = function (nodeElement,_ASIN){
        list.clearSelected ();
        //select the element
        nodeElement.parentNode.parentNode.setStyle({background: "#FFF8E8"});
        var item = {uri: 'http://aws.amazon.com/AWSECommerceService#Item', data:{ASIN: _ASIN, title: nodeElement.parentNode.parentNode.firstChild.firstChild.nodeValue}};
        ScreenflowEngineFactory.getInstance().manageFacts([item],[]);
    }
    List.prototype.clearSelected = function (){
        $$("tbody tr").each(function (element){
            element.setStyle({background: "transparent url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td1.jpg) repeat-x top"});
        });
    }
    List.prototype.onError = function (transport){
    //alert(transport.responseText);
    }
    List.prototype.showProgress = function (){
        list.waiting = true;
        $("loadingImg").show();
    }
    List.prototype.showTable = function (){
        $("loadingImg").hide();
        //$("listBody").setStyle({visibility:"visible"});
        var templateString = '&lt;tr&gt;&lt;td&gt;#{title}&lt;/td&gt;&lt;td&gt;#{price}&lt;/td&gt;&lt;td&gt;#{pGroup}&lt;/td&gt;';
        templateString += '&lt;td style="border-right:none;"&gt;&lt;input type="button" onclick="list.productDetail(this,\'#{ASIN}\');"';
        templateString += ' onmouseover="this.setStyle({cursor:\'pointer\'});" value="Select"/&gt;&lt;/td&gt;&lt;/tr&gt;';
        var rowTemplate = new Template(templateString);
        var tableBody = $("listBody");
        for (var i = 5 * list.currentPage; i &lt; 5 * (list.currentPage + 1); i++) { //print the appropriate elements
            if (list.productList[i]) { //only if the product table is fetched
                tableBody.innerHTML += rowTemplate.evaluate(list.productList[i]);
            }
        }
        list.updateCurrentPage();
        //Update Interface
        if (list.currentPage &lt; (list.numPages - 1)) {
            $("nextButton").setStyle({visibility: "visible"});
        } else {
            $("nextButton").setStyle({visibility: "hidden"});
        }
        if (list.currentPage &gt; 0) {
            $("previousButton").setStyle({visibility: "visible"});
        } else {
            $("previousButton").setStyle({visibility: "hidden"});
        }
    }
    List.prototype.nextPage = function (){
        //Clear the table
        var tableBody = $("listBody");
        tableBody.update("");
        list.currentPage++;
        if (list.productList.length &gt;= (list.currentPage + 1) * 5) {
            list.showTable();
            // Lookahead
            if ((list.currentPage + 1) * 5 &gt;= list.productList.length) {
                list.fetch();
            }
        } else {
            list.showProgress();
            list.fetch();
        }
        list.updateCurrentPage();
    }
    List.prototype.previousPage = function (){
        //Clear the table
        var tableBody = $("listBody");
        tableBody.update("");
        list.currentPage--;
        list.showTable();
        list.updateCurrentPage();
    }
    //update the current page in the interface
    List.prototype.updateCurrentPage = function (){
        (list.currentPage&lt;9 &amp;&amp; list.numPages &gt; 9)?$("curPage").update("0"):$("curPage").update("");
        if (list.numPages &gt; 0)
            $("curPage").innerHTML +=list.currentPage+1;
        else
            $("curPage").innerHTML += "0";
    }
    var list = new List();
    ScreenflowEngineFactory.getInstance().addScreenLoader("1", list.init);
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id="bodyDiv"&gt;
    &lt;span id="amazonImage"&gt;
        &lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.png" /&gt;
    &lt;/span&gt;
&lt;h1 id="title"&gt;Item list&lt;/h1&gt;
&lt;div id="listDiv"&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th style="width: 60%; -moz-border-radius: 13px 0px 0px 0px;"&gt;Title&lt;/th&gt;
            &lt;th style="width: 10%"&gt;Price&lt;/th&gt;
            &lt;th style="width: 20%"&gt;Product Group&lt;/th&gt;
            &lt;th style="width: 10%; -moz-border-radius: 0px 13px 0px 0px;"&gt;&amp;nbsp;&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody id="listBody"&gt;
        &lt;tr&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;img id="loadingImg"
    src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif" /&gt;
&lt;div id="buttonContainerDiv"&gt;
    &lt;input type="button" id="previousButton" class="button" value="&lt;" /&gt;
    &lt;span id="pages"&gt; Page &lt;span id="curPage"&gt;-&lt;/span&gt;/&lt;span id="totalPages"&gt;-&lt;/span&gt;&lt;/span&gt;
    &lt;input type="button" id="nextButton" class="button" value="&gt;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</field>
    </object>
    <object pk="2" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">2</field>
        <field type="TextField" name="code">&lt;html&gt;
		    &lt;head&gt;
		        &lt;script language="JavaScript"&gt;
		        	function Order(){};
		        	
		        	Order.prototype.init = function (){
		        		var purchase = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#PurchaseURL');
						var obj = new Element ('object',{type: "text/html", data: purchase.data.url, standby: "Loading...", width: "100%",  height: "100%"});
						$("bodyDivOrder").update(obj);
					}
					
					var order = new Order();
					ScreenflowEngineFactory.getInstance().addScreenLoader("2", order.init);
		        &lt;/script&gt;
		    &lt;/head&gt;
		    &lt;body&gt;
		        &lt;div id="bodyDivOrder"&gt;
		        &lt;/div&gt;
		    &lt;/body&gt;
&lt;/html&gt;</field>
    </object>
    <object pk="3" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">3</field>
        <field type="TextField" name="code">&lt;html&gt;
	&lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"&gt;
		&lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/table.css" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#pagesComparative{
				color:#FEBF43;
				font-weight: bold;
				padding: 10px;
			}
			#previousButtonComparative, #nextButtonComparative {
				visibility:hidden;
			}
			#loadingImgComparative{
				margin:auto;
				padding-top: 10px;
			}
			#like{
				padding: 5px;
				color: #777777;
			}
			.productTitle{
				font-weight:bold;
				font-style:normal;
			}
			#listDiv tbody td {
				text-align: justify;
			}
			.tiny{
				font-size:10px;
			}
			#amazonImage{
				position:absolute;
				right:0px;
				top:3px;
			}
		&lt;/style&gt;
		&lt;script language="JavaScript" src="http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"&gt;&lt;/script&gt;
		&lt;script language="JavaScript" src="http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"&gt;&lt;/script&gt;
        &lt;script language="JavaScript"&gt;
        
        	function PriceComparative(){
	            //Next set of products to print in the table
	            this.currentPage = 0;
	            //Product list fetched from the Service
	            this.productList = new Array();
	            //Are we waiting for data?
	            this.waiting = true;
            };
            
            PriceComparative.prototype.init = function (){
                $("nextButtonComparative").observe("click", priceComparative.nextPage);
                $("previousButtonComparative").observe("click", priceComparative.previousPage);
				$$('input[type="button"]').each(function(element){
					element.observe("mouseover",function(event){
						var e = Event.element(event);
						e.setStyle({cursor:"pointer"});
					});
				
				});
				var item = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#Item');
				$$(".productTitle").each(function(element){
					element.update(item.data.title);
				});
				var tableBody = $("listBodyComparative");
                tableBody.update("");
                priceComparative.currentPage = 0;
	            priceComparative.productList = new Array();
	            priceComparative.waiting = true;
	            priceComparative.showProgress();
                priceComparative.fetch();
            }
            
            PriceComparative.prototype.fetch = function (){
            
            	//Get the facts to invoke the service
                var item = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#Item');
                var user = ScreenflowEngineFactory.getInstance().getFact('user');
                //Add the ItemSearch parameters
                var parameters = "";
				parameters += "&amp;ItemId=" + item.data.ASIN;
				parameters += "&amp;MerchantId=All&amp;Condition=All";
                
                //Base URL of the REST Service
				var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
				//Add the AccessKeyId (get from the user fact)
				/*if (user)
					url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
				else // if the KB doesn't contain a user key Id, add one by default
					url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
				//Add the operation Type
				url +="&amp;Operation=ItemLookup";
				//Add the parameters
				url += parameters;
				//Add the responseGroup
				url +="&amp;ResponseGroup=OfferFull";
				//Add the current version of the API
				url += "&amp;Version=2008-06-26";
                               
	
			var encoder = new URLAmazonEncoder();
			url = encoder.encode(url);
	

				//Invoke the service
		        new FastAPI.Request(url,{
		            'method':       'get',
		            'content':      'xml',
		            'context':      priceComparative,
		            'onSuccess':    priceComparative.addToList
		        });
            }
            
            PriceComparative.prototype.addToList = function (transport){
                var xml = transport;
                //Check if the service returned an error
                if (xml.getElementsByTagName("IsValid")[0].childNodes[0].nodeValue == "False") {
                    alert(xml.getElementsByTagName("Message")[0].childNodes[0].nodeValue);
                }
                else { //Correct response, create the result List
                    var comparativelist = xml.getElementsByTagName("Offers")[0].getElementsByTagName("Offer");
                    //Fill the table, 1 row per item
                    $A(comparativelist).each(function(offer){
                        if (offer.getElementsByTagName("Name").length &gt; 0) 
                            var sellerName = offer.getElementsByTagName("Name")[0].firstChild.nodeValue;
						else
							if  (offer.getElementsByTagName("Nickname").length &gt; 0)
						    	var sellerName = offer.getElementsByTagName("Nickname")[0].firstChild.nodeValue;
							else
								var sellerName = "&amp;nbsp;";
                        if (offer.getElementsByTagName("SellerId").length &gt; 0) 
                            var sellerId = offer.getElementsByTagName("SellerId")[0].firstChild.nodeValue;
						else
						    var sellerId = "none";
                        if (offer.getElementsByTagName("AverageFeedbackRating").length &gt; 0) 
                            var averageRating = offer.getElementsByTagName("AverageFeedbackRating")[0].firstChild.nodeValue;
						else
						    var averageRating = "&amp;nbsp;";
                        if (offer.getElementsByTagName("TotalFeedback").length &gt; 0) 
                            var totalFeedback = offer.getElementsByTagName("TotalFeedback")[0].firstChild.nodeValue;
						else
						    var totalFeedback = "&amp;nbsp;";
                        if (offer.getElementsByTagName("Condition").length &gt; 0)
							var condition = offer.getElementsByTagName("Condition")[0].firstChild.nodeValue;             
						else
						    var condition = "&amp;nbsp;";
                        if (offer.getElementsByTagName("ConditionNote").length &gt; 0)
							var conditionNote = "(" + offer.getElementsByTagName("ConditionNote")[0].firstChild.nodeValue + ")";             
						else
						    var conditionNote = "&amp;nbsp;";
                        if (offer.getElementsByTagName("OfferListingId").length &gt; 0)
							var offerId = offer.getElementsByTagName("OfferListingId")[0].firstChild.nodeValue;             
						else
						    var offerId = "";
                        if (offer.getElementsByTagName("Price").length &gt; 0)
							var price = offer.getElementsByTagName("Price")[0].getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;             
						else
						    var price = "";
                        if (offer.getElementsByTagName("AmountSaved").length &gt; 0)
							var amountSaved = offer.getElementsByTagName("AmountSaved")[0].getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;             
						else
						    var amountSaved = "";
                        if (offer.getElementsByTagName("PercentageSaved").length &gt; 0)
							var percentageSaved = offer.getElementsByTagName("PercentageSaved")[0].firstChild.nodeValue;             
						else
						    var percentageSaved = "&amp;nbsp;";
                        if (offer.getElementsByTagName("Availability").length &gt; 0)
							var availability = offer.getElementsByTagName("Availability")[0].firstChild.nodeValue;             
						else
						    var availability = "&amp;nbsp;";
                        var row = {
                            sellerName: sellerName,
                            sellerId: sellerId,
                            location: location,
                            averageRating: averageRating,
							totalFeedback: totalFeedback,
							condition: condition,
							conditionNote: conditionNote,
							offerId: offerId,
							price: price,
							amountSaved: amountSaved,
							percentageSaved: percentageSaved,
							availability: availability
                        };
                        priceComparative.productList.push(row);
				    });
                    if (priceComparative.waiting) {
                        priceComparative.waiting = false;
                        priceComparative.showTable();
                    }
                }
            }
            
			PriceComparative.prototype.addToCart = function (offerId){
				var cart = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#ShoppingCart');
				var user = ScreenflowEngineFactory.getInstance().getFact('user');
				if (cart){//If the cart is already created, it will have an ID in the User Fact
					var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
					//Add the AccessKeyId (get from the user fact)
					/*if (user)
						url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
					else // if the KB doesn't contain a user key Id, add one by default
						url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
					//Add the operation Type
					url +="&amp;Operation=CartAdd";
					//Add the current version of the API
					url += "&amp;Version=2008-06-26";
					//Add item ID
					url += "&amp;CartId=" + cart.data.id;
					url += "&amp;HMAC=" + cart.data.HMAC;
					url += "&amp;Item.1.OfferListingId=" + offerId;
					url += "&amp;Item.1.Quantity=" + 1;
					
						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);
	
					//Invoke the service
					new FastAPI.Request(url,{
	                    'method':       'get',
	                    'content':      'xml',
	                    'context':      priceComparative,
	                    'onSuccess':    priceComparative.productAdded
	                });
				}
				else { //Cart doesn't exist: Create a new cart with the product
					var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
					//Add the AccessKeyId (get from the user fact)
				/*	if (user)
						url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
					else // if the KB doesn't contain a user key Id, add one by default
						url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
					//Add the operation Type
					url +="&amp;Operation=CartCreate";
					//Add the current version of the API
					url += "&amp;Version=2008-06-26";
					//Add item ID
					url += "&amp;Item.1.OfferListingId=" + offerId;
					url += "&amp;Item.1.Quantity=" + 1;
					
						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);
	
					//Invoke the service
	                new FastAPI.Request(url,{
	                    'method':       'get',
	                    'content':      'xml',
	                    'context':      priceComparative,
	                    'onSuccess':    priceComparative.cartCreated
	                });
				}
			}
			
			PriceComparative.prototype.cartCreated = function (transport){
				var xml = transport;
				
				//The product is added to the cart,
				//tell it to the user
				if (xml.getElementsByTagName("IsValid")[0].firstChild.nodeValue == "True"){
					
					//Check if the product is eligible for shopping
					if ((xml.getElementsByTagName("Error").length &gt; 0) &amp;&amp; 
						xml.getElementsByTagName("Error")[0].firstChild.firstChild.nodeValue == "AWS.ECommerceService.ItemNotEligibleForCart"){
						//The product is not elegible
						alert ("The product is not eligible to be added to the cart");
						return;
					}
					//Add the Cart ID to the KB
					var cart = {uri: 'http://aws.amazon.com/AWSECommerceService#ShoppingCart',
								data:{id: xml.getElementsByTagName("CartId")[0].firstChild.nodeValue,
									HMAC: xml.getElementsByTagName("URLEncodedHMAC")[0].firstChild.nodeValue}};
					ScreenflowEngineFactory.getInstance().manageFacts([cart],[]);
					alert ("Product added to the shopping Cart");
				}
				else {
					alert ("Error adding the product to the cart");
			    }
			}
			
			PriceComparative.prototype.productAdded = function (transport){
				var xml = transport;
				//Check if the product is eligible for shopping
				if ((xml.getElementsByTagName("Error").length &gt; 0) &amp;&amp; 
					xml.getElementsByTagName("Error")[0].firstChild.firstChild.nodeValue == "AWS.ECommerceService.ItemNotEligibleForCart"){
					//The product is not elegible
					alert ("The product is not eligible to be added to the cart");
					return;
				}
				//If the product is added to the cart,
				//tell it to the user
				if (xml.getElementsByTagName("IsValid")[0].firstChild.nodeValue == "True")
					alert ("Product added to the shopping Cart");
				else
					alert ("Error adding the product to the cart");
			}
			PriceComparative.prototype.onError = function (transport){
                //alert(transport.responseText);
            }
            
            PriceComparative.prototype.showProgress = function (){
                priceComparative.waiting = true;
                $("loadingImgComparative").show();
            }
            
            PriceComparative.prototype.showTable = function (){
            	if($("loadingImgComparative")){
                	$("loadingImgComparative").hide();
                }
                var templateString = '&lt;tr&gt;&lt;td&gt;&lt;span class="info"&gt;#{price}&lt;/span&gt; &lt;br /&gt;&lt;span class="tiny"&gt;You save #{amountSaved} (#{percentageSaved}%)&lt;/span&gt;&lt;/td&gt;';
				templateString += '&lt;td&gt;#{condition} #{conditionNote} &lt;/td&gt;'; 
			    templateString += '&lt;td&gt;&lt;a target="_blank" href="http://www.amazon.com/gp/help/seller/at-a-glance.html?seller=#{sellerId}"&gt;';
				templateString += '#{sellerName}&lt;/a&gt;&lt;br /&gt;&lt;span class="info"&gt;Rating:&lt;/span&gt; #{averageRating} of #{totalFeedback} user reviews';
				templateString += '&lt;br /&gt;&lt;span class="info"&gt;Availability:&lt;/span&gt; #{availability}&lt;/td&gt;';
				templateString += '&lt;td&gt;&lt;input width="112" type="image" height="21" border="0" align="absmiddle"';
				templateString += 'alt="Add to cart" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/addToCart-small.gif"';
				templateString += 'onclick="priceComparative.addToCart(\'#{offerId}\'); /&gt;&lt;/td&gt;&lt;/tr&gt;';
                var rowTemplate = new Template(templateString);
                
                var tableBody = $("listBodyComparative");
                for (var i = 5 * priceComparative.currentPage; i &lt; 5 * (priceComparative.currentPage + 1); i++) { //print the appropriate elements
                    if (priceComparative.productList[i]) { //only if the product table is fetched
                        tableBody.innerHTML += rowTemplate.evaluate(priceComparative.productList[i]);
                    }
                }
                //Update Interface
                if (priceComparative.currentPage &lt; 1) {
                    $("nextButtonComparative").setStyle({
                        visibility: "visible"
                    });
                }
                else {
                    $("nextButtonComparative").setStyle({
                        visibility: "hidden"
                    });
                }
                if (priceComparative.currentPage &gt; 0) {
                    $("previousButtonComparative").setStyle({
                        visibility: "visible"
                    });
                }
                else {
                    $("previousButtonComparative").setStyle({
                        visibility: "hidden"
                    });
                }
            }
            
            PriceComparative.prototype.nextPage = function (){
                //Clear the table
                var tableBody = $("listBodyComparative");
                tableBody.update("");
                priceComparative.currentPage++;
                priceComparative.showTable();
				//update the current page in the interface
				 $("curPageComparative").update(priceComparative.currentPage+1);
            }
            
           PriceComparative.prototype.previousPage = function (){
                //Clear the table
                var tableBody = $("listBodyComparative");
                tableBody.update("");
                priceComparative.currentPage--;
                priceComparative.showTable();
				//update the current page in the interface;
				$("curPageComparative").update(priceComparative.currentPage+1);
            }
            
            var priceComparative = new PriceComparative();
			ScreenflowEngineFactory.getInstance().addScreenLoader("3", priceComparative.init);
			
        &lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
        &lt;div id="bodyDiv"&gt;
        	&lt;span id="amazonImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.png" /&gt;&lt;/span&gt;
            &lt;h1 id="title"&gt;Price Comparative&lt;/h1&gt;
			&lt;div id="like"&gt;Offers for &lt;span class="productTitle"&gt;&lt;/span&gt;&lt;/div&gt;
            &lt;div id="listDiv"&gt;
                &lt;table&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th style="width: 20%; -moz-border-radius-topleft: 13px; -moz-border-radius-topright: 0px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;
                                Price
                            &lt;/th&gt;
                            &lt;th style="width: 20%;"&gt;
                                Condition
                            &lt;/th&gt;
                            &lt;th style="width: 40%;"&gt;
                                Seller Information
                            &lt;/th&gt;
                            &lt;th style="width: 20%; -moz-border-radius-topleft: 0px; -moz-border-radius-topright: 13px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;
                                Ready to Buy?
                            &lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody id="listBodyComparative"&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
		    &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;img style="display: none;" id="loadingImgComparative" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif"&gt;
                &lt;div id="buttonContainerDiv"&gt;
                    &lt;input style="visibility: hidden;" id="previousButtonComparative" class="button" value="&amp;lt;" type="button"&gt;
					&lt;span id="pagesComparative"&gt;
					Page &lt;span id="curPageComparative"&gt;1&lt;/span&gt;/2
					&lt;/span&gt;&lt;input style="visibility: visible;" id="nextButtonComparative" class="button" value="&amp;gt;" type="button"&gt;
                &lt;/div&gt;
				
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</field>
    </object>
    <object pk="4" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">4</field>
        <field type="TextField" name="code">&lt;html&gt;
		    &lt;head&gt;
		        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" /&gt;
		        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
				&lt;style type="text/css"&gt;
					#productImage{
						height: 170px;
						-moz-border-radius: 13px 13px;
						background: #FFF8E8 url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td2.jpg) repeat-x;
						border:1px solid #F8A704;
						margin:0px auto 13px;
						text-align:center;
						width:88%;
						padding-bottom:5px;
						padding-top:10px;
					}
					#leftColumn{
						position: relative;
						float:left;
						height: 100%;
						width: 35%;
					}
					#rightColumn{
						position: relative;
						float:right;
						height: 268px;
						width: 60%;
						-moz-border-radius:13px 13px;
						background:#FFF8E8 url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td2.jpg) repeat-x;
						border:1px solid #F8A704;
						padding-top:5px;
						padding-right:0px;
						padding-left:5px;
						padding-bottom: 5px;
						position:relative;
					}
					#infoArea{
						text-align: left;
					}
					#titleInfo{
						float:left;
						margin: 5px;
						width:35%;
						overflow: hidden;
					}
					#valueInfo{
						float:left;
						margin: 5px 15px 5px 5px;
						width: 50%;
					}
					#moreInfo{
						float:left;
						margin-left: 5px;
					}
					.title{
						padding: 2px;
						color:#AAAAAA;
						font-weight: bold;
						font-family:Arial,Helvetica,sans-serif;	
						white-space:nowrap;
						overflow: hidden;
					}
					.info{
						padding: 2px;
						color:#888888;
						font-family:Arial,Helvetica,sans-serif;
						font-weight: bold;
						text-align: justify;
						white-space: nowrap;
						overflow: hidden;
					}
					#quantity {
						margin: 5px;
						color:#777777;
						font-weight: bold;
						font-family:Arial,Helvetica,sans-serif;
					}
					#cart {
						border: 1px solid #F8A704;
						-moz-border-radius:13px 13px;
						background:#FFF8E8 url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/bg_td2.jpg) repeat-x;
						border:1px solid #F8A704;
						height:78px;
						margin:5px auto 0px;
						padding:0px;
						text-align:center;
						width:88%;
					}
					#moreInfoText {
						color:#888888;
						font-family:Arial,Helvetica,sans-serif;
						font-size:13px;
						height:133px;
						margin:0;
						overflow:auto;
						padding:2px 15px 2px 2px;
						text-align:left;
						width:300px;
						max-width:300px;
					}
					.detailsElement {
						color:#888888;
						font-weight:bold;
					}
					#bodyDivDetails {
						max-width:550px;
						text-align:center;
						margin: 8px auto 20px auto;
						height:270px;
					}
					#amazonImage{
						position:absolute;
						right:0px;
						top:3px;
					}
				&lt;/style&gt;
				&lt;script language="JavaScript" src="http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"&gt;&lt;/script&gt;
				&lt;script language="JavaScript" src="http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"&gt;&lt;/script&gt;
		        &lt;script language="JavaScript"&gt;
		        
		        	function Product(){};
		        	
		        	Product.prototype.init = function (){
						var user = ScreenflowEngineFactory.getInstance().getFact('user');
						var item = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#Item');
						$("addToCart").observe("click", product.addToCart);
						//Base URL of the REST Service
						var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
						//Add the AccessKeyId (get from the user fact)
						/*if (user)
							url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
						else // if the KB doesn't contain a user key Id, add one by default
							url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
						//Add the operation Type
						url +="&amp;Operation=ItemLookup";
						//Add the responseGroup
						url +="&amp;ResponseGroup=Medium";
						//Add the current version of the API
						url += "&amp;Version=2008-06-26";
						//Add item ID
						url += "&amp;ItemId=" + item.data.ASIN;
						
						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);
	
						//Invoke the service
		                new FastAPI.Request(url,{
		                    'method':       'get',
		                    'content':      'xml',
		                    'context':      product,
		                    'onSuccess':    product.fetchProductInfo
		                });
					}
					
					Product.prototype.fetchProductInfo = function (transport){
						var xml = transport;
						var item = xml.getElementsByTagName("Item")[0];
						if (item.getElementsByTagName("Title").length &gt; 0)
							var title = item.getElementsByTagName("Title")[0].firstChild.nodeValue;
						 if (item.getElementsByTagName("FormattedPrice").length &gt; 0) 
		                    var price = item.getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;
		                if (item.getElementsByTagName("ProductGroup").length &gt; 0) 
		                    var pGroup = item.getElementsByTagName("ProductGroup")[0].firstChild.nodeValue;
		                if (item.getElementsByTagName("DetailPageURL").length &gt; 0) 
		                    var url = item.getElementsByTagName("DetailPageURL")[0].firstChild.nodeValue;
		                if (item.getElementsByTagName("MediumImage").length &gt; 0) 
		                    var image = item.getElementsByTagName("MediumImage")[0].getElementsByTagName("URL")[0].firstChild.nodeValue;
						var _product = {
							title: title,
							price: price,
							pGroup: pGroup,
							url: url,
							image: image
						};
						product.showProductInfo (_product);
						product.showAdvancedDetails (item,pGroup);
						
						$("quantitySelect").value=1;
					}
					
					Product.prototype.showProductInfo = function (_product){
						if (_product.title){
							//Reset styles
							$("productTitle").setStyle ({"fontSize":"20px"});
							$("moreInfoText").setStyle({"height": "133px"});
							$("productTitle").update(_product.title);
							if ($("productTitle").clientHeight &gt; 28){//Big title
								//Big title, adapt styles
								$("productTitle").setStyle ({"fontSize":"16px"});
								if ($("productTitle").clientHeight &gt; 23) {//More than one line
									if ($("productTitle").clientHeight &gt; 46){//More than two lines
										if ($("productTitle").clientHeight &gt; 69){//More than three lines
											$("productTitle").setStyle ({"fontSize":"13px"});
											if ($("productTitle").clientHeight &gt; 49) //Still more than three lines
												$("moreInfoText").setStyle({"height": "90px"});
											else
												$("moreInfoText").setStyle({"height": "110px"});
										} 
										else{//Three lines
											$("moreInfoText").setStyle({"height": "110px"});
											$("productTitle").setStyle ({"fontSize":"14px"});	
										}
									}
									else //Two lines
										$("moreInfoText").setStyle({"height": "115px"});	
								}
								/*else //One line, 16px title
		 							$("moreInfoText").setStyle({
										"height": "125px"
									});*/
							}
							
						}
						if (_product.price){
							$("price").update(_product.price);
						} else {
							$("price").update("");
						}
						if (_product.pGroup){
							$("pGroup").update(_product.pGroup);
						} else {
							$("pGroup").update("");
						}
						if (_product.url){
							var a = new Element('a',{href:_product.url,target:"_blank"}).update ("Amazon");
							$("url").update (a);
						} else {
							$("url").update ("");
						}
						if (_product.image){
							var img = new Element ('img',{src: _product.image});
							$("productImage").update(img);
						} else {
							var img = new Element ('img',{src: "http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.jpg"});
							$("productImage").update(img);	
						}
										
					}
					
					Product.prototype.showAdvancedDetails = function (element,pGroup){
						/*List of possible product groups (with * groups already considered)
						 * Apparel,Baby Product,Beauty,*Book,*CE,*DVD,*eBooks,Furniture,Gourmet,Health and Beauty,
						 * Home,Home Improvement,Kitchen,Lawn &amp; Patio,Magazine,*Music,Musical Instruments,
						 * Office Product,*Personal Computer,Pet Products,*Photography,Single Detail Page Misc,
						 * *Software,Sports,*Theatrical Release,Toy,*Video,*Video Games,Watch,*Wireless,*Wireless Phone Accessory
						 */
						var itemAttributes = element.getElementsByTagName("ItemAttributes")[0];
						var attributesHTML = "&lt;ul&gt;";
						//List of elements to be shown
						var elementList = [];
						switch (pGroup){
							case "eBooks":
							case "Book":
								//Print all book authors
								attributesHTML += product.elementDetail("Author",itemAttributes,"Author(s)");
								//Print the remainder features
								elementList = [{nodeElement:"PublicationDate",caption:"Publication Date"},
											   "ISBN",
											   "Format",
											   {nodeElement:"Label", caption:"Publisher"},
											   {nodeElement:"NumberOfPages", caption:"Pages"}];	
							    attributesHTML += product.productDetailsList(elementList,itemAttributes);	
								break;
							case "Theatrical Release":
							case "Video":
							case "DVD":
								//Print all actors
								attributesHTML += product.elementDetail("Actor",itemAttributes,"Cast");
								//Print all directors
								attributesHTML += product.elementDetail("Director",itemAttributes);
								elementList = 	["Genre",
												{nodeElement:"RunningTime",caption: "Run Time"},
												{nodeElement:"AudienceRating", caption:"Audience Rating"},
												"Label",
												"Binding",
												"Region",
												{nodeElement:"AspectRatio", caption:"Aspect Ratio"},
												{nodeElement:"OriginalReleaseDate", caption:"Release Date"}
												];
								attributesHTML += product.productDetailsList(elementList,itemAttributes);
								attributesHTML += product.twoElements ("DVDLayers","DVDSides",itemAttributes,"DVD Layers / Sides");
								//Print technical details
								attributesHTML += product.elementDetail("Format",itemAttributes);
								break;
							case "Digital Music Track":
							case "Music":
								elementList = 	["Artist",
												"Genre",
												"Label",
												"Binding",
												"Format",
												{nodeElement:"NumberOfDiscs", caption:"Number of Discs"},
												{nodeElement:"ReleaseDate", caption:"Release Date"},
												{nodeElement:"OriginalReleaseDate", caption:"Original Release Date"}
												];
								attributesHTML += product.productDetailsList(elementList,itemAttributes);
								break;
							case "Photography":
								//Print details 
								elementList = ["Brand","Model"];
								attributesHTML += product.productDetailsList(elementList,itemAttributes);	
								//Print all camera features
								attributesHTML += product.elementDetail("Feature",itemAttributes,"Features",".");
								break;
							case "Personal Computer":
								elementList = 	["Model",
												"Label",
												"Binding"];
								attributesHTML += product.productDetailsList(elementList,itemAttributes);
								attributesHTML += product.twoElements ("CPUType","CPUSpeed",itemAttributes,"CPU", " ");
								elementList = 	[{nodeElement:"DisplaySize", caption:"Display Size"},
												{nodeElement:"HardDiskSize", caption:"Hard Disk Size"},
												{nodeElement:"DataLinkProtocol", caption:"Data Link Protocol"},
												{nodeElement:"FloppyDiskDriveDescription", caption:"Floppy Disk Drive"}];
								attributesHTML += product.productDetailsList(elementList,itemAttributes);
								attributesHTML += product.twoElements ("SystemMemorySize","SystemMemoryType",itemAttributes,"Memory", " ");								
								elementList = 	[{nodeElement:"HardwarePlatform", caption:"Hardware Platform"},
												{nodeElement:"OperatingSystem", caption:"Operating System"},
												{nodeElement:"ReleaseDate",caption:"Release Date"},
												"Warranty",
												{nodeElement:"LegalDisclaimer",caption:"Legal Disclaimer"}
												];	
								attributesHTML += product.productDetailsList(elementList,itemAttributes);
								//Print technical details
								attributesHTML += product.elementDetail("Feature",itemAttributes, "Features",".");
								//Print special features
								attributesHTML += product.specialElementDetail("SpecialFeatures",itemAttributes,"|","Special Features",".");
								break;
							case "CE":
							case "Video Games":						
							case "Software":
							case "Wireless":
							case "Wireless Phone Accessory":
								elementList = 	["Model",
												"Color",
												"Label",
												"Binding",
												{nodeElement:"DisplaySize", caption:"Display Size"},
												{nodeElement:"ESRBAgeRating", caption:"Age Rating"},
												{nodeElement:"HardwarePlatform", caption:"Hardware Platform"},
												{nodeElement:"OperatingSystem", caption:"Operating System"},
												{nodeElement:"ReleaseDate",caption:"Release Date"},
												{nodeElement:"LegalDisclaimer",caption:"Legal Disclaimer"}
												];
								attributesHTML += product.productDetailsList(elementList,itemAttributes);
								//Print technical details
								attributesHTML += product.elementDetail("Feature",itemAttributes, "Features",".");
								//Print special features (only CE)
								attributesHTML += product.specialElementDetail("SpecialFeatures",itemAttributes,"|","Special Features",".");
								break;
							default:
								elementList = 	["Model",
												"Color",
												"Label",
												"Binding",
												{nodeElement:"ReleaseDate",caption:"Release Date"}
												];
								attributesHTML += product.productDetailsList(elementList,itemAttributes);
								attributesHTML += product.elementDetail("Feature",itemAttributes, "Features",".");
								break;				
						}
						attributesHTML += "&lt;/ul&gt;";
						if (attributesHTML.length&gt;9){//There is something to show
							$("moreInfoText").update(attributesHTML);
							$("moreInfoText").setStyle({"borderTop":"1px dotted #AAAAAA"});
							$("moreInfoTitle").update("Product Details");
						} 
							
					}
					//This function returns a html with pre-formatted details list
					//Each element of attributesList can be an object with two elements (nodeElement and caption)
					//or simply a string representing both of them
					Product.prototype.productDetailsList = function (attributesList,attributesNode){
						var result = "";
						$A(attributesList).each(function(attribute){
								var element = attributesNode.getElementsByTagName ((attribute.nodeElement?attribute.nodeElement:attribute));						
								if (element.length &gt; 0) {
									result += "&lt;li&gt;" + (attribute.caption?attribute.caption:attribute) + ": ";
									result += "&lt;span class='detailsElement'&gt;";
									result += element[0].firstChild.nodeValue;
									if (element[0].getAttribute("Units") &amp;&amp; element[0].getAttribute("Units")!= "unknown-units")
										result += " " + element[0].getAttribute("Units");
									result += "&lt;/span&gt;&lt;/li&gt;";
								}
						});
						return result;
					}
					//This function produces a single li with a list of elements (authors, features...)
					//caption parameter is optional
					//separationCharacter parameter is optional
					Product.prototype.elementDetail = function (element,attributesNode,caption,separationCharacter){
							var list = attributesNode.getElementsByTagName(element);
							var result = "";
							if (list.length &gt; 0){
								result += "&lt;li&gt;" + (caption?caption:element)  + ": &lt;span class='detailsElement'&gt;";
								$A(list).each (function (e){
									result += e.firstChild.nodeValue + (separationCharacter?separationCharacter + " ":", ");
								});
								//Remove last ", "
								result = result.substring(0,result.length-2);
								result += "&lt;/span&gt;&lt;/li&gt;";							
							}
							return result;			
					}
					//This function produces a single li with a list of features. The original line has 
					//extrange separators
					//caption parameter is optional
					//separationCharacter parameter is optional
					Product.prototype.specialElementDetail = function (element,attributesNode,beforeSeparationCharacter,caption,separationCharacter){
							var element = attributesNode.getElementsByTagName(element);
							var result = "";
							if (element.length &gt; 0){
								result += "&lt;li&gt;" + (caption?caption:element)  + ": &lt;span class='detailsElement'&gt;";
								var list = element[0].firstChild.nodeValue.split(beforeSeparationCharacter);
								$A(list).each (function (e){
									result += e + (separationCharacter?separationCharacter + " ":", ");
								});
								//Remove last ", "
								result = result.substring(0,result.length-2);
								result += "&lt;/span&gt;&lt;/li&gt;";							
							}
							return result;			
					}
					//This function produces a single li two elements separated by "/"
					//caption parameter is optional
					//separationCharacter is optional
					Product.prototype.twoElements = function (element1,element2,attributesNode, caption, separationCharacter){
							var _element1 = attributesNode.getElementsByTagName(element1);
							var _element2 = attributesNode.getElementsByTagName(element2);
							var result = "";
							//At least one correct element
							if (_element1.length &gt; 0 || _element2.length &gt; 0){
								result += "&lt;li&gt;" + (caption?caption:(element1 + " / " + element2))  + ": &lt;span class='detailsElement'&gt;";
								result += (_element1[0]?_element1[0].firstChild.nodeValue:"-");
								if (_element1[0].getAttribute("Units") &amp;&amp; _element1[0].getAttribute("Units")!= "unknown-units")
										result += " " + _element1[0].getAttribute("Units");
								result += (separationCharacter?separationCharacter:" / ");
								result += (_element2[0]?_element2[0].firstChild.nodeValue:"-");
								if (_element2[0].getAttribute("Units") &amp;&amp; _element2[0].getAttribute("Units")!= "unknown-units")
										result += " " + _element2[0].getAttribute("Units");
								result += "&lt;/span&gt;&lt;/li&gt;";							
							}
							return result;
					}
					
					Product.prototype.onError = function (transport){
		                //alert(transport.responseText);
		            }
		            
		            Product.prototype.addToCart = function (){
						var item = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#Item');
						var cart = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#ShoppingCart');
						var user = ScreenflowEngineFactory.getInstance().getFact('user');
						if (cart){//If the cart is already created, it will have an ID in the User Fact
							var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
							//Add the AccessKeyId (get from the user fact)
							/*if (user)
								url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
							else // if the KB doesn't contain a user key Id, add one by default
								url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
							//Add the operation Type
							url +="&amp;Operation=CartGet";
							//Add the current version of the API
							url += "&amp;Version=2008-06-26";
							//Add item ID
							url += "&amp;CartId=" + cart.data.id;
							url += "&amp;HMAC=" + cart.data.HMAC;
							
						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);
	
							//Invoke the service
	                        new FastAPI.Request(url,{
	                            'method':       'get',
	                            'content':      'xml',
	                            'context':      product,
	                            'onSuccess':    product.isProductOnCart
	                        });
						}
						else { //Cart doesn't exist: Create a new cart with the product
							var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
							//Add the AccessKeyId (get from the user fact)
							/*if (user)
								url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
							else // if the KB doesn't contain a user key Id, add one by default
								url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
							//Add the operation Type
							url +="&amp;Operation=CartCreate";
							//Add the current version of the API
							url += "&amp;Version=2008-06-26";
							//Add item ID
							url += "&amp;Item.1.ASIN=" + item.data.ASIN;
							url += "&amp;Item.1.Quantity=" + $F("quantitySelect");
							
						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);
	
							//Invoke the service
	                    	new FastAPI.Request(url,{
                                'method':       'get',
                                'content':      'xml',
                                'context':      product,
                                'onSuccess':    product.cartCreated
                            });
						}
					}
					
					Product.prototype.cartCreated = function (transport){
						var xml = transport;
						
						//The product is added to the cart,
						//tell it to the user	
						if (xml.getElementsByTagName("IsValid")[0].firstChild.nodeValue == "True"){
							
							//Check if the product is eligible for shopping
							if ((xml.getElementsByTagName("Error").length &gt; 0) &amp;&amp; 
								xml.getElementsByTagName("Error")[0].firstChild.firstChild.nodeValue == "AWS.ECommerceService.ItemNotEligibleForCart"){
								//The product is not elegible
								alert ("The product is not eligible to be added to the cart");
								return;
							}
							//Add the Cart ID to the KB
							var cart = {uri: 'http://aws.amazon.com/AWSECommerceService#ShoppingCart',
										data:{id: xml.getElementsByTagName("CartId")[0].firstChild.nodeValue,
											HMAC: xml.getElementsByTagName("URLEncodedHMAC")[0].firstChild.nodeValue}};
							ScreenflowEngineFactory.getInstance().manageFacts([cart],[]);
							alert ("Product added to the shopping Cart");
						}		
						else 
							alert ("Error adding the product to the cart");
					}
					
					Product.prototype.productAdded = function (transport){
						var xml = transport;
						//Check if the product is eligible for shopping
						if ((xml.getElementsByTagName("Error").length &gt; 0) &amp;&amp; 
							xml.getElementsByTagName("Error")[0].firstChild.firstChild.nodeValue == "AWS.ECommerceService.ItemNotEligibleForCart"){
							//The product is not elegible
							alert ("The product is not eligible to be added to the cart");
							return;
						}
						//If the product is added to the cart,
						//tell it to the user	
						if (xml.getElementsByTagName("IsValid")[0].firstChild.nodeValue == "True")
							alert ("Product added to the shopping Cart");
						else 
							alert ("Error adding the product to the cart");
					}		
					
					Product.prototype.isProductOnCart = function (transport){
						
						var xml = transport;
						var item = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#Item');
						var cart = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#ShoppingCart');
						var user = ScreenflowEngineFactory.getInstance().getFact('user');
						//products node
						if (xml.getElementsByTagName ("CartItems").length&gt;0){ //There are products on the cart
								var products = xml.getElementsByTagName ("CartItems")[0];
								//Product list (ASINs) added to the cart
								var asins = $A(products.getElementsByTagName ("ASIN"));
								//Check if the product is already added to the cart
								var found = false;
								//product Node
								var _product; 
								asins.each (function(asin){
									if (asin.firstChild.nodeValue == item.data.ASIN)
									{
										found = true; //The product is in the list
										_product = asin.parentNode; //product = CartItem
									}
								});
						}
						else {//If there aren't elements, the product will not be on the list
							found = false;
						}
						if (found) { 
							//If the product is already added to the cart,
							//increase the number of items of that product (CartModify)			
							//Get the item quantity
							var prevQuantity = _product.getElementsByTagName("Quantity")[0].firstChild.nodeValue;
							//Add the new quantity to the previously stored
							var quantity = parseInt($F("quantitySelect")) + parseInt (prevQuantity);
							
							//Get the product Id within the cart
							var productId = _product.getElementsByTagName("CartItemId")[0].firstChild.nodeValue;	
		
							//Create the call
							var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
							//Add the AccessKeyId (get from the user fact)
							/*if (user)
								url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
							else // if the KB doesn't contain a user key Id, add one by default
								url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
							//Add the operation Type
							url +="&amp;Operation=CartModify";
							//Add the current version of the API
							url += "&amp;Version=2008-06-26";
							//Add item ID
							url += "&amp;CartId=" + cart.data.id;
							url += "&amp;HMAC=" + cart.data.HMAC;
							url += "&amp;Item.1.CartItemId=" + productId;
							url += "&amp;Item.1.Quantity=" + quantity;
							
						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);
	
							//Invoke the service
                            new FastAPI.Request(url,{
                                'method':       'get',
                                'content':      'xml',
                                'context':      product,
                                'onSuccess':    product.productAdded
                            });
						}
						else {
		                    //Create the call
							var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
							//Add the AccessKeyId (get from the user fact)
							/*if (user)
								url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
							else // if the KB doesn't contain a user key Id, add one by default
								url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
							//Add the operation Type
							url +="&amp;Operation=CartAdd";
							//Add the current version of the API
							url += "&amp;Version=2008-06-26";
							//Add item ID
							url += "&amp;CartId=" + cart.data.id;
							url += "&amp;HMAC=" + cart.data.HMAC;
							url += "&amp;Item.1.ASIN=" + item.data.ASIN;
							url += "&amp;Item.1.Quantity=" + $F("quantitySelect");
							
						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);
	
							//Invoke the service
                            new FastAPI.Request(url,{
                                'method':       'get',
                                'content':      'xml',
                                'context':      product,
                                'onSuccess':    product.productAdded
                            });
						}
					}
					
					var product = new Product();
					ScreenflowEngineFactory.getInstance().addScreenLoader("4", product.init);
		        &lt;/script&gt;
		    &lt;/head&gt;
		    &lt;body&gt;
		        &lt;div id="bodyDivDetails"&gt;
		        	&lt;div id="leftColumn"&gt;
				     	&lt;div id="productImage"&gt;
						&lt;/div&gt;
						&lt;div id="cart"&gt;
							&lt;div id="quantity"&gt;Quantity:  	&lt;select id="quantitySelect"&gt;
										  	&lt;option value ="1"&gt;1&lt;/option&gt;
										  	&lt;option value ="2"&gt;2&lt;/option&gt;
										  	&lt;option value ="3"&gt;3&lt;/option&gt;
										  	&lt;option value ="4"&gt;4&lt;/option&gt;
										  	&lt;option value ="5"&gt;5&lt;/option&gt;	
										 	&lt;option value ="6"&gt;6&lt;/option&gt;
										  	&lt;option value ="7"&gt;7&lt;/option&gt;	
										  	&lt;option value ="8"&gt;8&lt;/option&gt;		
											&lt;option value ="9"&gt;9&lt;/option&gt;	
										  	&lt;option value ="10"&gt;10&lt;/option&gt;						
											&lt;/select&gt;
							&lt;/div&gt;
							&lt;input border="0" height="27" width="160" type="image" id="addToCart" alt="Add to Shopping Cart" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/addToCart.gif"/&gt;
						&lt;/div&gt;       	
					&lt;/div&gt;
					&lt;div id="rightColumn"&gt;
						&lt;div id="productTitle" style="font-size: 20px; padding: 2px; color:#F8A704; font-weight: bold; font-style: italic; font-family:Arial,Helvetica,sans-serif; overflow: hidden;"&gt;&lt;/div&gt;
						&lt;div id="infoArea"&gt;
							&lt;span id="titleInfo"&gt;
								&lt;div class="title"&gt;Product Type: &lt;/div&gt;
								&lt;div class="title"&gt;Price: &lt;/div&gt;
								&lt;div class="title"&gt;Product Site: &lt;/div&gt;
								&lt;div class="title" id="titleInfo1"&gt;&lt;/div&gt;
							&lt;/span&gt;
							&lt;span id="valueInfo"&gt;
								&lt;div id="pGroup" class="info"&gt;&lt;/div&gt;
								&lt;div id="price" class="info"&gt;&lt;/div&gt;
								&lt;div id="url" class="info"&gt;&lt;/div&gt;
								&lt;div id="info1" class="info"&gt;&lt;/div&gt;
							&lt;/span&gt;
							&lt;div id="moreInfo"&gt;
								&lt;div class="title" id="moreInfoTitle"&gt;&lt;/div&gt;
								&lt;div id="moreInfoText"&gt;
								&lt;/div&gt;
							&lt;/div&gt;
						&lt;/div&gt;
					&lt;/div&gt;
		        &lt;/div&gt;
		    &lt;/body&gt;
&lt;/html&gt;
</field>
    </object>
    <object pk="5" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">5</field>
        <field type="TextField" name="code">&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#bodyDiv{
				max-width: 550px;
			}
			#searchArea {
				border: 1px solid #F8A704;
				-moz-border-radius:13px 13px;
				background:#FFF8E8 url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td2.jpg) repeat-x;
				border:1px solid #F8A704;
				height:50px;
				margin:5px auto 0px;
				padding:0px;
				text-align:center;
				width:98%;
			}
			#contents{
				padding:12px;
			}
			#send{
				margin-left: 15px;
			}
			#amazonImage{
				position:absolute;
				right:2px;
				top:3px;
			}
			.title{
				padding: 2px;
				color:#AAAAAA;
				font-weight: bold;
				font-family:Arial,Helvetica,sans-serif;	
				white-space:nowrap;
				overflow: hidden;
			}

		&lt;/style&gt;
        &lt;script language="JavaScript"&gt;
        	function Search(){};
        	
        	Search.prototype.init = function (){
				//List of possible searches
				var searchIndices = ["All","Apparel","Automotive","Baby","Beauty","Blended",
									 "Books","Classical", "DigitalMusic","DVD","Electronics",
									 "GourmetFood","HealthPersonalCare","HomeGarden","Industrial",
									 "Jewelry","KindleStore","Kitchen","Magazines","Merchants",
									 "Miscellaneous","MP3Downloads","Music","MusicalInstruments",
									 "MusicTracks","OfficeProducts","OutdoorLiving","PCHardware",
									 "PetSupplies","Photo","SilverMerchants","Software","SportingGoods",
									 "Tools","Toys","UnboxVideo","VHS","Video","VideoGames","Watches",
									 "Wireless","WirelessAccessories"];
				$("send").observe("click", search.send);
				$("send").observe("mouseover",function(event){
						var e = Event.element(event);
						e.setStyle({cursor:"pointer"});
					});
				//Populate the product type select element
				search.populateOptions(searchIndices);
			}
			
			Search.prototype.populateOptions = function (_list){
				var templateString = "&lt;option value ='#{element}'&gt;#{caption}&lt;/option&gt;";
				var template = new Template(templateString);
				var optionHTML = "";
				$A(_list).each (function (element){
					optionHTML += template.evaluate({"element":element,"caption":search.separate(element)});
				});
				$("productType").update(optionHTML);
			}
			
			//This function returns a human readable element, 
			//separating words by white-spaces
			Search.prototype.separate = function (element){
				//Workaround for special cases
				//TODO: Create a generic solution, maybe another regexp?
				if (element=="DVD" || element=="VHS" || element=="MP3Downloads" || element=="PCHardware"){
					if (element=="MP3Downloads")
						return "MP3 Downloads";
					if (element=="PCHardware")
						return "PC Hardware";
					return element;
				}
				else{
					var result = element.replace(/([A-Z])/g, " $1");
					//Remove first white-space when necessary
					result = (result[0]==" "?result.substring(1,result.length):result);
					return result;
				}
			}
			
			Search.prototype.send = function (){
				if ($F("searchText").length==0){ //Empty keywords are forbidden
					alert ("You must introduce at least one keyword");
					return;
				}
				var filter = {uri: 'http://aws.amazon.com/AWSECommerceService#SearchCriteria', data:{productType: $F("productType"), searchText: $F("searchText")}};
				ScreenflowEngineFactory.getInstance().manageFacts([filter],[]);
			}
			
			var search = new Search();
			ScreenflowEngineFactory.getInstance().addScreenLoader("5", search.init);
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="bodyDiv"&gt;
        	&lt;span id="amazonImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.png" /&gt;&lt;/span&gt;
        	&lt;h1 id="title"&gt;Product Search&lt;/h1&gt;
			&lt;div id="searchArea"&gt;
				&lt;div id="contents"&gt;
					&lt;span class="title"&gt;Keywords: &lt;/span&gt; &lt;input type="text" id="searchText" /&gt;
					&lt;select id="productType"&gt;			
					&lt;/select&gt;
					&lt;input type="button" id="send" value="Search" /&gt;
				&lt;/div&gt;
			&lt;/div&gt;       
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</field>
    </object>
    <object pk="6" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">6</field>
        <field type="TextField" name="code">&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/table.css" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#loadingImgCart{
				margin:auto;	
			}
			#info{
				margin:auto;
				font-family:Arial,Helvetica,sans-serif;
				font-style:italic;
				padding-top: 10px;
				color: #AAA;
			}
			.productTitle{
				font-weight:bold;
				font-style:normal;
			}
			#buttonContainerDivCart{
				margin-top: 5px;
				display:none;
			}
			#amazonImage{
				position:absolute;
				right:0px;
				top:3px;
			}
		&lt;/style&gt;
		&lt;script language="JavaScript" src="http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"&gt;&lt;/script&gt;
		&lt;script language="JavaScript" src="http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"&gt;&lt;/script&gt;
        &lt;script language="JavaScript"&gt;
        		
        	function ShoppingCart(){
		    	//Product list fetched from the Service
		        this.productList = new Array();
				//Subtotal
				this.subTotal="";
				// number of items in the cart
				this.itemTotal = 0;
				//Purchase URL
				this.purchaseURL = "";
            	//Are we waiting for data?
            	this.waiting = true;
		    };
            
            ShoppingCart.prototype.init = function (){
                $("clearButton").observe("click", shoppingCart.clearCart);
                $("checkoutButton").observe("click", shoppingCart.checkout);
				$("updateButton").observe("click", shoppingCart.update);
				$$('input[type="button"]').each(function(element){
					element.observe("mouseover",function(event){
						var e = Event.element(event);
						e.setStyle({cursor:"pointer"});
					});
				
				});
				var tableBody = $("listBodyCart");
				tableBody.update("");
				if(!$("loadingImgCart")){
					$("info").update('&lt;img id="loadingImgCart" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif" /&gt;');

				}
				$("loadingImgCart").show();
				$("buttonContainerDivCart").hide();
				shoppingCart.waiting = true;
                shoppingCart.fetch();
            }
            
            ShoppingCart.prototype.clearCart = function (){
				//Ask the user to confirm the operation
				if (confirm("Are you sure you want to empty your Shopping Cart?")) {
					var cart = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#ShoppingCart');
					var user = ScreenflowEngineFactory.getInstance().getFact('user');
					
					//Create the call
					var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
					//Add the AccessKeyId (get from the user fact)
					/*if (user)
						url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
					else // if the KB doesn't contain a user key Id, add one by default
						url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
					//Add the operation Type
					url +="&amp;Operation=CartClear";
					//Add the current version of the API
					url += "&amp;Version=2008-06-26";
					//Add item ID
					url += "&amp;CartId=" + cart.data.id;
					url += "&amp;HMAC=" + cart.data.HMAC;
					
						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);

	
					//Invoke the service
           	        new FastAPI.Request(url,{
                        'method':       'get',
                        'content':      'xml',
                        'context':      shoppingCart,
                        'onSuccess':    shoppingCart.clear_ok
                    });
				}	
			}

            ShoppingCart.prototype.clear_ok = function (){
				ScreenflowEngineFactory.getInstance().manageFacts([],['http://aws.amazon.com/AWSECommerceService#PurchaseURL']);
				shoppingCart.fetch();
			}
			
			ShoppingCart.prototype.checkout = function (){
				var purchase = {uri:'http://aws.amazon.com/AWSECommerceService#PurchaseURL', data:{url: shoppingCart.purchaseURL}};
				ScreenflowEngineFactory.getInstance().manageFacts([purchase],[]);
			}
			
			ShoppingCart.prototype.update = function (){
				if (shoppingCart.productList.length &gt; 0) { //Only if there is something to update
					var cart = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#ShoppingCart');
					var user = ScreenflowEngineFactory.getInstance().getFact('user');
					//Create the call
					var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
					//Add the AccessKeyId (get from the user fact)
					/*if (user)
						url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
					else // if the KB doesn't contain a user key Id, add one by default
						url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
					//Add the operation Type
					url +="&amp;Operation=CartModify";
					//Add the current version of the API
					url += "&amp;Version=2008-06-26";
					//Add item ID
					url += "&amp;CartId=" + cart.data.id;
					url += "&amp;HMAC=" + cart.data.HMAC;
					//Build the parameter list
					for (var i=0; i &lt; shoppingCart.productList.length; i++){
						url += "&amp;Item." + (i+1) + ".CartItemId=" + shoppingCart.productList[i]["id"];
						url += "&amp;Item." + (i+1) + ".Quantity=" + $F(shoppingCart.productList[i]["id"]);
					}

						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);

	
					//Create the call
                    new FastAPI.Request(url,{
                        'method':       'get',
                        'content':      'xml',
                        'context':      shoppingCart,
                        'onSuccess':    shoppingCart.update_ok
                    });
				}
			}

			ShoppingCart.prototype.update_ok = function (){
				ScreenflowEngineFactory.getInstance().manageFacts([],['http://aws.amazon.com/AWSECommerceService#PurchaseURL']);
				shoppingCart.fetch();
			}
			
			//Change the current Item Fact
			ShoppingCart.prototype.productDetail = function (_ASIN,_title){
				var item = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#Item');
				item.data.ASIN = _ASIN;
				item.data.title = _title;
				ScreenflowEngineFactory.getInstance().manageFacts([item],['product']);
			}
			
			ShoppingCart.prototype.fetch = function (){
				//empty current data
				shoppingCart.productList = new Array();
				shoppingCart.subTotal = 0;
				shoppingCart.itemTotal = 0;  
				
                //Get the facts to invoke the service
                //TODO add error handling
                var cart = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#ShoppingCart');
                var user = ScreenflowEngineFactory.getInstance().getFact('user');
				
                //Invoke the service CartGet to retrieve the product list
                var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
				//Add the AccessKeyId (get from the user fact)
				/*if (user)
					url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
				else // if the KB doesn't contain a user key Id, add one by default
					url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
				//Add the operation Type
				url +="&amp;Operation=CartGet";
				//Add the current version of the API
				url += "&amp;Version=2008-06-26";
				//Add item ID
				url += "&amp;CartId=" + cart.data.id;
				url += "&amp;HMAC=" + cart.data.HMAC;
				
						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);

	
				//Create the call
                new FastAPI.Request(url,{
                    'method':       'get',
                    'content':      'xml',
                    'context':      shoppingCart,
                    'onSuccess':    shoppingCart.addToList
                });
            }
            
            ShoppingCart.prototype.addToList = function (transport){
                var xml = transport;
                //Check if the service returned an error
                if (xml.getElementsByTagName("IsValid")[0].childNodes[0].nodeValue == "False") {
                    alert(xml.getElementsByTagName("Message")[0].childNodes[0].nodeValue);
                }
                else { //Correct response, create the result List
                	if (xml.getElementsByTagName("CartItems").length &gt; 0) { //There are products in the cart
						var list = xml.getElementsByTagName("CartItems")[0].getElementsByTagName("CartItem");
						//Fill the table, 1 row per item
						$A(list).each(function(item){
							if (item.getElementsByTagName("Title").length &gt; 0) 
								var title = item.getElementsByTagName("Title")[0].firstChild.nodeValue;
							if (item.getElementsByTagName("ASIN").length &gt; 0) 
								var ASIN = item.getElementsByTagName("ASIN")[0].firstChild.nodeValue;
							if (item.getElementsByTagName("CartItemId").length &gt; 0) 
								var ID = item.getElementsByTagName("CartItemId")[0].firstChild.nodeValue;
							if (item.getElementsByTagName("Price").length &gt; 0) 
								var price = item.getElementsByTagName("Price")[0].getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;
							if (item.getElementsByTagName("Quantity").length &gt; 0) 
								var quantity = item.getElementsByTagName("Quantity")[0].firstChild.nodeValue;
							var row = {
								title: title,
								price: price,
								ASIN: ASIN,
								id: ID,
								quantity: quantity
							};
							shoppingCart.itemTotal += parseInt (quantity);
							shoppingCart.productList.push(row);
						});
					}
					if (xml.getElementsByTagName("SubTotal").length&gt;0)
						shoppingCart.subTotal = xml.getElementsByTagName("SubTotal")[0].getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;
					else
						shoppingCart.subTotal = "$0.0";
					if (xml.getElementsByTagName("PurchaseURL").length&gt;0)
						shoppingCart.purchaseURL = xml.getElementsByTagName("PurchaseURL")[0].firstChild.nodeValue;
                    if (shoppingCart.waiting) {
                        shoppingCart.waiting = false;
                    }
					shoppingCart.showTable();
                }
            }
            
            ShoppingCart.prototype.onError = function (transport){
                //alert(transport.responseText);
            }
            
            ShoppingCart.prototype.showProgress = function (){
                shoppingCart.waiting = true;
                $("loadingImgCart").show();
            }
            
            ShoppingCart.prototype.showTable = function (){
                if($("loadingImgCart")){
                	$("loadingImgCart").hide();
				}
				var tableBody = $("listBodyCart");
				tableBody.update("");
				if (shoppingCart.productList.length == 0) {//Empty shopping cart
					$("info").update("Your Shopping Cart is empty");
					$("buttonContainerDivCart").hide();
					ScreenflowEngineFactory.getInstance().manageFacts([],['?Purchase http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://aws.amazon.com/AWSECommerceService#PurchaseURL']);	
					return;
				}else{
					$("info").update("");
				}
				$("buttonContainerDivCart").setStyle({display:"inline"});
                var templateString = '&lt;tr&gt;&lt;td&gt;&lt;a onclick="shoppingCart.productDetail(\'#{ASIN}\',\'#{title}\');"&gt;#{title}&lt;/a&gt;&lt;/td&gt;';
				templateString += '&lt;td&gt;#{price}&lt;/td&gt;';
				templateString += '&lt;td&gt;&lt;input type="text" maxlength="3" size="2" id="#{id}"';
				templateString += 'value="#{quantity}"/&gt;&lt;/td&gt;&lt;/tr&gt;';
                var rowTemplate = new Template(templateString);
                
                
                for (var i = 0; i &lt; shoppingCart.productList.length; i++) {
                    if (shoppingCart.productList[i]) { //only if the product table is fetched
                        tableBody.innerHTML += rowTemplate.evaluate(shoppingCart.productList[i]);
                    }
                }
				//Last row, including subtotal
				var lastRow = "&lt;tr&gt;&lt;th style='text-align:right'&gt;Subtotal&lt;/th&gt;&lt;th&gt;";
				lastRow += shoppingCart.subTotal;
				lastRow += "&lt;/th&gt;&lt;th&gt;";
				lastRow += shoppingCart.itemTotal;
				lastRow += "&lt;/th&gt;&lt;/tr&gt;";
				tableBody.innerHTML += lastRow;
            }
            
            var shoppingCart = new ShoppingCart();
			ScreenflowEngineFactory.getInstance().addScreenLoader("6", shoppingCart.init);
					
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="bodyDiv"&gt;
        	&lt;span id="amazonImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.png" /&gt;&lt;/span&gt;
            &lt;h1 id="title"&gt;Shopping Cart&lt;/h1&gt;
            &lt;div id="listDivCart"&gt;
                &lt;table&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th style="width:70%;-moz-border-radius: 13px 0px 0px 0px;"&gt;
                                Shopping Cart Items
                            &lt;/th&gt;
                            &lt;th style="width:10%"&gt;
                                Price
                            &lt;/th&gt;
                            &lt;th style="width:10%;-moz-border-radius: 0px 13px 0px 0px;"&gt;
                                Quantity
                            &lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody id="listBodyCart"&gt;
                    	&lt;tr&gt;
							&lt;td&gt;&amp;nbsp;&lt;/td&gt;
					    &lt;/tr&gt;
						&lt;tr&gt;
							&lt;td&gt;&amp;nbsp;&lt;/td&gt;
					    &lt;/tr&gt;
						&lt;tr&gt;
							&lt;td&gt;&amp;nbsp;&lt;/td&gt;
					    &lt;/tr&gt;
						&lt;tr&gt;
							&lt;td&gt;&amp;nbsp;&lt;/td&gt;
					    &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
               &lt;div id="info"&gt;&lt;img id="loadingImgCart" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif" /&gt;&lt;/div&gt;		
                &lt;div id="buttonContainerDivCart"&gt;
                    &lt;input type="button" id="clearButton" class="button" value="Clear Cart"/&gt;
					&lt;input type="button" id="updateButton" class="button" value="Update Cart"/&gt;
					&lt;input type="button" id="checkoutButton" class="button" value="Proceed to Checkout"/&gt;
                &lt;/div&gt;
				
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;

</field>
    </object>
    <object pk="7" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">7</field>
        <field type="TextField" name="code">&lt;html&gt;
	&lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"&gt;
		&lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/table.css" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#pagesSuggestion{
				color:#FEBF43;
				font-weight: bold;
				padding: 10px;
			}
			#previousButtonSuggestion, #nextButtonSuggestion {
				visibility:hidden;
			}
			#loadingImgSuggestion{
				margin:auto;
				padding-top: 10px;
			}
			#like{
				padding: 5px;
				color: #777777;
			}
			.productTitle{
				font-weight:bold;
				font-style:normal;
			}
			#amazonImage{
				position:absolute;
				right:0px;
				top:3px;
			}
		&lt;/style&gt;
		&lt;script language="JavaScript" src="http://demo.fast.morfeo-project.org/gvsdata/amazonURL/signAmazonURLs.js"&gt;&lt;/script&gt;
		&lt;script language="JavaScript" src="http://demo.fast.morfeo-project.org/gvsdata/amazonURL/jssha2/sha2.js"&gt;&lt;/script&gt;
        &lt;script language="JavaScript"&gt;
        
        	function SuggestionList(){
	            //Next set of products to print in the table (0-9)
	            this.currentPage = 0;
	            //Product list fetched from the Service
	            this.productList = new Array();
	            //Are we waiting for data?
	            this.waiting = true;
            };
            
            SuggestionList.prototype.init = function (){
                $("nextButtonSuggestion").observe("click", suggestionList.nextPage);
                $("previousButtonSuggestion").observe("click", suggestionList.previousPage);
				$$('input[type="button"]').each(function(element){
					element.observe("mouseover",function(event){
						var e = Event.element(event);
						e.setStyle({cursor:"pointer"});
					});
				
				});
				var item = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#Item');
				$$(".productTitle").each(function(element){
					element.update(item.data.title);
				});
				var tableBody = $("listBodySuggestion");
                tableBody.update("");
                suggestionList.currentPage = 0;
	            suggestionList.productList = new Array();
	            suggestionList.waiting = true;
	            suggestionList.showProgress();
                suggestionList.fetch();
            }
            
            SuggestionList.prototype.fetch = function (){
            
            	//Get the facts to invoke the service
                var item = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#Item');
                var user = ScreenflowEngineFactory.getInstance().getFact('user');
                //Add the ItemSearch parameters
                var parameters = "";
				parameters += "&amp;ItemId=" + item.data.ASIN;
                
                //Base URL of the REST Service
				var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
				//Add the AccessKeyId (get from the user fact)
				/*if (user)
					url += "&amp;AWSAccessKeyId=" + user.data.KeyId;
				else // if the KB doesn't contain a user key Id, add one by default
					url += "&amp;AWSAccessKeyId=15TNKDQJGH6BD0Z4KY02";*/
				//Add the operation Type
				url +="&amp;Operation=SimilarityLookup";
				//Add the parameters
				url += parameters;
				//Add the responseGroup
				url +="&amp;ResponseGroup=Medium";
				//Add the current version of the API
				url += "&amp;Version=2008-06-26";

						var encoder = new URLAmazonEncoder();
						url = encoder.encode(url);
	
				//Invoke the service
                new FastAPI.Request(url,{
                    'method':       'get',
                    'content':      'xml',
                    'context':      suggestionList,
                    'onSuccess':    suggestionList.addToList
                });
            }
            
            SuggestionList.prototype.addToList = function (transport){
                var xml = transport;
                //Check if the service returned an error
                if (xml.getElementsByTagName("IsValid")[0].childNodes[0].nodeValue == "False") {
                    alert(xml.getElementsByTagName("Message")[0].childNodes[0].nodeValue);
                }
                else { //Correct response, create the result List
                    var suggestionlist = xml.getElementsByTagName("Items")[0].getElementsByTagName("Item");
                    //Fill the table, 1 row per item
                    $A(suggestionlist).each(function(item){
                        if (item.getElementsByTagName("Title").length &gt; 0) 
                            var title = item.getElementsByTagName("Title")[0].firstChild.nodeValue;
			else
			    var title = "&amp;nbsp;";
                        if (item.getElementsByTagName("FormattedPrice").length &gt; 0) 
                            var price = item.getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;
			else
			    var price = "&amp;nbsp;";
                        if (item.getElementsByTagName("ProductGroup").length &gt; 0) 
                            var pGroup = item.getElementsByTagName("ProductGroup")[0].firstChild.nodeValue;
			else
			    var pGroup = "&amp;nbsp;";
                        if (item.getElementsByTagName("ASIN").length &gt; 0) 
                            var ASIN = item.getElementsByTagName("ASIN")[0].firstChild.nodeValue;
                        var row = {
                            title: title,
                            price: price,
                            pGroup: pGroup,
                            ASIN: ASIN
                        };
                        suggestionList.productList.push(row);
                    });
                    if (suggestionList.waiting) {
                        suggestionList.waiting = false;
                        suggestionList.showTable();
                    }
                }
            }
            
            
            SuggestionList.prototype.productDetail = function (nodeElement,_ASIN){
				list.clearSelected ();
				//select the element
				nodeElement.parentNode.parentNode.setStyle({background: "#FFF8E8"});
				var item = {uri: 'http://aws.amazon.com/AWSECommerceService#Item', data:{ASIN: _ASIN, title: nodeElement.parentNode.parentNode.firstChild.firstChild.nodeValue}};
				ScreenflowEngineFactory.getInstance().manageFacts([item],['product']);
			}
			
			SuggestionList.prototype.clearSelected = function (){
				$$("tbody tr").each(function (element){
					element.setStyle ({background: "transparent url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td1.jpg) repeat-x top"});
				});
			}
			
			SuggestionList.prototype.onError = function (transport){
                //alert(transport.responseText);
            }
            
            SuggestionList.prototype.showProgress = function (){
                suggestionList.waiting = true;
                $("loadingImgSuggestion").show();
            }
            
            SuggestionList.prototype.showTable = function (){
            	if($("loadingImgSuggestion")){
                	$("loadingImgSuggestion").hide();
                }
                var templateString = '&lt;tr&gt;&lt;td&gt;#{title}&lt;/td&gt;&lt;td&gt;#{price}&lt;/td&gt;&lt;td&gt;#{pGroup}&lt;/td&gt;';
                templateString += '&lt;td style="border-right:none;"&gt;&lt;input type="button" onclick="suggestionList.productDetail(this,\'#{ASIN}\');"';
				templateString += ' onmouseover="this.setStyle({cursor:\'pointer\'});" value="Select"/&gt;&lt;/td&gt;&lt;/tr&gt;';
                var rowTemplate = new Template(templateString);
                
                var tableBody = $("listBodySuggestion");
                for (var i = 5 * suggestionList.currentPage; i &lt; 5 * (suggestionList.currentPage + 1); i++) { //print the appropriate elements
                    if (suggestionList.productList[i]) { //only if the product table is fetched
                        tableBody.innerHTML += rowTemplate.evaluate(suggestionList.productList[i]);
                    }
                }
                //Update Interface
                if (suggestionList.currentPage &lt; 1) {
                    $("nextButtonSuggestion").setStyle({
                        visibility: "visible"
                    });
                }
                else {
                    $("nextButtonSuggestion").setStyle({
                        visibility: "hidden"
                    });
                }
                if (suggestionList.currentPage &gt; 0) {
                    $("previousButtonSuggestion").setStyle({
                        visibility: "visible"
                    });
                }
                else {
                    $("previousButtonSuggestion").setStyle({
                        visibility: "hidden"
                    });
                }
            }
            
            SuggestionList.prototype.nextPage = function (){
                //Clear the table
                var tableBody = $("listBodySuggestion");
                tableBody.update("");
                suggestionList.currentPage++;
                suggestionList.showTable();
				//update the current page in the interface
				 $("curPageSuggestion").update(suggestionList.currentPage+1);
            }
            
            SuggestionList.prototype.previousPage = function (){
                //Clear the table
                var tableBody = $("listBodySuggestion");
                tableBody.update("");
                suggestionList.currentPage--;
                suggestionList.showTable();
				//update the current page in the interface;
				$("curPageSuggestion").update(suggestionList.currentPage+1);
            }
            
            var suggestionList = new SuggestionList();
			ScreenflowEngineFactory.getInstance().addScreenLoader("7", suggestionList.init);
			
        &lt;/script&gt;&lt;/head&gt;&lt;body&gt;
        &lt;div id="bodyDiv"&gt;
        	&lt;span id="amazonImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.png" /&gt;&lt;/span&gt;
            &lt;h1 id="title"&gt;Related products to&lt;/h1&gt;
			&lt;h1 id="title"&gt;&lt;span class="productTitle"&gt;&lt;/span&gt;&lt;/h1&gt;
			&lt;div id="like"&gt;Customers who bought &lt;span class="productTitle"&gt;&lt;/span&gt;, also bought ...&lt;/div&gt;
            &lt;div id="listDiv"&gt;
                &lt;table&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th style="width: 60%; -moz-border-radius-topleft: 13px; -moz-border-radius-topright: 0px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;
                                Title
                            &lt;/th&gt;
                            &lt;th style="width: 10%;"&gt;
                                Price
                            &lt;/th&gt;
                            &lt;th style="width: 20%;"&gt;
                                Product Group
                            &lt;/th&gt;
                            &lt;th style="width: 10%; -moz-border-radius-topleft: 0px; -moz-border-radius-topright: 13px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;
                                &amp;nbsp;
                            &lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody id="listBodySuggestion"&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
		    &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;img style="display: none;" id="loadingImgSuggestion" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif"&gt;
                &lt;div id="buttonContainerDiv"&gt;
                    &lt;input style="visibility: hidden;" id="previousButtonSuggestion" class="button" value="&amp;lt;" type="button"&gt;
					&lt;span id="pagesSuggestion"&gt;
					Page &lt;span id="curPageSuggestion"&gt;1&lt;/span&gt;/2
					&lt;/span&gt;&lt;input style="visibility: visible;" id="nextButtonSuggestion" class="button" value="&amp;gt;" type="button"&gt;
                &lt;/div&gt;
				
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</field>
    </object>
    <object pk="8" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">8</field>
        <field type="TextField" name="code">&lt;html&gt;
	&lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"&gt;
		&lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/table.css" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#loadingImgEBayList{
				margin:auto;
				padding-top: 10px;
			}
			#like{
				padding: 5px;
				color: #777777;
			}
			.productTitle{
				font-weight:bold;
				font-style:normal;
			}
			#eBayImage{
				position:absolute;
				right:0px;
				top:3px;
			}
		&lt;/style&gt;
        &lt;script language="JavaScript"&gt;
        
        	function EBayList(){
	            //Product list fetched from the Service
	            this.productList = new Array();
	            //Are we waiting for data?
	            this.waiting = true;
            };
            
            EBayList.prototype.init = function (){
                $$('input[type="button"]').each(function(element){
					element.observe("mouseover",function(event){
						var e = Event.element(event);
						e.setStyle({cursor:"pointer"});
					});
				
				});
				var tableBody = $("listBodyEBayList");
                tableBody.update("");
	            eBayList.productList = new Array();
	            eBayList.waiting = true;
	            eBayList.showProgress();
                eBayList.fetch();
            }
            
            EBayList.prototype.fetch = function (){
            
            	//Get the facts to invoke the service
                var item = ScreenflowEngineFactory.getInstance().getFact('http://aws.amazon.com/AWSECommerceService#Item');
                
                //URL of the Service
				var url = "http://open.api.ebay.com/shopping?";
				url += "&amp;callname=FindItems";
				url += "&amp;ItemSort=BestMatch";
				url += "&amp;version=515";
				url += "&amp;responseencoding=XML";
				url += "&amp;appid=eBayAPID-73f4-45f2-b9a3-c8f6388b38d8";
				url += "&amp;callback=true";
				url += "&amp;QueryKeywords=" +  encodeURIComponent(item.data.title);

				//Invoke the service
                new FastAPI.Request(url,{
                    'method':       'get',
                    'content':      'xml',
                    'context':      eBayList,
                    'onSuccess':    eBayList.addToList
                });
            }
            
            EBayList.prototype.addToList = function (transport){
            	var xml = transport;
                var items = xml.getElementsByTagName("Item");
                //Fill the table, 1 row per item
                $A(items).each(function(item){
                     if (item.getElementsByTagName("ItemID").length &gt; 0) 
                         var itemID = item.getElementsByTagName("ItemID")[0].firstChild.nodeValue;
					 else
    					var itemID = "&amp;nbsp;";
    				 if (item.getElementsByTagName("Title").length &gt; 0) 
                         var title = item.getElementsByTagName("Title")[0].firstChild.nodeValue;
					 else
    					var title = "&amp;nbsp;";
    				 if (item.getElementsByTagName("PrimaryCategoryName").length &gt; 0) 
                         var category = item.getElementsByTagName("PrimaryCategoryName")[0].firstChild.nodeValue;
					 else
    					var category = "&amp;nbsp;";
    				 if (item.getElementsByTagName("ConvertedCurrentPrice").length &gt; 0) 
                         var currentPrice = '$' + item.getElementsByTagName("ConvertedCurrentPrice")[0].firstChild.nodeValue;
					 else
    					var currentPrice = "&amp;nbsp;";
    				 if (item.getElementsByTagName("ShippingServiceCost").length &gt; 0) 
                         var shippingServiceCost = '$' + item.getElementsByTagName("ShippingServiceCost")[0].firstChild.nodeValue;
					 else
    					var shippingServiceCost = "&amp;nbsp;";
    				 if (item.getElementsByTagName("GalleryURL").length &gt; 0) 
                         var image = item.getElementsByTagName("GalleryURL")[0].firstChild.nodeValue;
                     else
                     	var image = "";
                     var row = {
                     	 itemID: itemID,
                         title:  title.replace(/\x27/g,"`"),
                         category: category,
                         currentPrice: currentPrice,
                         shippingServiceCost: shippingServiceCost,
                         image: image
                     };
                     eBayList.productList.push(row);
                 });
                 if (eBayList.waiting) {
                     eBayList.waiting = false;
                     eBayList.showTable();
                 }
            }
            
            
            EBayList.prototype.productDetail = function (nodeElement, itemID, title){
				eBayList.clearSelected ();
				//select the element
				nodeElement.parentNode.parentNode.setStyle({background: "#FFF8E8"});
				var ebayItem = {uri: 'http://developer.ebay.com/DevZone/shopping/docs/CallRef/FindItemsAdvanced.html#Request', data:{itemID: itemID, title: title}};
				ScreenflowEngineFactory.getInstance().manageFacts([ebayItem],[]);
			}
			
			EBayList.prototype.clearSelected = function (){
				$$("tbody tr").each(function (element){
					element.setStyle ({background: "transparent url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td1.jpg) repeat-x top"});
				});
			}
			
			EBayList.prototype.onError = function (transport){
                //alert(transport.responseText);
            }
            
            EBayList.prototype.showProgress = function (){
                eBayList.waiting = true;
                $("loadingImgEBayList").show();
            }
            
            EBayList.prototype.showTable = function (){
            	if($("loadingImgEBayList")){
                	$("loadingImgEBayList").hide();
                }
                var templateString = '&lt;tr&gt;';
                templateString += '&lt;td&gt;&lt;img src="#{image}"/&gt;&lt;/td&gt;';
                templateString += '&lt;td&gt;#{title}&lt;/td&gt;&lt;td&gt;#{category}&lt;/td&gt;&lt;td&gt;#{currentPrice}&lt;/td&gt;&lt;td&gt;#{shippingServiceCost}&lt;/td&gt;';
                templateString += '&lt;td style="border-right:none;"&gt;&lt;input type="button" onclick="eBayList.productDetail(this,\'#{itemID}\',\'#{title}\');"';
				templateString += ' onmouseover="this.setStyle({cursor:\'pointer\'});" value="Select"/&gt;&lt;/td&gt;&lt;/tr&gt;';
                var rowTemplate = new Template(templateString);
                
                var tableBody = $("listBodyEBayList");
                for (var i = 0; i &lt; eBayList.productList.length; i++) { //print the appropriate elements
                    if (eBayList.productList[i]) { //only if the product table is fetched
                        tableBody.innerHTML += rowTemplate.evaluate(eBayList.productList[i]);
                    }
                }
            }
            
            var eBayList = new EBayList();
			ScreenflowEngineFactory.getInstance().addScreenLoader("8", eBayList.init);
			
        &lt;/script&gt;&lt;/head&gt;&lt;body&gt;
        &lt;div id="bodyDiv"&gt;
        	&lt;span id="eBayImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/logo-ebay.gif" /&gt;&lt;/span&gt;
		    &lt;h1 id="title"&gt;eBay Item list&lt;/h1&gt;
		    &lt;div id="listDiv"&gt;
                &lt;table&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                        	&lt;th style="width: 10%; -moz-border-radius-topleft: 13px; -moz-border-radius-topright: 0px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;
                                &amp;nbsp;
                            &lt;/th&gt;
                            &lt;th style="width: 60%;" nowrap="nowrap"&gt;
                                Title
                            &lt;/th&gt;
                            &lt;th style="width: 10%;" nowrap="nowrap"&gt;
                                Category
                            &lt;/th&gt;
                            &lt;th style="width: 10%;" nowrap="nowrap"&gt;
                                Current Price
                            &lt;/th&gt;
                            &lt;th style="width: 20%;" nowrap="nowrap"&gt;
                                Shipping Service Cost
                            &lt;/th&gt;
                            &lt;th style="width: 10%; -moz-border-radius-topleft: 0px; -moz-border-radius-topright: 13px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;
                                &amp;nbsp;
                            &lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody id="listBodyEBayList"&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
	                            &lt;tr&gt;
					&lt;td&gt;&amp;nbsp;&lt;/td&gt;
				    &lt;/tr&gt;
		    &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;img style="display: none;" id="loadingImgEBayList" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</field>
    </object>
    <object pk="9" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">9</field>
        <field type="TextField" name="code">&lt;html&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type"
		    content="application/xhtml+xml; charset=UTF-8" /&gt;
		&lt;link type="text/css" rel="stylesheet"
		    href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/table.css" /&gt;
		&lt;link type="text/css" rel="stylesheet"
		    href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#pages {
			    color: #FEBF43;
			    font-weight: bold;
			    padding: 10px;
			}
			
			#previousButton,#nextButton {
			    visibility: hidden;
			}
			
			#loadingImg {
			    margin: auto;
			    padding-top: 10px;
			}
			
			#amazonImage {
			    position: absolute;
			    right: 0px;
			    top: 3px;
			}
		&lt;/style&gt;
		
		&lt;script language="JavaScript"&gt;

			var {{buildingblockId}} = Class.create(BuildingBlock,{

				init: function (){
					$("nextButton").onclick = this.nextPage.bind(this);
			        $("previousButton").onclick = this.previousPage.bind(this);
			        $$('input[type="button"]').each(function(element){
			            element.onmouseover = function(event){
				            var e = Event.element(event);
			                e.setStyle({cursor:"pointer"});
			            };		
			        });
			
			        var tableBody = $("listBody");
			        tableBody.update("");
			        this.showProgress();
			    },
	
				productDetail: function (nodeElement,_ASIN){
					this.clearSelected ();
			        //select the element
			        nodeElement.parentNode.parentNode.setStyle({background: "#FFF8E8"});
			        var item = {id: 'item', data:{ASIN: _ASIN, title: nodeElement.parentNode.parentNode.firstChild.firstChild.nodeValue}};
			        this.manageData(null, [item], []);
			    },
			    
			    clearSelected: function (){
			        $$("tbody tr").each(function (element){
			            element.setStyle({background: "transparent url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td1.jpg) repeat-x top"});
			        });
			    },
	
			    showProgress: function (){
			        $("loadingImg").show();
			    },
			    
			    showTable: function (l){
			    	$("loadingImg").hide();
			    	var templateString = '&lt;tr&gt;&lt;td&gt;#{title}&lt;/td&gt;&lt;td&gt;#{price}&lt;/td&gt;&lt;td&gt;#{pGroup}&lt;/td&gt;';
			        templateString += '&lt;td style="border-right:none;"&gt;&lt;input type="button" onclick="ScreenEngineFactory.getInstance(\'{{screenId}}\').getBuildingBlock(\'{{buildingblockInstance}}\').productDetail(this,\'#{ASIN}\');"';
			        templateString += ' onmouseover="this.setStyle({cursor:\'pointer\'});" value="Select"/&gt;&lt;/td&gt;&lt;/tr&gt;';
			        var rowTemplate = new Template(templateString);
			        var tableBody = $("listBody");
			        tableBody.update("");
			        for (var i = 0; i &lt; l.data.productList.length; i++) { //print the appropriate elements
			            if (l.data.productList[i]) { //only if the product table is fetched
			                tableBody.innerHTML += rowTemplate.evaluate(l.data.productList[i]);
			            }
			        }
			        //Update Interface
			        if (l.data.currentPage &lt; l.data.totalPages - 1) {
			            $("nextButton").setStyle({visibility: "visible"});
			        } else {
			            $("nextButton").setStyle({visibility: "hidden"});
			        }
			        if (l.data.currentPage &gt; 1) {
			            $("previousButton").setStyle({visibility: "visible"});
			        } else {
			            $("previousButton").setStyle({visibility: "hidden"});
			        }
	
			        $("CP").value = l.data.currentPage;
			        $("TP").value = l.data.totalPages;
			        $("ST").value = l.data.searchText;
			        $("PT").value = l.data.productType;
			        if(l.data.totalPages&gt;0){
				        $("curPage").innerHTML = l.data.currentPage;
				        $("totalPages").update(l.data.totalPages);
			        } else {
			        	$("curPage").innerHTML = "-";
				        $("totalPages").update("-");
				    }
			    },
			    
			    nextPage: function (){
			    	var tableBody = $("listBody");
			        tableBody.update("");
			        this.showProgress();
			        var filter = {id: "filter", data: {productType: $F("PT"), searchText: $F("ST"), currentPage:(parseInt($F("CP"))+1) }};
			        this.manageData(["newFilter"], [filter], []);
			    },
			    
			    previousPage: function (){
			    	var tableBody = $("listBody");
			        tableBody.update("");
			        this.showProgress();
			        var filter = {id: "filter", data: {productType: $F("PT"), searchText: $F("ST"), currentPage:(parseInt($F("CP"))-1) }};
			        this.manageData(["newFilter"], [filter], []);
			    },
	
			    showMessage: function (message){
			    	$("loadingImg").hide();
					alert(message.data.message);
				}
			});
		&lt;/script&gt;
	&lt;/head&gt;
	
	&lt;body&gt;
		&lt;div id="bodyDiv"&gt;
			&lt;input type="hidden" id="CP" /&gt;
			&lt;input type="hidden" id="TP" /&gt;
			&lt;input type="hidden" id="ST" /&gt;
			&lt;input type="hidden" id="PT" /&gt;
		    &lt;span id="amazonImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.png" /&gt;&lt;/span&gt;
			&lt;h1 id="title"&gt;Item list&lt;/h1&gt;
			&lt;div id="listDiv"&gt;
				&lt;table&gt;
				    &lt;thead&gt;
				        &lt;tr&gt;
				            &lt;th style="width: 60%; -moz-border-radius: 13px 0px 0px 0px;"&gt;Title&lt;/th&gt;
				            &lt;th style="width: 10%"&gt;Price&lt;/th&gt;
				            &lt;th style="width: 20%"&gt;Product Group&lt;/th&gt;
				            &lt;th style="width: 10%; -moz-border-radius: 0px 13px 0px 0px;"&gt;&amp;nbsp;&lt;/th&gt;
				        &lt;/tr&gt;
				    &lt;/thead&gt;
				    &lt;tbody id="listBody"&gt;
				        &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
				        &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
				        &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
				        &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
				    &lt;/tbody&gt;
				&lt;/table&gt;
				&lt;img id="loadingImg" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif" /&gt;
				&lt;div id="buttonContainerDiv"&gt;
				    &lt;input type="button" id="previousButton" class="button" value="&lt;" /&gt;
				    &lt;span id="pages"&gt; Page &lt;span id="curPage"&gt;-&lt;/span&gt;/&lt;span id="totalPages"&gt;-&lt;/span&gt;&lt;/span&gt;
				    &lt;input type="button" id="nextButton" class="button" value="&gt;" /&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/body&gt;
&lt;/html&gt;</field>
    </object>
    <object pk="10" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">10</field>
        <field type="TextField" name="code">&lt;html&gt;
    &lt;head&gt;
        &lt;script language="JavaScript"&gt;
        var {{buildingblockId}} = Class.create(BuildingBlock,{
        	init: function (purchase){
        		var obj = new Element ('object',{type: "text/html", data: purchase.data.url, standby: "Loading...", width: "100%",  height: "100%"});
				$("bodyDivOrder").update(obj);
			}
        });
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="bodyDivOrder"&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</field>
    </object>
    <object pk="11" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">11</field>
        <field type="TextField" name="code">&lt;html&gt;
	&lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"&gt;
		&lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/table.css" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#pagesComparative{
				color:#FEBF43;
				font-weight: bold;
				padding: 10px;
			}
			#previousButtonComparative, #nextButtonComparative {
				visibility:hidden;
			}
			#loadingImgComparative{
				margin:auto;
				padding-top: 10px;
			}
			#like{
				padding: 5px;
				color: #777777;
			}
			.productTitle{
				font-weight:bold;
				font-style:normal;
			}
			#listDiv tbody td {
				text-align: justify;
			}
			.tiny{
				font-size:10px;
			}
			#amazonImage{
				position:absolute;
				right:0px;
				top:3px;
			}
		&lt;/style&gt;
        &lt;script language="JavaScript"&gt;

        var {{buildingblockId}} = Class.create(BuildingBlock,{

			init: function (item){
	        	$("nextButtonComparative").onclick = this.nextPage.bind(this);
	            $("previousButtonComparative").onclick = this.previousPage.bind(this);
				$$('input[type="button"]').each(function(element){
					element.onmouseover =  function(event){
						var e = Event.element(event);
						e.setStyle({cursor:"pointer"});
					};
				});
				var tableBody = $("listBodyComparative");
	            tableBody.update("");
	            $$(".productTitle").each(function(element){
					element.update(item.data.title);
				});
	            this.showProgress();
            },

			showProgress: function (){
                $("loadingImgComparative").show();
            },
            
			showTable: function (l){
            	this.list = l;
				
            	if ($("loadingImgComparative")) {
                	$("loadingImgComparative").hide();
                }

                var tableBody = $("listBodyComparative");
                tableBody.update("");
                
                var templateString = '&lt;tr&gt;&lt;td&gt;&lt;span class="info"&gt;#{price}&lt;/span&gt; &lt;br /&gt;&lt;span class="tiny"&gt;You save #{amountSaved} (#{percentageSaved}%)&lt;/span&gt;&lt;/td&gt;';
				templateString += '&lt;td&gt;#{condition} #{conditionNote} &lt;/td&gt;'; 
			    templateString += '&lt;td&gt;&lt;a target="_blank" href="http://www.amazon.com/gp/help/seller/at-a-glance.html?seller=#{sellerId}"&gt;';
				templateString += '#{sellerName}&lt;/a&gt;&lt;br /&gt;&lt;span class="info"&gt;Rating:&lt;/span&gt; #{averageRating} of #{totalFeedback} user reviews';
				templateString += '&lt;br /&gt;&lt;span class="info"&gt;Availability:&lt;/span&gt; #{availability}&lt;/td&gt;';
				templateString += '&lt;td&gt;&lt;input width="112" type="image" height="21" border="0" align="absmiddle"';
				templateString += 'alt="Add to cart" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/addToCart-small.gif"';
				templateString += 'onclick="ScreenEngineFactory.getInstance(\'{{screenId}}\').getBuildingBlock(\'{{buildingblockInstance}}\').add(\'#{offerId}\'); /&gt;&lt;/td&gt;&lt;/tr&gt;';
                var rowTemplate = new Template(templateString);
                
                var tableBody = $("listBodyComparative");
                for (var i = 5 * l.data.currentPage; i &lt; 5 * (l.data.currentPage + 1); i++) { //print the appropriate elements
                    if (l.data.productList[i]) { //only if the product table is fetched
                        tableBody.innerHTML += rowTemplate.evaluate(l.data.productList[i]);
                    }
                }
                //Update Interface
                if (l.data.currentPage &lt; 1 &amp;&amp; (5*(l.data.currentPage + 1)&lt; l.data.productList.length)) {
                    $("nextButtonComparative").setStyle({
                        visibility: "visible"
                    });
                } else {
                    $("nextButtonComparative").setStyle({
                        visibility: "hidden"
                    });
                }
                if (l.data.currentPage &gt; 0) {
                    $("previousButtonComparative").setStyle({
                        visibility: "visible"
                    });
                } else {
                    $("previousButtonComparative").setStyle({
                        visibility: "hidden"
                    });
                }

                if(l.data.productList.length&gt;0) {
                	$("curPageComparative").update(l.data.currentPage+1);
                	$("totalPagesComparative").update(Math.ceil(l.data.productList.length/5));
                } else {
                	$("curPageComparative").update("-");
                	$("totalPagesComparative").update("-");
                }
            },
            
			nextPage: function (){
            	var tableBody = $("listBodyComparative");
                tableBody.update("");
	            this.showProgress();
            	this.list.data.currentPage++;
            	this.showTable(this.list);
            },
            
			previousPage: function (){
				var tableBody = $("listBodyComparative");
				tableBody.update("");
	            this.showProgress();
	            this.list.data.currentPage--;
            	this.showTable(this.list);
            },

			showMessage: function (message){
				alert(message.data.message);
			},

			add: function (offerId){
            	var offer = {id: 'offer',
            			data:{offerId: offerId}};
				this.manageData(["offer"], [offer],[]);
			}
        });
		&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
        &lt;div id="bodyDiv"&gt;
        	&lt;span id="amazonImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.png" /&gt;&lt;/span&gt;
            &lt;h1 id="title"&gt;Price Comparative&lt;/h1&gt;
			&lt;div id="like"&gt;Offers for &lt;span class="productTitle"&gt;&lt;/span&gt;&lt;/div&gt;
            &lt;div id="listDiv"&gt;
                &lt;table&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th style="width: 20%; -moz-border-radius-topleft: 13px; -moz-border-radius-topright: 0px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;Price&lt;/th&gt;
                            &lt;th style="width: 30%;"&gt;Condition&lt;/th&gt;
                            &lt;th style="width: 40%;"&gt;Seller Information&lt;/th&gt;
                            &lt;th style="width: 10%; -moz-border-radius-topleft: 0px; -moz-border-radius-topright: 13px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;Ready to Buy?&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody id="listBodyComparative"&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
		    		&lt;/tbody&gt;
                &lt;/table&gt;
                &lt;img style="display: none;" id="loadingImgComparative" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif"&gt;
                &lt;div id="buttonContainerDiv"&gt;
                    &lt;input style="visibility: hidden;" id="previousButtonComparative" class="button" value="&amp;lt;" type="button"&gt;
					&lt;span id="pagesComparative"&gt;
					Page &lt;span id="curPageComparative"&gt;-&lt;/span&gt;/&lt;span id="totalPagesComparative"&gt;-&lt;/span&gt;
					&lt;/span&gt;&lt;input style="visibility: visible;" id="nextButtonComparative" class="button" value="&amp;gt;" type="button"&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</field>
    </object>
    <object pk="12" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">12</field>
        <field type="TextField" name="code">&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#productImage{
				height: 170px;
				-moz-border-radius: 13px 13px;
				background: #FFF8E8 url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td2.jpg) repeat-x;
				border:1px solid #F8A704;
				margin:0px auto 13px;
				text-align:center;
				width:88%;
				padding-bottom:5px;
				padding-top:10px;
			}
			#leftColumn{
				position: relative;
				float:left;
				height: 100%;
				width: 35%;
			}
			#rightColumn{
				position: relative;
				float:right;
				height: 268px;
				width: 60%;
				-moz-border-radius:13px 13px;
				background:#FFF8E8 url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td2.jpg) repeat-x;
				border:1px solid #F8A704;
				padding-top:5px;
				padding-right:0px;
				padding-left:5px;
				padding-bottom: 5px;
				position:relative;
			}
			#infoArea{
				text-align: left;
			}
			#titleInfo{
				float:left;
				margin: 5px;
				width:35%;
				overflow: hidden;
			}
			#valueInfo{
				float:left;
				margin: 5px 15px 5px 5px;
				width: 50%;
			}
			#moreInfo{
				float:left;
				margin-left: 5px;
			}
			.title{
				padding: 2px;
				color:#AAAAAA;
				font-weight: bold;
				font-family:Arial,Helvetica,sans-serif;	
				white-space:nowrap;
				overflow: hidden;
			}
			.info{
				padding: 2px;
				color:#888888;
				font-family:Arial,Helvetica,sans-serif;
				font-weight: bold;
				text-align: justify;
				white-space: nowrap;
				overflow: hidden;
			}
			#quantity {
				margin: 5px;
				color:#777777;
				font-weight: bold;
				font-family:Arial,Helvetica,sans-serif;
			}
			#cart {
				border: 1px solid #F8A704;
				-moz-border-radius:13px 13px;
				background:#FFF8E8 url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/bg_td2.jpg) repeat-x;
				border:1px solid #F8A704;
				height:78px;
				margin:5px auto 0px;
				padding:0px;
				text-align:center;
				width:88%;
			}
			#moreInfoText {
				color:#888888;
				font-family:Arial,Helvetica,sans-serif;
				font-size:13px;
				height:133px;
				margin:0;
				overflow:auto;
				padding:2px 15px 2px 2px;
				text-align:left;
				width:300px;
				max-width:300px;
			}
			.detailsElement {
				color:#888888;
				font-weight:bold;
			}
			#bodyDivDetails {
				max-width:550px;
				text-align:center;
				margin: 8px auto 20px auto;
				height:270px;
			}
			#amazonImage{
				position:absolute;
				right:0px;
				top:3px;
			}
		&lt;/style&gt;
        &lt;script language="JavaScript"&gt;
        	var {{buildingblockId}} = Class.create(BuildingBlock,{
					init: function (){
		        		$("addToCart").onclick = this.addToCart.bind(this);
					},

					showProductInfo: function (_product){
						$("quantitySelect").value=1;
						if (_product.data.title) {
							//Reset styles
							$("productTitle").setStyle ({"fontSize":"20px"});
							$("moreInfoText").setStyle({"height": "133px"});
							$("productTitle").update(_product.data.title);
							if ($("productTitle").clientHeight &gt; 28) {//Big title
								//Big title, adapt styles
								$("productTitle").setStyle ({"fontSize":"16px"});
								if ($("productTitle").clientHeight &gt; 23) {//More than one line
									if ($("productTitle").clientHeight &gt; 46) {//More than two lines
										if ($("productTitle").clientHeight &gt; 69) {//More than three lines
											$("productTitle").setStyle ({"fontSize":"13px"});
											if ($("productTitle").clientHeight &gt; 49) {//Still more than three lines
												$("moreInfoText").setStyle({"height": "90px"});
											} else {
												$("moreInfoText").setStyle({"height": "110px"});
											}
										} 
										else{//Three lines
											$("moreInfoText").setStyle({"height": "110px"});
											$("productTitle").setStyle ({"fontSize":"14px"});	
										}
									} else {//Two lines
										$("moreInfoText").setStyle({"height": "115px"});
									}	
								}
							}
							
						}
						if (_product.data.price) {
							$("price").update(_product.data.price);
						} else {
							$("price").update("");
						}
						if (_product.data.pGroup) {
							$("pGroup").update(_product.data.pGroup);
						} else {
							$("pGroup").update("");
						}
						if (_product.data.url) {
							var a = new Element('a',{href:_product.data.url,target:"_blank"}).update ("Amazon");
							$("url").update (a);
						} else {
							$("url").update ("");
						}
						if (_product.data.image) {
							var img = new Element ('img',{src: _product.data.image});
							$("productImage").update(img);
						} else {
							var img = new Element ('img',{src: "http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.jpg"});
							$("productImage").update(img);	
						}
						this.showAdvancedDetails(_product);				 
					},
					
					showAdvancedDetails: function (_product){
						var element = _product.data.item;
						var pGroup = _product.data.pGroup;

						var itemAttributes = element.getElementsByTagName("ItemAttributes")[0];
						var attributesHTML = "&lt;ul&gt;";
						//List of elements to be shown
						var elementList = [];
						switch (pGroup){
							case "eBooks":
							case "Book":
								//Print all book authors
								attributesHTML += this.elementDetail("Author",itemAttributes,"Author(s)");
								//Print the remainder features
								elementList = [{nodeElement:"PublicationDate",caption:"Publication Date"},
											   "ISBN",
											   "Format",
											   {nodeElement:"Label", caption:"Publisher"},
											   {nodeElement:"NumberOfPages", caption:"Pages"}];	
							    attributesHTML += this.productDetailsList(elementList,itemAttributes);	
								break;
							case "Theatrical Release":
							case "Video":
							case "DVD":
								//Print all actors
								attributesHTML += this.elementDetail("Actor",itemAttributes,"Cast");
								//Print all directors
								attributesHTML += this.elementDetail("Director",itemAttributes);
								elementList = 	["Genre",
												{nodeElement:"RunningTime",caption: "Run Time"},
												{nodeElement:"AudienceRating", caption:"Audience Rating"},
												"Label",
												"Binding",
												"Region",
												{nodeElement:"AspectRatio", caption:"Aspect Ratio"},
												{nodeElement:"OriginalReleaseDate", caption:"Release Date"}
												];
								attributesHTML += this.productDetailsList(elementList,itemAttributes);
								attributesHTML += this.twoElements ("DVDLayers","DVDSides",itemAttributes,"DVD Layers / Sides");
								//Print technical details
								attributesHTML += this.elementDetail("Format",itemAttributes);
								break;
							case "Digital Music Track":
							case "Music":
								elementList = 	["Artist",
												"Genre",
												"Label",
												"Binding",
												"Format",
												{nodeElement:"NumberOfDiscs", caption:"Number of Discs"},
												{nodeElement:"ReleaseDate", caption:"Release Date"},
												{nodeElement:"OriginalReleaseDate", caption:"Original Release Date"}
												];
								attributesHTML += this.productDetailsList(elementList,itemAttributes);
								break;
							case "Photography":
								//Print details 
								elementList = ["Brand","Model"];
								attributesHTML += this.productDetailsList(elementList,itemAttributes);	
								//Print all camera features
								attributesHTML += this.elementDetail("Feature",itemAttributes,"Features",".");
								break;
							case "Personal Computer":
								elementList = 	["Model",
												"Label",
												"Binding"];
								attributesHTML += this.productDetailsList(elementList,itemAttributes);
								attributesHTML += this.twoElements ("CPUType","CPUSpeed",itemAttributes,"CPU", " ");
								elementList = 	[{nodeElement:"DisplaySize", caption:"Display Size"},
												{nodeElement:"HardDiskSize", caption:"Hard Disk Size"},
												{nodeElement:"DataLinkProtocol", caption:"Data Link Protocol"},
												{nodeElement:"FloppyDiskDriveDescription", caption:"Floppy Disk Drive"}];
								attributesHTML += this.productDetailsList(elementList,itemAttributes);
								attributesHTML += this.twoElements ("SystemMemorySize","SystemMemoryType",itemAttributes,"Memory", " ");								
								elementList = 	[{nodeElement:"HardwarePlatform", caption:"Hardware Platform"},
												{nodeElement:"OperatingSystem", caption:"Operating System"},
												{nodeElement:"ReleaseDate",caption:"Release Date"},
												"Warranty",
												{nodeElement:"LegalDisclaimer",caption:"Legal Disclaimer"}
												];	
								attributesHTML += this.productDetailsList(elementList,itemAttributes);
								//Print technical details
								attributesHTML += this.elementDetail("Feature",itemAttributes, "Features",".");
								//Print special features
								attributesHTML += this.specialElementDetail("SpecialFeatures",itemAttributes,"|","Special Features",".");
								break;
							case "CE":
							case "Video Games":						
							case "Software":
							case "Wireless":
							case "Wireless Phone Accessory":
								elementList = 	["Model",
												"Color",
												"Label",
												"Binding",
												{nodeElement:"DisplaySize", caption:"Display Size"},
												{nodeElement:"ESRBAgeRating", caption:"Age Rating"},
												{nodeElement:"HardwarePlatform", caption:"Hardware Platform"},
												{nodeElement:"OperatingSystem", caption:"Operating System"},
												{nodeElement:"ReleaseDate",caption:"Release Date"},
												{nodeElement:"LegalDisclaimer",caption:"Legal Disclaimer"}
												];
								attributesHTML += this.productDetailsList(elementList,itemAttributes);
								//Print technical details
								attributesHTML += this.elementDetail("Feature",itemAttributes, "Features",".");
								//Print special features (only CE)
								attributesHTML += this.specialElementDetail("SpecialFeatures",itemAttributes,"|","Special Features",".");
								break;
							default:
								elementList = 	["Model",
												"Color",
												"Label",
												"Binding",
												{nodeElement:"ReleaseDate",caption:"Release Date"}
												];
								attributesHTML += this.productDetailsList(elementList,itemAttributes);
								attributesHTML += this.elementDetail("Feature",itemAttributes, "Features",".");
								break;				
						}
						attributesHTML += "&lt;/ul&gt;";
						if (attributesHTML.length&gt;9) {//There is something to show
							$("moreInfoText").update(attributesHTML);
							$("moreInfoText").setStyle({"borderTop":"1px dotted #AAAAAA"});
							$("moreInfoTitle").update("Product Details");
						} 
							
					},
					
					//This function returns a html with pre-formatted details list
					//Each element of attributesList can be an object with two elements (nodeElement and caption)
					//or simply a string representing both of them
					productDetailsList: function (attributesList,attributesNode){
						var result = "";
						$A(attributesList).each(function(attribute){
								var element = attributesNode.getElementsByTagName ((attribute.nodeElement?attribute.nodeElement:attribute));						
								if (element.length &gt; 0) {
									result += "&lt;li&gt;" + (attribute.caption?attribute.caption:attribute) + ": ";
									result += "&lt;span class='detailsElement'&gt;";
									result += element[0].firstChild.nodeValue;
									if (element[0].getAttribute("Units") &amp;&amp; element[0].getAttribute("Units")!= "unknown-units") {
										result += " " + element[0].getAttribute("Units");
									}
									result += "&lt;/span&gt;&lt;/li&gt;";
								}
						});
						return result;
					},
					
					//This function produces a single li with a list of elements (authors, features...)
					//caption parameter is optional
					//separationCharacter parameter is optional
					elementDetail: function (element,attributesNode,caption,separationCharacter){
							var list = attributesNode.getElementsByTagName(element);
							var result = "";
							if (list.length &gt; 0) {
								result += "&lt;li&gt;" + (caption?caption:element)  + ": &lt;span class='detailsElement'&gt;";
								$A(list).each (function (e){
									result += e.firstChild.nodeValue + (separationCharacter?separationCharacter + " ":", ");
								});
								//Remove last ", "
								result = result.substring(0,result.length-2);
								result += "&lt;/span&gt;&lt;/li&gt;";							
							}
							return result;			
					},
					
					//This function produces a single li with a list of features. The original line has 
					//extrange separators
					//caption parameter is optional
					//separationCharacter parameter is optional
					specialElementDetail: function (element,attributesNode,beforeSeparationCharacter,caption,separationCharacter){
							var element = attributesNode.getElementsByTagName(element);
							var result = "";
							if (element.length &gt; 0) {
								result += "&lt;li&gt;" + (caption?caption:element)  + ": &lt;span class='detailsElement'&gt;";
								var list = element[0].firstChild.nodeValue.split(beforeSeparationCharacter);
								$A(list).each (function (e){
									result += e + (separationCharacter?separationCharacter + " ":", ");
								});
								//Remove last ", "
								result = result.substring(0,result.length-2);
								result += "&lt;/span&gt;&lt;/li&gt;";							
							}
							return result;			
					},
					
					//This function produces a single li two elements separated by "/"
					//caption parameter is optional
					//separationCharacter is optional
					twoElements: function (element1,element2,attributesNode, caption, separationCharacter){
							var _element1 = attributesNode.getElementsByTagName(element1);
							var _element2 = attributesNode.getElementsByTagName(element2);
							var result = "";
							//At least one correct element
							if (_element1.length &gt; 0 || _element2.length &gt; 0) {
								result += "&lt;li&gt;" + (caption?caption:(element1 + " / " + element2))  + ": &lt;span class='detailsElement'&gt;";
								result += (_element1[0]?_element1[0].firstChild.nodeValue:"-");
								if (_element1[0].getAttribute("Units") &amp;&amp; _element1[0].getAttribute("Units")!= "unknown-units") {
									result += " " + _element1[0].getAttribute("Units");
								}
								result += (separationCharacter?separationCharacter:" / ");
								result += (_element2[0]?_element2[0].firstChild.nodeValue:"-");
								if (_element2[0].getAttribute("Units") &amp;&amp; _element2[0].getAttribute("Units")!= "unknown-units") {
									result += " " + _element2[0].getAttribute("Units");
								}
								result += "&lt;/span&gt;&lt;/li&gt;";							
							}
							return result;
					},

					showMessage: function (message){
						alert(message.data.message);
					},

					addToCart: function (){
						this.manageData(["addToCart"], [], []);	
					}
        	});
		&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="bodyDivDetails"&gt;
        	&lt;div id="leftColumn"&gt;
		     	&lt;div id="productImage"&gt;&lt;/div&gt;
				&lt;div id="cart"&gt;
					&lt;div id="quantity"&gt;Quantity:  	&lt;select id="quantitySelect"&gt;
								  	&lt;option value ="1"&gt;1&lt;/option&gt;
								  	&lt;option value ="2"&gt;2&lt;/option&gt;
								  	&lt;option value ="3"&gt;3&lt;/option&gt;
								  	&lt;option value ="4"&gt;4&lt;/option&gt;
								  	&lt;option value ="5"&gt;5&lt;/option&gt;	
								 	&lt;option value ="6"&gt;6&lt;/option&gt;
								  	&lt;option value ="7"&gt;7&lt;/option&gt;	
								  	&lt;option value ="8"&gt;8&lt;/option&gt;		
									&lt;option value ="9"&gt;9&lt;/option&gt;	
								  	&lt;option value ="10"&gt;10&lt;/option&gt;						
									&lt;/select&gt;
					&lt;/div&gt;
					&lt;input border="0" height="27" width="160" type="image" id="addToCart" alt="Add to Shopping Cart" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/addToCart.gif"/&gt;
				&lt;/div&gt;       	
			&lt;/div&gt;
			&lt;div id="rightColumn"&gt;
				&lt;div id="productTitle" style="font-size: 20px; padding: 2px; color:#F8A704; font-weight: bold; font-style: italic; font-family:Arial,Helvetica,sans-serif; overflow: hidden;"&gt;&lt;/div&gt;
				&lt;div id="infoArea"&gt;
					&lt;span id="titleInfo"&gt;
						&lt;div class="title"&gt;Product Type: &lt;/div&gt;
						&lt;div class="title"&gt;Price: &lt;/div&gt;
						&lt;div class="title"&gt;Product Site: &lt;/div&gt;
						&lt;div class="title" id="titleInfo1"&gt;&lt;/div&gt;
					&lt;/span&gt;
					&lt;span id="valueInfo"&gt;
						&lt;div id="pGroup" class="info"&gt;&lt;/div&gt;
						&lt;div id="price" class="info"&gt;&lt;/div&gt;
						&lt;div id="url" class="info"&gt;&lt;/div&gt;
						&lt;div id="info1" class="info"&gt;&lt;/div&gt;
					&lt;/span&gt;
					&lt;div id="moreInfo"&gt;
						&lt;div class="title" id="moreInfoTitle"&gt;&lt;/div&gt;
						&lt;div id="moreInfoText"&gt;
						&lt;/div&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</field>
    </object>
    <object pk="13" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">13</field>
        <field type="TextField" name="code">&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#bodyDiv{
				max-width: 550px;
			}
			#searchArea {
				border: 1px solid #F8A704;
				-moz-border-radius:13px 13px;
				background:#FFF8E8 url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td2.jpg) repeat-x;
				border:1px solid #F8A704;
				height:50px;
				margin:5px auto 0px;
				padding:0px;
				text-align:center;
				width:98%;
			}
			#contents{
				padding:12px;
			}
			#send{
				margin-left: 15px;
			}
			#amazonImage{
				position:absolute;
				right:2px;
				top:3px;
			}
			.title{
				padding: 2px;
				color:#AAAAAA;
				font-weight: bold;
				font-family:Arial,Helvetica,sans-serif;	
				white-space:nowrap;
				overflow: hidden;
			}
		&lt;/style&gt;
		
        &lt;script language="JavaScript"&gt;
			var {{buildingblockId}} = Class.create(BuildingBlock,{
			    /** @constructs */
			    initialize: function($super, screenId, buildingBlockId, context){
					$super(screenId, buildingBlockId, context);
			    },
			    
			    init: function (){
			    	//List of possible searches
					var searchIndices = ["All","Apparel","Automotive","Baby","Beauty","Blended",
										 "Books","Classical", "DigitalMusic","DVD","Electronics",
										 "GourmetFood","HealthPersonalCare","HomeGarden","Industrial",
										 "Jewelry","KindleStore","Kitchen","Magazines","Merchants",
										 "Miscellaneous","MP3Downloads","Music","MusicalInstruments",
										 "MusicTracks","OfficeProducts","OutdoorLiving","PCHardware",
										 "PetSupplies","Photo","SilverMerchants","Software","SportingGoods",
										 "Tools","Toys","UnboxVideo","VHS","Video","VideoGames","Watches",
										 "Wireless","WirelessAccessories"];

					$("send").onclick = this.send.bind(this);
					$("send").onmouseover = function(event){
							var e = Event.element(event);
							e.setStyle({cursor:"pointer"});
						};

					//Populate the product type select element
					this.populateOptions(searchIndices);
				},
				
				populateOptions: function (_list){
					var templateString = "&lt;option value ='#{element}'&gt;#{caption}&lt;/option&gt;";
					var template = new Template(templateString);
					var optionHTML = "";
					for(var i=0; i &lt; _list.length; i++){
						optionHTML += template.evaluate({"element":_list[i],"caption":_list[i]});
					}
					$("productType").update(optionHTML);
				},

				//This function returns a human readable element, 
				//separating words by white-spaces
				separate: function (element){
					//Workaround for special cases
					//TODO: Create a generic solution, maybe another regexp?
					if (element=="DVD" || element=="VHS" || element=="MP3Downloads" || element=="PCHardware"){
						if (element=="MP3Downloads"){
							return "MP3 Downloads";
						}
						if (element=="PCHardware"){
							return "PC Hardware";
						}
						return element;
					}else{
						var result = element.replace(/([A-Z])/g, " $1");
						//Remove first white-space when necessary
						result = (result[0]==" "?result.substring(1,result.length):result);
						return result;
					}
				},
				
				send: function (){
					if ($F("searchText").length==0){ //Empty keywords are forbidden
						alert ("You must introduce at least one keyword");
						return;
					}
					var filter = {id: "filter", data: {productType: $F("productType"), searchText: $F("searchText")}};
					this.manageData(["newFilter"], [filter],[]);
				}
			    
			});
   		&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="bodyDiv"&gt;
        	&lt;span id="amazonImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.png" /&gt;&lt;/span&gt;
        	&lt;h1 id="title"&gt;Product Search&lt;/h1&gt;
			&lt;div id="searchArea"&gt;
				&lt;div id="contents"&gt;
					&lt;span class="title"&gt;Keywords: &lt;/span&gt; &lt;input type="text" id="searchText" /&gt;
					&lt;select id="productType"&gt;			
					&lt;/select&gt;
					&lt;input type="button" id="send" value="Search" /&gt;
				&lt;/div&gt;
			&lt;/div&gt;       
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</field>
    </object>
    <object pk="14" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">14</field>
        <field type="TextField" name="code">&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/table.css" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#loadingImgCart{
				margin:auto;	
			}
			#info{
				margin:auto;
				font-family:Arial,Helvetica,sans-serif;
				font-style:italic;
				padding-top: 10px;
				color: #AAA;
			}
			.productTitle{
				font-weight:bold;
				font-style:normal;
			}
			#buttonContainerDivCart{
				margin-top: 5px;
				display:none;
			}
			#amazonImage{
				position:absolute;
				right:0px;
				top:3px;
			}
		&lt;/style&gt;
        &lt;script language="JavaScript"&gt;
        var {{buildingblockId}} = Class.create(BuildingBlock,{	
			init: function (){
                $("clearButton").onclick = this.clearCart.bind(this);
                $("checkoutButton").onclick = this.checkout.bind(this);
				$("updateButton").onclick = this.updateCart.bind(this);
				$$('input[type="button"]').each(function(element){
					element.onmouseover  = function(event){
						var e = Event.element(event);
						e.setStyle({cursor:"pointer"});
					};
				
				});
				var tableBody = $("listBodyCart");
				tableBody.update("");
				if (!$("loadingImgCart")) {
					$("info").update('&lt;img id="loadingImgCart" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif" /&gt;');
				}
				$("loadingImgCart").show();
				$("buttonContainerDivCart").hide();
            },

			clearCart: function (){
            	this.manageData(["clearCart"], [],[]);	
			},

			showProgress: function (){
                $("loadingImgCart").show();
            },

			showTable: function (l){
            	
                if ($("loadingImgCart")) {
                	$("loadingImgCart").hide();
				}
				var tableBody = $("listBodyCart");
				tableBody.update("");
				if (l.data.productList.length == 0) {//Empty shopping cart
					$("info").update("Your Shopping Cart is empty");
					$("buttonContainerDivCart").hide();
					return;
				} else {
					$("info").update("");
				}
				$("buttonContainerDivCart").setStyle({display:"inline"});
                var templateString = '&lt;tr&gt;&lt;td&gt;&lt;a onclick="ScreenEngineFactory.getInstance(\'{{screenId}}\').getBuildingBlock(\'{{buildingblockInstance}}\').productDetail(\'#{ASIN}\',\'#{title}\');"&gt;#{title}&lt;/a&gt;&lt;/td&gt;';
				templateString += '&lt;td&gt;#{price}&lt;/td&gt;';
				templateString += '&lt;td&gt;&lt;input type="hidden" id="id"';
				templateString += 'value="#{id}"/&gt;&lt;input type="text" maxlength="3" size="2" id="itemQuantity"';
				templateString += 'value="#{quantity}"/&gt;&lt;/td&gt;&lt;/tr&gt;';
                var rowTemplate = new Template(templateString);

                for (var i = 0; i &lt; l.data.productList.length; i++) {
                    if (l.data.productList[i]) { //only if the product table is fetched
                        tableBody.innerHTML += rowTemplate.evaluate(l.data.productList[i]);
                    }
                }

				//Last row, including subtotal
				var lastRow = "&lt;tr&gt;&lt;th style='text-align:right'&gt;Subtotal&lt;/th&gt;&lt;th&gt;";
				lastRow += l.data.subTotal;
				lastRow += "&lt;/th&gt;&lt;th&gt;";
				lastRow += l.data.itemTotal;
				lastRow += "&lt;/th&gt;&lt;/tr&gt;";
				lastRow += '&lt;input type="hidden" id="purchaseURL" value="'+l.data.purchaseURL+'"/&gt;';
				tableBody.innerHTML += lastRow;
            },
            
			showMessage: function (message){
				alert(message.data.message);
			},

			checkout: function (){
				var purchase = {id:'purchase', data:{url: $F("purchaseURL")}};
				this.manageData(["purchase"], [purchase], []);
			},
            
            //Change the current Item Fact
			productDetail: function (_ASIN,_title){
				var item = {id: 'item', data:{ASIN: _ASIN, title: _title}};
				this.manageData(["newItem"], [item], []);
			},
			
			updateCart: function (){
				var cartUpdate = {id: "cartUpdate", data:{list: new Array()}};
				var ids = $("id");
				var quantities = $("itemQuantity");
				if(!ids.length){
				  ids = [ids];
				  quantities = [quantities];
				}
				for (var i=0; i &lt; ids.length; i++){
					cartUpdate.data.list.push({id: $F(ids[i]), quantity: $F(quantities[i])});
				}
            	this.manageData(["cartUpdate"], [cartUpdate], []);		
			}
        });
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="bodyDiv"&gt;
        	&lt;span id="amazonImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.png" /&gt;&lt;/span&gt;
            &lt;h1 id="title"&gt;Shopping Cart&lt;/h1&gt;
            &lt;div id="listDivCart"&gt;
                &lt;table&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th style="width:70%;-moz-border-radius: 13px 0px 0px 0px;"&gt;Shopping Cart Items&lt;/th&gt;
                            &lt;th style="width:10%"&gt;Price&lt;/th&gt;
                            &lt;th style="width:10%;-moz-border-radius: 0px 13px 0px 0px;"&gt;Quantity&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody id="listBodyCart"&gt;
                    	&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
						&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
						&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
						&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
               &lt;div id="info"&gt;&lt;img id="loadingImgCart" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif" /&gt;&lt;/div&gt;		
               &lt;div id="buttonContainerDivCart"&gt;
                    &lt;input type="button" id="clearButton" class="button" value="Clear Cart"/&gt;
					&lt;input type="button" id="updateButton" class="button" value="Update Cart"/&gt;
					&lt;input type="button" id="checkoutButton" class="button" value="Proceed to Checkout"/&gt;
               &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</field>
    </object>
    <object pk="15" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">15</field>
        <field type="TextField" name="code">&lt;html&gt;
	&lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"&gt;
		&lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/table.css" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#pagesSuggestion{
				color:#FEBF43;
				font-weight: bold;
				padding: 10px;
			}
			#previousButtonSuggestion, #nextButtonSuggestion {
				visibility:hidden;
			}
			#loadingImgSuggestion{
				margin:auto;
				padding-top: 10px;
			}
			#like{
				padding: 5px;
				color: #777777;
			}
			.productTitle{
				font-weight:bold;
				font-style:normal;
			}
			#amazonImage{
				position:absolute;
				right:0px;
				top:3px;
			}
		&lt;/style&gt;
        &lt;script language="JavaScript"&gt;

        var {{buildingblockId}} = Class.create(BuildingBlock,{
        	
			init: function (item){
                $("nextButtonSuggestion").onclick = this.nextPage.bind(this);
                $("previousButtonSuggestion").onclick = this.previousPage.bind(this);
				$$('input[type="button"]').each(function(element){
					element.onmouseover = function(event){
						var e = Event.element(event);
						e.setStyle({cursor:"pointer"});
					};
				
				});
				$$(".productTitle").each(function(element){
					element.update(item.data.title);
				});
				var tableBody = $("listBodySuggestion");
                tableBody.update("");
	            this.showProgress();
            },
            
			showTable: function (l){
            	this.list = l;
            	var tableBody = $("listBodySuggestion");
                tableBody.update("");
                
            	if ($("loadingImgSuggestion")) {
                	$("loadingImgSuggestion").hide();
                }
                var templateString = '&lt;tr&gt;&lt;td&gt;#{title}&lt;/td&gt;&lt;td&gt;#{price}&lt;/td&gt;&lt;td&gt;#{pGroup}&lt;/td&gt;';
                templateString += '&lt;td style="border-right:none;"&gt;&lt;input type="button" onclick="ScreenEngineFactory.getInstance(\'{{screenId}}\').getBuildingBlock(\'{{buildingblockInstance}}\').productDetail(this,\'#{ASIN}\');"';
				templateString += ' onmouseover="this.setStyle({cursor:\'pointer\'});" value="Select"/&gt;&lt;/td&gt;&lt;/tr&gt;';
                var rowTemplate = new Template(templateString);
                
                var tableBody = $("listBodySuggestion");
                for (var i = 5 * l.data.currentPage; i &lt; 5 * (l.data.currentPage + 1); i++) { //print the appropriate elements
                    if (l.data.productList[i]) { //only if the product table is fetched
                        tableBody.innerHTML += rowTemplate.evaluate(l.data.productList[i]);
                    }
                }
                //Update Interface
                if (l.data.currentPage &lt; 1 &amp;&amp; (5*(l.data.currentPage + 1)&lt; l.data.productList.length)) {
                    $("nextButtonSuggestion").setStyle({
                        visibility: "visible"
                    });
                }
                else {
                    $("nextButtonSuggestion").setStyle({
                        visibility: "hidden"
                    });
                }
                if (l.data.currentPage &gt; 0) {
                    $("previousButtonSuggestion").setStyle({
                        visibility: "visible"
                    });
                } else {
                    $("previousButtonSuggestion").setStyle({
                        visibility: "hidden"
                    });
                }
                //update the current page in the interface
                if (l.data.productList.length&gt;0) {
                	$("curPageSuggestion").update(l.data.currentPage+1);
                	$("totalPagesSuggestion").update(Math.ceil(l.data.productList.length/5));
                } else {
                	$("curPageSuggestion").update("-");
                	$("totalPagesSuggestion").update("-");
                }
            },

			nextPage: function (){
            	var tableBody = $("listBodySuggestion");
                tableBody.update("");
                this.showProgress();
                this.list.data.currentPage++;
            	this.showTable(this.list);
            },
            
			previousPage: function (){
            	var tableBody = $("listBodySuggestion");
                tableBody.update("");
	            this.showProgress();
                this.list.data.currentPage--;
            	this.showTable(this.list);
            },

			showMessage: function (message){
				alert(message.data.message);
			},
			
			productDetail: function (nodeElement,_ASIN){
				this.clearSelected ();
				//select the element
				nodeElement.parentNode.parentNode.setStyle({background: "#FFF8E8"});
				var item = {id: 'item', data:{ASIN: _ASIN, title: nodeElement.parentNode.parentNode.firstChild.firstChild.nodeValue}};
				this.manageData(["item"], [item], []);
			},
			
			clearSelected: function (){
				$$("tbody tr").each(function (element){
					element.setStyle ({background: "transparent url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td1.jpg) repeat-x top"});
				});
			},

			showProgress: function (){
                $("loadingImgSuggestion").show();
            }

        });
		&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="bodyDiv"&gt;
        	&lt;span id="amazonImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/amazon.png" /&gt;&lt;/span&gt;
            &lt;h1 id="title"&gt;Related products to&lt;/h1&gt;
			&lt;h1 id="title"&gt;&lt;span class="productTitle"&gt;&lt;/span&gt;&lt;/h1&gt;
			&lt;div id="like"&gt;Customers who bought &lt;span class="productTitle"&gt;&lt;/span&gt;, also bought ...&lt;/div&gt;
            &lt;div id="listDiv"&gt;
                &lt;table&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th style="width: 60%; -moz-border-radius-topleft: 13px; -moz-border-radius-topright: 0px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;Title&lt;/th&gt;
                            &lt;th style="width: 10%;"&gt;Price&lt;/th&gt;
                            &lt;th style="width: 20%;"&gt;Product Group&lt;/th&gt;
                            &lt;th style="width: 10%; -moz-border-radius-topleft: 0px; -moz-border-radius-topright: 13px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;&amp;nbsp;&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody id="listBodySuggestion"&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
		    		&lt;/tbody&gt;
                &lt;/table&gt;
                &lt;img style="display: none;" id="loadingImgSuggestion" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif"&gt;
                &lt;div id="buttonContainerDiv"&gt;
                    &lt;input style="visibility: hidden;" id="previousButtonSuggestion" class="button" value="&amp;lt;" type="button"&gt;
					&lt;span id="pagesSuggestion"&gt;
					Page &lt;span id="curPageSuggestion"&gt;-&lt;/span&gt;/&lt;span id="totalPagesSuggestion"&gt;-&lt;/span&gt;
					&lt;/span&gt;&lt;input style="visibility: visible;" id="nextButtonSuggestion" class="button" value="&amp;gt;" type="button"&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</field>
    </object>
    <object pk="16" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">16</field>
        <field type="TextField" name="code">&lt;html&gt;
	&lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"&gt;
		&lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/table.css" /&gt;
        &lt;link type="text/css" rel="stylesheet" href="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/screen.css" /&gt;
		&lt;style type="text/css"&gt;
			#pagesEBayList{
				color:#FEBF43;
				font-weight: bold;
				padding: 10px;
			}
			#previousButtonEBayList, #nextButtonEBayList {
				visibility:hidden;
			}
			#loadingImgEBayList{
				margin:auto;
				padding-top: 10px;
			}
			#like{
				padding: 5px;
				color: #777777;
			}
			.productTitle{
				font-weight:bold;
				font-style:normal;
			}
			#eBayImage{
				position:absolute;
				right:0px;
				top:3px;
			}
		&lt;/style&gt;
        &lt;script language="JavaScript"&gt;
        var {{buildingblockId}} = Class.create(BuildingBlock,{
				init: function (){
	            	$("nextButtonEbayList").onclick = this.nextPage.bind(this);
	                $("previousButtonEbayList").onclick = this.previousPage.bind(this);
	                $$('input[type="button"]').each(function(element){
						element.onmouseover = function(event){
							var e = Event.element(event);
							e.setStyle({cursor:"pointer"});
						};
					
					});
					var tableBody = $("listBodyEBayList");
	                tableBody.update("");
	                this.showProgress();
	            },
	
				showProgress: function (){
	                $("loadingImgEBayList").show();
	            },
	            
				showTable: function (l){
	            	if ($("loadingImgEBayList")) {
	                	$("loadingImgEBayList").hide();
	                }
	                var templateString = '&lt;tr&gt;';
	                templateString += '&lt;td&gt;&lt;img src="#{image}"/&gt;&lt;/td&gt;';
	                templateString += '&lt;td&gt;#{title}&lt;/td&gt;&lt;td&gt;#{category}&lt;/td&gt;&lt;td&gt;#{currentPrice}&lt;/td&gt;&lt;td&gt;#{shippingServiceCost}&lt;/td&gt;';
	                templateString += '&lt;td style="border-right:none;"&gt;&lt;input type="button" onclick="ScreenEngineFactory.getInstance(\'{{screenId}}\').getBuildingBlock(\'{{buildingblockInstance}}\').productDetail(this,\'#{itemID}\',\'#{title}\');"';
					templateString += ' onmouseover="this.setStyle({cursor:\'pointer\'});" value="Select"/&gt;&lt;/td&gt;&lt;/tr&gt;';
	                var rowTemplate = new Template(templateString);
	                
	                var tableBody = $("listBodyEBayList");
	                for (var i = 0; i &lt; l.data.productList.length; i++) { //print the appropriate elements
	                    if (l.data.productList[i]) { //only if the product table is fetched
	                        tableBody.innerHTML += rowTemplate.evaluate(l.data.productList[i]);
	                    }
	                }
	
	              //Update Interface
			        if (parseInt(l.data.currentPage) &lt; parseInt(l.data.totalPages)) {
			            $("nextButtonEbayList").setStyle({visibility: "visible"});
			        } else {
			            $("nextButtonEbayList").setStyle({visibility: "hidden"});
			        }
			        if (l.data.currentPage &gt; 1) {
			            $("previousButtonEbayList").setStyle({visibility: "visible"});
			        } else {
			            $("previousButtonEbayList").setStyle({visibility: "hidden"});
			        }
	
			        if (l.data.totalPages&gt;0) {
			        	$("curPageEBayList").update(l.data.currentPage);
			        	$("totalPagesEBayList").update(l.data.totalPages);
			        } else {
			        	$("curPageEBayList").update("-");
			        	$("totalPagesEBayList").update("-");
				    }
	
			        $("CPebayList").value = l.data.currentPage;
			        $("MEebayList").value = l.data.maxEntries;
			        $("KebayList").value = l.data.keywords;
	            },
	
				productDetail: function (nodeElement, itemID, title){
					this.clearSelected ();
					//select the element
					nodeElement.parentNode.parentNode.setStyle({background: "#FFF8E8"});
					var ebayItem = {id: 'ebayItem', data:{itemID: itemID, title: title}};
					this.manageData(["ebayItem"], [ebayItem], []);
				},
				
				clearSelected: function (){
					$$("tbody tr").each(function (element){
						element.setStyle ({background: "transparent url(http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/style/bg_td1.jpg) repeat-x top"});
					});
				},
	
				nextPage: function (){
			    	var tableBody = $("listBodyEBayList");
			        tableBody.update("");
			        this.showProgress();
			        var filter = {id: 'filterEbay', data:{keywords: $F("KebayList"), maxEntries: $F("MEebayList"), currentPage: parseInt($F("CPebayList")) + 1}};
			        this.manageData(["newFilter"], [filter], []);
			    },
			    
				previousPage: function (){
			    	var tableBody = $("listBodyEBayList");
			        tableBody.update("");
			        this.showProgress();
			        var filter = {id: 'filterEbay', data:{keywords: $F("KebayList"), maxEntries: $F("MEebayList"), currentPage: parseInt($F("CPebayList")) - 1}};
			        this.manageData(["newFilter"], [filter], []);
			    }
        }); 
		&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="bodyDiv"&gt;
        	&lt;input type="hidden" id="CPebayList" /&gt;
        	&lt;input type="hidden" id="MEebayList" /&gt;
        	&lt;input type="hidden" id="KebayList" /&gt;
        	&lt;span id="eBayImage"&gt;&lt;img src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/logo-ebay.gif" /&gt;&lt;/span&gt;
		    &lt;h1 id="title"&gt;eBay Item list&lt;/h1&gt;
		    &lt;div id="listDiv"&gt;
                &lt;table&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                        	&lt;th style="width: 10%; -moz-border-radius-topleft: 13px; -moz-border-radius-topright: 0px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;&amp;nbsp;&lt;/th&gt;
                            &lt;th style="width: 60%;" nowrap="nowrap"&gt;Title&lt;/th&gt;
                            &lt;th style="width: 10%;" nowrap="nowrap"&gt;Category&lt;/th&gt;
                            &lt;th style="width: 10%;" nowrap="nowrap"&gt;Current Price&lt;/th&gt;
                            &lt;th style="width: 20%;" nowrap="nowrap"&gt;Shipping Cost&lt;/th&gt;
                            &lt;th style="width: 10%; -moz-border-radius-topleft: 0px; -moz-border-radius-topright: 13px; -moz-border-radius-bottomright: 0px; -moz-border-radius-bottomleft: 0px;"&gt;&amp;nbsp;&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody id="listBodyEBayList"&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
                           &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
		    		&lt;/tbody&gt;
                &lt;/table&gt;
                &lt;img style="display: none;" id="loadingImgEBayList" src="http://demo.fast.morfeo-project.org/gvsdata/amazonScreens/images/ajaxLoader.gif"&gt;
                &lt;div id="buttonContainerDiv"&gt;
                    &lt;input style="visibility: hidden;" id="previousButtonEbayList" class="button" value="&amp;lt;" type="button"&gt;
					&lt;span id="pagesEBayList"&gt;
					Page &lt;span id="curPageEBayList"&gt;-&lt;/span&gt;/&lt;span id="totalPagesEBayList"&gt;-&lt;/span&gt;
					&lt;/span&gt;&lt;input style="visibility: visible;" id="nextButtonEbayList" class="button" value="&amp;gt;" type="button"&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
   	&lt;/body&gt;
  	&lt;/html&gt;</field>
    </object>
    <object pk="17" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">17</field>
        <field type="TextField" name="code">var BB17 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    createFilter: function (item){
	var filter = {id: 'filterEbay', data:{keywords: item.data.title, maxEntries: 5, currentPage: 1}};
	this.manageData(["filterEbay"], [filter], []);
}
    
});
    </field>
    </object>
    <object pk="18" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">18</field>
        <field type="TextField" name="code">var BB18 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    add: function (item, cart){
	if (cart) {//If the cart is already created, it will have an ID in the User Fact
		var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
		//Add the operation Type
		url +="&amp;Operation=CartGet";
		//Add the current version of the API
		url += "&amp;Version=2008-06-26";
		//Add item ID
		url += "&amp;CartId=" + cart.data.id;
		url += "&amp;HMAC=" + cart.data.HMAC;
		
		var encoder = new URLAmazonEncoder();
		url = encoder.encode(url);
		
		//Invoke the service
    	new FastAPI.Request(url,{
            'method':       'get',
            'content':      'xml',
            'context':      this,
            'onSuccess':    function(transport){this.isProductOnCart(transport, item, cart);}.bind(this)
        });
	} else { //Cart doesn't exist: Create a new cart with the product
		var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
		//Add the operation Type
		url +="&amp;Operation=CartCreate";
		//Add the current version of the API
		url += "&amp;Version=2008-06-26";
		//Add item ID
		url += "&amp;Item.1.ASIN=" + item.data.ASIN;
		url += "&amp;Item.1.Quantity=" + $F("quantitySelect");
		
		var encoder = new URLAmazonEncoder();
		url = encoder.encode(url);
		
		//Invoke the service
    	new FastAPI.Request(url,{
            'method':       'get',
            'content':      'xml',
            'context':      this,
            'onSuccess':    function(transport){this.cartCreated(transport, item);}.bind(this)
        });
	}
},

cartCreated: function (transport, item){
	var xml = transport;

	var message = {id: 'message', data:{message: ""}};
	
	//The product is added to the cart,
	//tell it to the user	
	if (xml.getElementsByTagName("IsValid")[0].firstChild.nodeValue == "True") {
		//Check if the product is eligible for shopping
		if ((xml.getElementsByTagName("Error").length &gt; 0) &amp;&amp; 
			xml.getElementsByTagName("Error")[0].firstChild.firstChild.nodeValue == "AWS.ECommerceService.ItemNotEligibleForCart") {
			//The product is not elegible
			message.data.message = "The product is not eligible to be added to the cartt";
			this.manageData(["message"], [message], []);
			return;
		}
		//Add the Cart ID to the KB
		var cart = {id: 'cart',
					data:{id: xml.getElementsByTagName("CartId")[0].firstChild.nodeValue,
					HMAC: xml.getElementsByTagName("URLEncodedHMAC")[0].firstChild.nodeValue}};
		message.data.message = "Product added to the shopping Cart";
		this.manageData(["message"], [cart, message], []);
	} else {
		message.data.message = "Error adding the product to the cart";
		this.manageData(["message"], [message], []);
	}
},

isProductOnCart: function (transport, item, cart){
	var xml = transport;
	//products node
	if (xml.getElementsByTagName ("CartItems").length&gt;0) { //There are products on the cart
			var products = xml.getElementsByTagName ("CartItems")[0];
			//Product list (ASINs) added to the cart
			var asins = $A(products.getElementsByTagName ("ASIN"));
			//Check if the product is already added to the cart
			var found = false;
			//product Node
			var _product; 
			asins.each (function(asin){
				if (asin.firstChild.nodeValue == item.ASIN) {
					found = true; //The product is in the list
					_product = asin.parentNode; //product = CartItem
				}
			});
	} else {//If there aren't elements, the product will not be on the list
		found = false;
	}
	if (found) { 
		//If the product is already added to the cart,
		//increase the number of items of that product (CartModify)			
		//Get the item quantity
		var prevQuantity = _product.getElementsByTagName("Quantity")[0].firstChild.nodeValue;
		//Add the new quantity to the previously stored
		var quantity = parseInt($F("quantitySelect")) + parseInt (prevQuantity);
		
		//Get the product Id within the cart
		var productId = _product.getElementsByTagName("CartItemId")[0].firstChild.nodeValue;	

		//Create the call
		var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
		//Add the operation Type
		url +="&amp;Operation=CartModify";
		//Add the current version of the API
		url += "&amp;Version=2008-06-26";
		//Add item ID
		url += "&amp;CartId=" + cart.data.id;
		url += "&amp;HMAC=" + cart.data.HMAC;
		url += "&amp;Item.1.CartItemId=" + productId;
		url += "&amp;Item.1.Quantity=" + quantity;
		
		var encoder = new URLAmazonEncoder();
		url = encoder.encode(url);
		
		//Invoke the service
    	new FastAPI.Request(url,{
            'method':       'get',
            'content':      'xml',
            'context':      this,
            'onSuccess':    this.productAdded.bind(this)
        });
	} else {
        //Create the call
		var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
		//Add the operation Type
		url +="&amp;Operation=CartAdd";
		//Add the current version of the API
		url += "&amp;Version=2008-06-26";
		//Add item ID
		url += "&amp;CartId=" + cart.data.id;
		url += "&amp;HMAC=" + cart.data.HMAC;
		url += "&amp;Item.1.ASIN=" + item.data.ASIN;
		url += "&amp;Item.1.Quantity=" + $F("quantitySelect");
		
		var encoder = new URLAmazonEncoder();
		url = encoder.encode(url);
		
		//Invoke the service
    	new FastAPI.Request(url,{
            'method':       'get',
            'content':      'xml',
            'context':      this,
            'onSuccess':    this.productAdded.bind(this)
        });
	}
},

productAdded: function (transport){
	var xml = transport;
	var message = {id: 'message', data:{message: ""}};
	//Check if the product is eligible for shopping
	if ((xml.getElementsByTagName("Error").length &gt; 0) &amp;&amp; 
		xml.getElementsByTagName("Error")[0].firstChild.firstChild.nodeValue == "AWS.ECommerceService.ItemNotEligibleForCart") {
		//The product is not elegible
		message.data.message = "The product is not eligible to be added to the cart";
	} else {
		//If the product is added to the cart,
		//tell it to the user	
		if (xml.getElementsByTagName("IsValid")[0].firstChild.nodeValue == "True") {
			message.data.message = "Product added to the shopping Cart";
		} else { 
			message.data.message = "Error adding the product to the cart";
		}
	}
	this.manageData(["message"], [message], []);
},

onError: function (transport){}
    
});
    </field>
    </object>
    <object pk="19" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">19</field>
        <field type="TextField" name="code">var BB19 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    addToCart: function (offer, cart){
	if (cart) {//If the cart is already created, it will have an ID in the User Fact
		var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
		//Add the operation Type
		url +="&amp;Operation=CartAdd";
		//Add the current version of the API
		url += "&amp;Version=2008-06-26";
		//Add item ID
		url += "&amp;CartId=" + cart.data.id;
		url += "&amp;HMAC=" + cart.data.HMAC;
		url += "&amp;Item.1.OfferListingId=" + offer.data.offerId;
		url += "&amp;Item.1.Quantity=" + 1;
		
		var encoder = new URLAmazonEncoder();
		url = encoder.encode(url);
		
		//Invoke the service
    	new FastAPI.Request(url,{
            'method':       'get',
            'content':      'xml',
            'context':      this,
            'onSuccess':    this.productAdded.bind(this)
        });
	} else { //Cart doesn't exist: Create a new cart with the product
		var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
		//Add the operation Type
		url +="&amp;Operation=CartCreate";
		//Add the current version of the API
		url += "&amp;Version=2008-06-26";
		//Add item ID
		url += "&amp;Item.1.OfferListingId=" + offer.data.offerId;
		url += "&amp;Item.1.Quantity=" + 1;
		
		var encoder = new URLAmazonEncoder();
		url = encoder.encode(url);
		
		//Invoke the service
    	new FastAPI.Request(url,{
            'method':       'get',
            'content':      'xml',
            'context':      this,
            'onSuccess':    this.cartCreated.bind(this)
        });
	}
},

cartCreated: function (transport){
	var xml = transport;
	//The product is added to the cart,
	//tell it to the user
	if (xml.getElementsByTagName("IsValid")[0].firstChild.nodeValue == "True") {
		//Check if the product is eligible for shopping
		if ((xml.getElementsByTagName("Error").length &gt; 0) &amp;&amp; 
			xml.getElementsByTagName("Error")[0].firstChild.firstChild.nodeValue == "AWS.ECommerceService.ItemNotEligibleForCart"){
			//The product is not elegible
			var message = {id: "message", data:{message: "The product is not eligible to be added to the cart"}};
			this.manageData(["message"], [message], []);
			return;
		}
		//Add the Cart ID to the KB
		var message = {id: "message", data:{message: "Product added to the shopping Cart"}};
		var cart = {id: 'cart',
					data:{id: xml.getElementsByTagName("CartId")[0].firstChild.nodeValue,
					HMAC: xml.getElementsByTagName("URLEncodedHMAC")[0].firstChild.nodeValue}};
		this.manageData(["message"], [cart, message], []);
	} else {
		var message = {id: "message", data:{message: "Error adding the product to the cart"}};
		this.manageData(["message"], [message], []);
    }
},

productAdded: function (transport){
	var xml = transport;
	var message = {id: "message", data:{message: ""}};
	
	//Check if the product is eligible for shopping
	if ((xml.getElementsByTagName("Error").length &gt; 0) &amp;&amp; 
		xml.getElementsByTagName("Error")[0].firstChild.firstChild.nodeValue == "AWS.ECommerceService.ItemNotEligibleForCart"){
		//The product is not elegible
		message.data.message = "The product is not eligible to be added to the cart";
	} else {
		//If the product is added to the cart,
		//tell it to the user
		if (xml.getElementsByTagName("IsValid")[0].firstChild.nodeValue == "True") {
			message.data.message = "Product added to the shopping Cart";
		} else {
			message.data.message = "Error adding the product to the cart";
		}
	}
	this.manageData(["message"], [message], []);
},

onError: function (transport){}
    
});
    </field>
    </object>
    <object pk="20" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">20</field>
        <field type="TextField" name="code">var BB20 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    clearService: function (cart){
	//Ask the user to confirm the operation
	if (confirm("Are you sure you want to empty your Shopping Cart?")) {
		//Create the call
		var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
		//Add the AccessKeyId (get from the user fact)
		//Add the operation Type
		url +="&amp;Operation=CartClear";
		//Add the current version of the API
		url += "&amp;Version=2008-06-26";
		//Add item ID
		url += "&amp;CartId=" + cart.data.id;
		url += "&amp;HMAC=" + cart.data.HMAC;
		
		var encoder = new URLAmazonEncoder();
		url = encoder.encode(url);
		
		//Invoke the service 	
       	new FastAPI.Request(url,{
            'method':       'get',
            'content':      'xml',
            'context':      this,
            'onSuccess':    this.clear.bind(this)
        });
	}	
},

clear: function (){
	this.manageData(["cartCleared"], [],["purchase"]);	
},

onError: function (transport){}
    
});
    </field>
    </object>
    <object pk="21" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">21</field>
        <field type="TextField" name="code">var BB21 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    searchProduct: function (item){
	//Base URL of the REST Service
	var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
	//Add the operation Type
	url +="&amp;Operation=ItemLookup";
	//Add the responseGroup
	url +="&amp;ResponseGroup=Medium";
	//Add the current version of the API
	url += "&amp;Version=2008-06-26";
	//Add item ID
	url += "&amp;ItemId=" + item.data.ASIN;
	
	var encoder = new URLAmazonEncoder();
	url = encoder.encode(url);

	//Invoke the service
	new FastAPI.Request(url,{
        'method':       'get',
        'content':      'xml',
        'context':      this,
        'onSuccess':    this.fetchProductInfo.bind(this)
    });
},

fetchProductInfo: function (transport){
	var xml = transport;
	var item = xml.getElementsByTagName("Item")[0];
	if (item.getElementsByTagName("Title").length &gt; 0) {
		var title = item.getElementsByTagName("Title")[0].firstChild.nodeValue;
	}
	if (item.getElementsByTagName("FormattedPrice").length &gt; 0) {
        var price = item.getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;
	}
	if (item.getElementsByTagName("ProductGroup").length &gt; 0) {
        var pGroup = item.getElementsByTagName("ProductGroup")[0].firstChild.nodeValue;
	}
    if (item.getElementsByTagName("DetailPageURL").length &gt; 0) {
        var url = item.getElementsByTagName("DetailPageURL")[0].firstChild.nodeValue;
    }
    if (item.getElementsByTagName("MediumImage").length &gt; 0) {
        var image = item.getElementsByTagName("MediumImage")[0].getElementsByTagName("URL")[0].firstChild.nodeValue;
    }
    var _product = {
		id: "product",
		data:{title: title,
			price: price,
			item: item,
			pGroup: pGroup,
			url: url,
			image: image}
	};

    this.manageData(["newProduct"], [_product], []);	
},

onError: function (transport){}
    
});
    </field>
    </object>
    <object pk="22" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">22</field>
        <field type="TextField" name="code">var BB22 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    fetch: function (item){
	//Get the facts to invoke the service
    //Add the ItemSearch parameters
    var parameters = "";
	parameters += "&amp;ItemId=" + item.data.ASIN;
	parameters += "&amp;MerchantId=All&amp;Condition=All";
    
	//Base URL of the REST Service
	var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
	//Add the operation Type
	url +="&amp;Operation=ItemLookup";
	//Add the parameters
	url += parameters;
	//Add the responseGroup
	url +="&amp;ResponseGroup=OfferFull";
	//Add the current version of the API
	url += "&amp;Version=2008-06-26";
	
	var encoder = new URLAmazonEncoder();
	url = encoder.encode(url);

	//Invoke the service
    new FastAPI.Request(url,{
        'method':       'get',
        'content':      'xml',
        'context':      this,
        'onSuccess':    this.addToList.bind(this)
    });
},

addToList: function (transport){
	var l = {id: 'list', data:{productList: new Array(), currentPage: 0}};
    var xml = transport;
    //Check if the service returned an error
    if (xml.getElementsByTagName("IsValid")[0].childNodes[0].nodeValue == "False") {
    	var message = {id: "message", data:{message: xml.getElementsByTagName("Message")[0].childNodes[0].nodeValue}};
    	this.manageData(["message"], [message], []);
    } else { //Correct response, create the result List
        var comparativelist = xml.getElementsByTagName("Offers")[0].getElementsByTagName("Offer");
        //Fill the table, 1 row per item
        for(var i=0; i &lt; comparativelist.length; i++){
            var offer = comparativelist[i];
            if (offer.getElementsByTagName("Name").length &gt; 0) { 
                var sellerName = offer.getElementsByTagName("Name")[0].firstChild.nodeValue;
            } else {
				if (offer.getElementsByTagName("Nickname").length &gt; 0) {
			    	var sellerName = offer.getElementsByTagName("Nickname")[0].firstChild.nodeValue;
				} else {
					var sellerName = "&amp;nbsp;";
				}
            }
            if (offer.getElementsByTagName("SellerId").length &gt; 0) {
                var sellerId = offer.getElementsByTagName("SellerId")[0].firstChild.nodeValue;
            } else {
			    var sellerId = "none";
            }
            if (offer.getElementsByTagName("AverageFeedbackRating").length &gt; 0) { 
                var averageRating = offer.getElementsByTagName("AverageFeedbackRating")[0].firstChild.nodeValue;
            } else {
			    var averageRating = "&amp;nbsp;";
            }
            if (offer.getElementsByTagName("TotalFeedback").length &gt; 0) { 
                var totalFeedback = offer.getElementsByTagName("TotalFeedback")[0].firstChild.nodeValue;
            } else {
			    var totalFeedback = "&amp;nbsp;";
            }
            if (offer.getElementsByTagName("Condition").length &gt; 0) {
				var condition = offer.getElementsByTagName("Condition")[0].firstChild.nodeValue;             
            } else {
			    var condition = "&amp;nbsp;";
            }
            if (offer.getElementsByTagName("ConditionNote").length &gt; 0) {
				var conditionNote = "(" + offer.getElementsByTagName("ConditionNote")[0].firstChild.nodeValue + ")";             
            } else {
			    var conditionNote = "&amp;nbsp;";
            }
            if (offer.getElementsByTagName("OfferListingId").length &gt; 0) {
				var offerId = offer.getElementsByTagName("OfferListingId")[0].firstChild.nodeValue;             
            } else {
			    var offerId = "";
            }
            if (offer.getElementsByTagName("Price").length &gt; 0) {
				var price = offer.getElementsByTagName("Price")[0].getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;             
            } else {
			    var price = "";
            }
            if (offer.getElementsByTagName("AmountSaved").length &gt; 0) {
				var amountSaved = offer.getElementsByTagName("AmountSaved")[0].getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;             
            } else {
			    var amountSaved = "";
            }
            if (offer.getElementsByTagName("PercentageSaved").length &gt; 0) {
				var percentageSaved = offer.getElementsByTagName("PercentageSaved")[0].firstChild.nodeValue;             
            } else {
			    var percentageSaved = "&amp;nbsp;";
            }
            if (offer.getElementsByTagName("Availability").length &gt; 0) {
				var availability = offer.getElementsByTagName("Availability")[0].firstChild.nodeValue;
            } else {
			    var availability = "&amp;nbsp;";
            }
            var row = {
                sellerName: sellerName,
                sellerId: sellerId,
                location: location,
                averageRating: averageRating,
				totalFeedback: totalFeedback,
				condition: condition,
				conditionNote: conditionNote,
				offerId: offerId,
				price: price,
				amountSaved: amountSaved,
				percentageSaved: percentageSaved,
				availability: availability
            };
            l.data.productList.push(row);
	    }
        this.manageData(["productList"], [l], []);
    }
},

onError: function (transport){}
    
});
    </field>
    </object>
    <object pk="23" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">23</field>
        <field type="TextField" name="code">var BB23 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    fetch: function (cart){
    //Get the facts to invoke the service
    //TODO add error handling
    //Invoke the service CartGet to retrieve the product list
    var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
	//Add the operation Type
	url +="&amp;Operation=CartGet";
	//Add the current version of the API
	url += "&amp;Version=2008-06-26";
	//Add item ID
	url += "&amp;CartId=" + cart.data.id;
	url += "&amp;HMAC=" + cart.data.HMAC;
	
	var encoder = new URLAmazonEncoder();
	url = encoder.encode(url);
	
	//Create the call
    new FastAPI.Request(url,{
        'method':       'get',
        'content':      'xml',
        'context':      this,
        'onSuccess':    this.addToList.bind(this)
    });
},

addToList: function (transport){
	var l = {id: "list", data:{productList: new Array(), subTotal: 0, itemTotal: 0, purchaseURL: null}};
    var xml = transport;
    //Check if the service returned an error
    if (xml.getElementsByTagName("IsValid")[0].childNodes[0].nodeValue == "False") {
    	var message = {id: "message", data:{message: xml.getElementsByTagName("Message")[0].childNodes[0].nodeValue}};
    	this.manageData(null, [message], []);
    } else { //Correct response, create the result List
    	if (xml.getElementsByTagName("CartItems").length &gt; 0) { //There are products in the cart
			var list = xml.getElementsByTagName("CartItems")[0].getElementsByTagName("CartItem");
			//Fill the table, 1 row per item
			$A(list).each(function(item){
				if (item.getElementsByTagName("Title").length &gt; 0) {
					var title = item.getElementsByTagName("Title")[0].firstChild.nodeValue;
				}
				if (item.getElementsByTagName("ASIN").length &gt; 0) {
					var ASIN = item.getElementsByTagName("ASIN")[0].firstChild.nodeValue;
				}
				if (item.getElementsByTagName("CartItemId").length &gt; 0) {
					var ID = item.getElementsByTagName("CartItemId")[0].firstChild.nodeValue;
				}
				if (item.getElementsByTagName("Price").length &gt; 0) {
					var price = item.getElementsByTagName("Price")[0].getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;
				}
				if (item.getElementsByTagName("Quantity").length &gt; 0) {
					var quantity = item.getElementsByTagName("Quantity")[0].firstChild.nodeValue;
				}
				var row = {
					title: title,
					price: price,
					ASIN: ASIN,
					id: ID,
					quantity: quantity
				};
				l.data.itemTotal += parseInt (quantity);
				l.data.productList.push(row);
			});
		}
		if (xml.getElementsByTagName("SubTotal").length&gt;0) {
			l.data.subTotal = xml.getElementsByTagName("SubTotal")[0].getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;
		} else {
			l.data.subTotal = "$0.0";
		}
		if (xml.getElementsByTagName("PurchaseURL").length&gt;0) {
			l.data.purchaseURL = xml.getElementsByTagName("PurchaseURL")[0].firstChild.nodeValue;
		}
		this.manageData(["list"], [l], []);
    }
},

onError: function (transport){}
    
});
    </field>
    </object>
    <object pk="24" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">24</field>
        <field type="TextField" name="code">var BB24 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    search: function (filter){
	//Add the ItemSearch parameters
    var productType = filter.data.productType;
    if (!productType) {
        productType = 'All'
    }
    if (!filter.data.currentPage) {
    	filter.data.currentPage = 1;
    }
    var parameters = "";
    parameters += "&amp;SearchIndex=" + productType;
    parameters += "&amp;Keywords=" + encodeURIComponent(filter.data.searchText);
    //Add the page number (if is set)
    parameters += "&amp;ItemPage=" + (filter.data.currentPage);
    //Base URL of the REST Service
    var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
    //Add the operation Type
    url +="&amp;Operation=ItemSearch";
    //Add the parameters
    url += parameters;
    //Add the responseGroup
    url +="&amp;ResponseGroup=Medium";
    //Add the current version of the API
    url += "&amp;Version=2008-06-26";
    
    var encoder = new URLAmazonEncoder();
    encodedUrl = encoder.encode(url);
    
    //Invoke the service
    new FastAPI.Request(encodedUrl,{
        'method':       'get',
        'content':      'xml',
        'context':      this,
        'onSuccess':    this.addToList.bind(this)
    });
},

addToList: function (transport){
	var l = {id: 'list', data: {productList: new Array(), currentPage: 1, totalResults: 0, totalPages: 0}};
	var xml = transport;
    //Check if the service returned an error
    if (xml.getElementsByTagName("IsValid")[0].childNodes[0].nodeValue == "False") {
        var message = {id: 'message', data:{message: xml.getElementsByTagName("Message")[0].childNodes[0].nodeValue}};
        this.manageData(["message"], [message],[]);
    } else {
        //Correct response, create the result List
        var _list = xml.getElementsByTagName("Items")[0].getElementsByTagName("Item");
        //Fill the table, 1 row per item
        $A(_list).each(function(item){
            if (item.getElementsByTagName("Title").length &gt; 0) {
                var title = item.getElementsByTagName("Title")[0].firstChild.nodeValue;
            } else {
                var title = "&amp;nbsp;";
            }
            if (item.getElementsByTagName("FormattedPrice").length &gt; 0) {
                var price = item.getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;
            } else {
                var price = "&amp;nbsp;";
            }
            if (item.getElementsByTagName("ProductGroup").length &gt; 0) {
                var pGroup = item.getElementsByTagName("ProductGroup")[0].firstChild.nodeValue;
            } else {
                var pGroup = "&amp;nbsp;";
            }
            if (item.getElementsByTagName("ASIN").length &gt; 0) {
                var ASIN = item.getElementsByTagName("ASIN")[0].firstChild.nodeValue;
            }
            var row = {
                title: title,
                price: price,
                pGroup: pGroup,
                ASIN: ASIN
            };
            l.data.productList.push(row);
        });
        
        l.data.totalPages = parseInt(xml.getElementsByTagName("TotalPages")[0].firstChild.nodeValue);
        l.data.totalResults = parseInt(xml.getElementsByTagName("TotalResults")[0].firstChild.nodeValue);
        if (l.data.totalPages &lt; 0) {
        	l.data.totalPages = 0;
        }
        l.data.currentPage = parseInt(xml.getElementsByTagName("ItemPage")[0].childNodes[0].nodeValue);
        l.data.searchText = xml.getElementsByTagName("Keywords")[0].childNodes[0].nodeValue;
        l.data.productType = xml.getElementsByTagName("SearchIndex")[0].childNodes[0].nodeValue;
        this.manageData(["itemList"], [l], []);
    }
},

onError: function (transport){}
    
});
    </field>
    </object>
    <object pk="25" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">25</field>
        <field type="TextField" name="code">var BB25 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    fetch: function (item){
	//Add the ItemSearch parameters
    var parameters = "";
	parameters += "&amp;ItemId=" + item.data.ASIN;
    
    //Base URL of the REST Service
	var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
	//Add the operation Type
	url +="&amp;Operation=SimilarityLookup";
	//Add the parameters
	url += parameters;
	//Add the responseGroup
	url +="&amp;ResponseGroup=Medium";
	//Add the current version of the API
	url += "&amp;Version=2008-06-26";
	
	var encoder = new URLAmazonEncoder();
	url = encoder.encode(url);

	//Invoke the service
    new FastAPI.Request(url,{
        'method':       'get',
        'content':      'xml',
        'context':      this,
        'onSuccess':    this.addToList.bind(this)
    });
},

addToList: function (transport){
	var suggestionList = {id: 'list', data:{productList: new Array(), currentPage: 0}};
    var xml = transport;
    //Check if the service returned an error
    if (xml.getElementsByTagName("IsValid")[0].childNodes[0].nodeValue == "False") {
    	var message = {id: "message", data:{message: xml.getElementsByTagName("Message")[0].childNodes[0].nodeValue}};
    	this.manageData(["message"], [message], []);
    }
    else { //Correct response, create the result List
        var suggestionlist = xml.getElementsByTagName("Items")[0].getElementsByTagName("Item");
        //Fill the table, 1 row per item
        for(var i=0; i &lt; suggestionlist.length;i++){
            var item = suggestionlist[i];
            if (item.getElementsByTagName("Title").length &gt; 0) {
                var title = item.getElementsByTagName("Title")[0].firstChild.nodeValue;
            } else {
			    var title = "&amp;nbsp;";
            }
            if (item.getElementsByTagName("FormattedPrice").length &gt; 0) {
                var price = item.getElementsByTagName("FormattedPrice")[0].firstChild.nodeValue;
            } else {
			    var price = "&amp;nbsp;";
            }
            if (item.getElementsByTagName("ProductGroup").length &gt; 0) {
                var pGroup = item.getElementsByTagName("ProductGroup")[0].firstChild.nodeValue;
            } else {
			    var pGroup = "&amp;nbsp;";
            }
            if (item.getElementsByTagName("ASIN").length &gt; 0) { 
                var ASIN = item.getElementsByTagName("ASIN")[0].firstChild.nodeValue;
            }
            var row = {
                title: title,
                price: price,
                pGroup: pGroup,
                ASIN: ASIN
            };
            suggestionList.data.productList.push(row);
        }
        this.manageData(["suggestionList"], [suggestionList], []);
    }
},

onError: function (transport){}
    
});
    </field>
    </object>
    <object pk="26" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">26</field>
        <field type="TextField" name="code">var BB26 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    updateService: function (cart, update){
	//Create the call
	var url = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService";
	//Add the operation Type
	url +="&amp;Operation=CartModify";
	//Add the current version of the API
	url += "&amp;Version=2008-06-26";
	//Add item ID
	url += "&amp;CartId=" + cart.data.id;
	url += "&amp;HMAC=" + cart.data.HMAC;
	//Build the parameter list
	for (var i=0; i &lt; update.data.list.length; i++){
		url += "&amp;Item." + (i+1) + ".CartItemId=" + update.data.list[i]["id"];
		url += "&amp;Item." + (i+1) + ".Quantity=" + update.data.list[i]["quantity"];
	}
	
	var encoder = new URLAmazonEncoder();
	url = encoder.encode(url);
	
	//Create the call
   	new FastAPI.Request(url,{
        'method':       'get',
        'content':      'xml',
        'context':      this,
        'onSuccess':    this.update.bind(this)
    });
},

update: function (){
	this.manageData(["cartUpdated"], [],["purchase"]);
},

onError: function (transport){}
    
});
    </field>
    </object>
    <object pk="27" model="buildingblock.buildingblockcode">
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">27</field>
        <field type="TextField" name="code">var BB27 = Class.create(BuildingBlock,{
    /** @constructs */
    initialize: function($super, screenId, buildingBlockId){
		$super(screenId, buildingBlockId);
    },
    
    manageData: function(triggers, addedFacts, deletedFacts){
    	ScreenEngineFactory.getInstance(this.screenId).manageData(triggers, addedFacts, deletedFacts, this.buildingBlockId);
    },
    
    fetch: function (filter){
	//URL of the Service
	var url = "http://open.api.ebay.com/shopping?";
	url += "&amp;callname=FindItemsAdvanced";
	url += "&amp;ItemSort=BestMatch";
	url += "&amp;version=515";
	url += "&amp;responseencoding=XML";
	url += "&amp;appid=eBayAPID-73f4-45f2-b9a3-c8f6388b38d8";
	url += "&amp;callback=true";
	url += "&amp;MaxEntries=" + filter.data.maxEntries;
	url += "&amp;PageNumber=" + filter.data.currentPage;
	url += "&amp;QueryKeywords=" + escape(filter.data.keywords.replace(/ /g,"+"));

	//Invoke the service
    new FastAPI.Request(url,{
        'method':       'get',
        'content':      'xml',
        'context':      this,
        'onSuccess':    function (transport){this.addToList(transport, filter)}.bind(this)
    });
},

addToList: function (transport, filter){
	var eBayList = {id: 'list', data:{productList: new Array()}};
	var xml = transport;
    var items = xml.getElementsByTagName("Item");
    //Fill the table, 1 row per item
    $A(items).each(function(item){
         if (item.getElementsByTagName("ItemID").length &gt; 0) {
         	var itemID = item.getElementsByTagName("ItemID")[0].firstChild.nodeValue;
         } else {
			var itemID = "&amp;nbsp;";
         }
         if (item.getElementsByTagName("Title").length &gt; 0) {
         	var title = item.getElementsByTagName("Title")[0].firstChild.nodeValue;
		 } else {
			var title = "&amp;nbsp;";
		 }
		 if (item.getElementsByTagName("PrimaryCategoryName").length &gt; 0) {
         	var category = item.getElementsByTagName("PrimaryCategoryName")[0].firstChild.nodeValue;
		 } else {
			var category = "&amp;nbsp;";
		 }
		 if (item.getElementsByTagName("ConvertedCurrentPrice").length &gt; 0) {
         	var currentPrice = '$' + item.getElementsByTagName("ConvertedCurrentPrice")[0].firstChild.nodeValue;
		 } else {
			var currentPrice = "&amp;nbsp;";
		 }
		 if (item.getElementsByTagName("ShippingServiceCost").length &gt; 0) {
         	var shippingServiceCost = '$' + item.getElementsByTagName("ShippingServiceCost")[0].firstChild.nodeValue;
		 } else {
			var shippingServiceCost = "&amp;nbsp;";
		 }
		 if (item.getElementsByTagName("GalleryURL").length &gt; 0) {
             var image = item.getElementsByTagName("GalleryURL")[0].firstChild.nodeValue;
		 } else {
         	var image = "";
		 }
		 var row = {
         	 itemID: itemID,
             title:  title.replace(/\x27/g,"`"),
             category: category,
             currentPrice: currentPrice,
             shippingServiceCost: shippingServiceCost,
             image: image
         };
         eBayList.data.productList.push(row);
     });
     if (xml.getElementsByTagName("TotalPages").length &gt; 0) {
        eBayList.data.totalPages = xml.getElementsByTagName("TotalPages")[0].firstChild.nodeValue;
     } else {
		eBayList.data.totalPages = 0;
     }
     if (xml.getElementsByTagName("PageNumber").length &gt; 0) {
         eBayList.data.currentPage = xml.getElementsByTagName("PageNumber")[0].firstChild.nodeValue;
     } else {
		eBayList.data.currentPage = 0;
     }
     eBayList.data.keywords = filter.data.keywords;
     eBayList.data.maxEntries = filter.data.maxEntries;
     this.manageData(["productList"], [eBayList], []);
},

onError: function (transport){}
    
});
    </field>
    </object>
    <object pk="1" model="buildingblock.tag">
        <field type="CharField" name="name">scratch</field>
    </object>
    <object pk="2" model="buildingblock.tag">
        <field type="CharField" name="name">amazon</field>
    </object>
    <object pk="3" model="buildingblock.tag">
        <field type="CharField" name="name">list</field>
    </object>
    <object pk="4" model="buildingblock.tag">
        <field type="CharField" name="name">order</field>
    </object>
    <object pk="5" model="buildingblock.tag">
        <field type="CharField" name="name">purchase</field>
    </object>
    <object pk="6" model="buildingblock.tag">
        <field type="CharField" name="name">suggestion</field>
    </object>
    <object pk="7" model="buildingblock.tag">
        <field type="CharField" name="name">price comparative</field>
    </object>
    <object pk="8" model="buildingblock.tag">
        <field type="CharField" name="name">details</field>
    </object>
    <object pk="9" model="buildingblock.tag">
        <field type="CharField" name="name">product</field>
    </object>
    <object pk="10" model="buildingblock.tag">
        <field type="CharField" name="name">search</field>
    </object>
    <object pk="11" model="buildingblock.tag">
        <field type="CharField" name="name">cart</field>
    </object>
    <object pk="12" model="buildingblock.tag">
        <field type="CharField" name="name">ebay</field>
    </object>
    <object pk="13" model="buildingblock.tag">
        <field type="CharField" name="name">filter</field>
    </object>
    <object pk="14" model="buildingblock.tag">
        <field type="CharField" name="name">shopping</field>
    </object>
    <object pk="15" model="buildingblock.tag">
        <field type="CharField" name="name">offer</field>
    </object>
    <object pk="16" model="buildingblock.tag">
        <field type="CharField" name="name">price</field>
    </object>
    <object pk="17" model="buildingblock.tag">
        <field type="CharField" name="name">comparative</field>
    </object>
    <object pk="1" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">1</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">1</field>
    </object>
    <object pk="2" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">1</field>
    </object>
    <object pk="3" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">1</field>
    </object>
    <object pk="4" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">1</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">2</field>
    </object>
    <object pk="5" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">2</field>
    </object>
    <object pk="6" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">4</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">2</field>
    </object>
    <object pk="7" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">5</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">2</field>
    </object>
    <object pk="8" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">1</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">3</field>
    </object>
    <object pk="9" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">3</field>
    </object>
    <object pk="10" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">3</field>
    </object>
    <object pk="11" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">6</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">3</field>
    </object>
    <object pk="12" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">7</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">3</field>
    </object>
    <object pk="13" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">1</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">4</field>
    </object>
    <object pk="14" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">4</field>
    </object>
    <object pk="15" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">8</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">4</field>
    </object>
    <object pk="16" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">9</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">4</field>
    </object>
    <object pk="17" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">1</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">5</field>
    </object>
    <object pk="18" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">5</field>
    </object>
    <object pk="19" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">10</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">5</field>
    </object>
    <object pk="20" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">1</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">6</field>
    </object>
    <object pk="21" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">6</field>
    </object>
    <object pk="22" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">11</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">6</field>
    </object>
    <object pk="23" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">1</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">7</field>
    </object>
    <object pk="24" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">7</field>
    </object>
    <object pk="25" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">7</field>
    </object>
    <object pk="26" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">6</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">7</field>
    </object>
    <object pk="27" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">1</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">8</field>
    </object>
    <object pk="28" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">12</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">8</field>
    </object>
    <object pk="29" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">8</field>
    </object>
    <object pk="30" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">9</field>
    </object>
    <object pk="31" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">9</field>
    </object>
    <object pk="32" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">10</field>
    </object>
    <object pk="33" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">4</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">10</field>
    </object>
    <object pk="34" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">5</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">10</field>
    </object>
    <object pk="35" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">11</field>
    </object>
    <object pk="36" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">11</field>
    </object>
    <object pk="37" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">6</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">11</field>
    </object>
    <object pk="38" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">7</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">11</field>
    </object>
    <object pk="39" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">12</field>
    </object>
    <object pk="40" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">8</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">12</field>
    </object>
    <object pk="41" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">9</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">12</field>
    </object>
    <object pk="42" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">13</field>
    </object>
    <object pk="43" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">10</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">13</field>
    </object>
    <object pk="44" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">14</field>
    </object>
    <object pk="45" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">11</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">14</field>
    </object>
    <object pk="46" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">15</field>
    </object>
    <object pk="47" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">15</field>
    </object>
    <object pk="48" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">6</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">15</field>
    </object>
    <object pk="49" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">12</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">16</field>
    </object>
    <object pk="50" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">16</field>
    </object>
    <object pk="51" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">12</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">17</field>
    </object>
    <object pk="52" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">17</field>
    </object>
    <object pk="53" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">13</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">17</field>
    </object>
    <object pk="54" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">18</field>
    </object>
    <object pk="55" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">14</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">18</field>
    </object>
    <object pk="56" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">11</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">18</field>
    </object>
    <object pk="57" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">19</field>
    </object>
    <object pk="58" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">14</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">19</field>
    </object>
    <object pk="59" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">11</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">19</field>
    </object>
    <object pk="60" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">15</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">19</field>
    </object>
    <object pk="61" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">20</field>
    </object>
    <object pk="62" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">14</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">20</field>
    </object>
    <object pk="63" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">11</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">20</field>
    </object>
    <object pk="64" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">21</field>
    </object>
    <object pk="65" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">9</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">21</field>
    </object>
    <object pk="66" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">22</field>
    </object>
    <object pk="67" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">16</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">22</field>
    </object>
    <object pk="68" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">17</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">22</field>
    </object>
    <object pk="69" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">23</field>
    </object>
    <object pk="70" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">14</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">23</field>
    </object>
    <object pk="71" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">11</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">23</field>
    </object>
    <object pk="72" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">24</field>
    </object>
    <object pk="73" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">24</field>
    </object>
    <object pk="74" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">25</field>
    </object>
    <object pk="75" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">25</field>
    </object>
    <object pk="76" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">6</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">25</field>
    </object>
    <object pk="77" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">2</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">26</field>
    </object>
    <object pk="78" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">14</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">26</field>
    </object>
    <object pk="79" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">11</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">26</field>
    </object>
    <object pk="80" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">12</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">27</field>
    </object>
    <object pk="81" model="buildingblock.usertag">
        <field to="buildingblock.tag" name="tag" rel="ManyToOneRel">3</field>
        <field to="auth.user" name="user" rel="ManyToOneRel">1</field>
        <field to="buildingblock.buildingblock" name="buildingBlock" rel="ManyToOneRel">27</field>
    </object>
</django-objects>
