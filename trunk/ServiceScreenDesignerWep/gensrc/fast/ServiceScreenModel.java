/*
 * GWT compliant generated by Fujaba - CodeGen2 version 25.3.2009
 */

package fast;

// GWT: de.upb.tools.pcs.PropertyChangeClient

import fujaba.web.runtime.client.*;
// GWT: java.beans.PropertyChangeSupport

// GWT: java.beans.PropertyChangeListener

// GWT: fujaba.web.runtime.client.ModelRootEventListener

import fujaba.web.runtime.client.ModelRootEventListener;
// GWT: fujaba.web.runtime.client.CObject

import fujaba.web.runtime.client.CObject;
import fujaba.web.runtime.client.reflect.*;
import fujaba.web.runtime.client.*;
import java.util.Iterator;

public class ServiceScreenModel extends CObject implements PropertyChangeClient, ModelRootEventListener
{
	// retrieve all class names
	public void registerModelRoot ()
	{
		CClass cclass;
		CAttribute cattr;
		CAssoc cassoc;
		
		ModelRoot.get().addEventListener(this);


		/*********************************
		Generate CClass fast.FastObject
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.FastObject");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		// add methods
			


		/*********************************
		Generate CClass fast.ServiceScreenModel
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.ServiceScreenModel");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		// add methods
			


		/***********************************
		Add Code for Subclasses
		***********************************/
			/*********************************
		Generate CClass fast.FactPort
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.FactPort");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
        cattr = new CAttribute();
        cattr.setName ("name");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
        cattr = new CAttribute();
        cattr.setName ("uri");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
        cattr = new CAttribute();
        cattr.setName ("exampleValue");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
        cattr = new CAttribute();
        cattr.setName ("factType");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
		// add methods
			

			/*********************************
		Generate CClass fast.ServiceScreen
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.ServiceScreen");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
        cattr = new CAttribute();
        cattr.setName ("name");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
        cattr = new CAttribute();
        cattr.setName ("uri");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
        cattr = new CAttribute();
        cattr.setName ("requestTemplate");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
		// add methods
			

			/*********************************
		Generate CClass fast.FASTMappingRule
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.FASTMappingRule");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
        cattr = new CAttribute();
        cattr.setName ("sourceTagname");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
        cattr = new CAttribute();
        cattr.setName ("targetElemName");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
        cattr = new CAttribute();
        cattr.setName ("kind");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
		// add methods
			

			/*********************************
		Generate CClass fast.ServiceDesigner
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.ServiceDesigner");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		// add methods
			

			/*********************************
		Generate CClass fast.FactAttribute
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.FactAttribute");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
        cattr = new CAttribute();
        cattr.setName ("attrName");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
		// add methods
			

			/*********************************
		Generate CClass fast.FactType
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.FactType");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
        cattr = new CAttribute();
        cattr.setName ("typeName");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
		// add methods
			

			/*********************************
		Generate CClass fast.TemplateParameter
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.TemplateParameter");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
        cattr = new CAttribute();
        cattr.setName ("name");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
        cattr = new CAttribute();
        cattr.setName ("value");
		cattr.setType("String");
        cclass.addToCAttributes (cattr); 
        
		// add methods
			


		/***********************************
		Add Code for SubSubclasses
		***********************************/



		/***********************************
		Add CAssocs, CRoles and CCardinality
		***********************************/
		CRole crole = null;
		CRole rightRole = null;
		Iterator iter = null;
		CCardinality ccardinality = null;
		int upperBound = -1;
		CClass tClass = null;
		 
		/**************************************************
		Add CAssocs, CRoles and CCardinality for SubClasses
		**************************************************/
			
		
			
		crole = new CRole();
		crole.setName("serviceScreen");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("preconditions");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.ServiceScreen");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("preconditions");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.FactPort")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("serviceScreen2");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("postconditions");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.ServiceScreen");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("postconditions");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.FactPort")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("serviceScreen");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("mappingRules");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.ServiceScreen");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("mappingRules");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.FASTMappingRule")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		
		crole = new CRole();
		crole.setName("serviceScreen");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("templateParameters");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.ServiceScreen");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("templateParameters");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.TemplateParameter")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
			
		
		crole = new CRole();
		crole.setName("parent");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("kids");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.FASTMappingRule");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("kids");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.FASTMappingRule")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
			
		crole = new CRole();
		crole.setName("serviceDesigner");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("screens");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.ServiceDesigner");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("screens");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.ServiceScreen")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("serviceDesigner");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("factTypes");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.ServiceDesigner");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("factTypes");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.FactType")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
			
			
		
		crole = new CRole();
		crole.setName("factType");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("factAttributes");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.FactType");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("factAttributes");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.FactAttribute")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
			
  
		/*****************************************************
		Add CAssocs, CRoles and CCardinality for SubSubClasses
		*****************************************************/
       	}

   // gwt class table for the creation of objects from class names
   public CObject createObject(String classname)
   {
      if ("fast.FastObject".equals(classname))
      {
         return new fast.FastObject();
      }
      else if ("fast.ServiceScreenModel".equals(classname))
      {
         return new fast.ServiceScreenModel();
      }
 	
      else if ("fast.FactPort".equals(classname))
      {
         return new fast.FactPort();
      }
      else if ("fast.ServiceScreen".equals(classname))
      {
         return new fast.ServiceScreen();
      }
      else if ("fast.FASTMappingRule".equals(classname))
      {
         return new fast.FASTMappingRule();
      }
      else if ("fast.ServiceDesigner".equals(classname))
      {
         return new fast.ServiceDesigner();
      }
      else if ("fast.FactAttribute".equals(classname))
      {
         return new fast.FactAttribute();
      }
      else if ("fast.FactType".equals(classname))
      {
         return new fast.FactType();
      }
      else if ("fast.TemplateParameter".equals(classname))
      {
         return new fast.TemplateParameter();
      }
  
             return null;
   }

   public void removeAllFrom(String className) {
   }
   
   /**
   Return ArrayList of all atrr names
   */
   public java.util.ArrayList arrayListOfAttrNames() {
   	java.util.ArrayList vec = new java.util.ArrayList();
   	
   	return vec;
   }

   // generic set and get methods
   public void set (String fieldName, Object value)
   {
   }

   public Object get (String fieldName)
   {
      return null;
   }
	protected final PropertyChangeSupport listeners = new PropertyChangeSupport(this);

	public void addPropertyChangeListener(PropertyChangeListener listener)
	{
		getPropertyChangeSupport().addPropertyChangeListener(listener);
	}

	public void removePropertyChangeListener(PropertyChangeListener listener)
	{
		getPropertyChangeSupport().removePropertyChangeListener(listener);
	}

	public void addPropertyChangeListener(String property, PropertyChangeListener listener)
	{
		getPropertyChangeSupport().addPropertyChangeListener(property, listener);
	}

	public void removePropertyChangeListener(String property, PropertyChangeListener listener)
	{
		getPropertyChangeSupport().removePropertyChangeListener(property, listener);
	}

	public PropertyChangeSupport getPropertyChangeSupport()
	{
		return listeners;
	}


   public void removeYou()
   {
   }
}


