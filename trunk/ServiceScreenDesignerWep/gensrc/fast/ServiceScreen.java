/*
 * GWT compliant generated by Fujaba - CodeGen2 version 25.3.2009
 */

package fast;

// GWT: fast.FASTMappingRule
// GWT: java.util.*

import java.util.*;
// GWT: de.upb.tools.fca.*

import fujaba.web.runtime.client.*;
// GWT: de.upb.tools.sdm.*

// GWT: fast.FactPort
// GWT: fast.ServiceDesigner
// GWT: fast.TemplateParameter
// GWT: fast.FastObject
import fujaba.web.runtime.client.reflect.*;
import fujaba.web.runtime.client.*;
import java.util.Iterator;

public class ServiceScreen extends FastObject
{

   public void removeAllFrom(String className) {
      if ("fast.FactPort".equals(className))
      {				
         removeAllFromPreconditions();
      }
      else      if ("fast.FactPort".equals(className))
      {				
         removeAllFromPostconditions();
      }
      else      if ("fast.FASTMappingRule".equals(className))
      {				
         removeAllFromMappingRules();
      }
      else      if ("fast.TemplateParameter".equals(className))
      {				
         removeAllFromTemplateParameters();
      }
   }
   
   /**
   Return ArrayList of all atrr names
   */
   public java.util.ArrayList arrayListOfAttrNames() {
   	java.util.ArrayList vec = new java.util.ArrayList();
   	vec.add("name");
   	vec.add("uri");
   	vec.add("requestTemplate");
   	
   	return vec;
   }

   // generic set and get methods
   public void set (String fieldName, Object value)
   {
      // name
      if ("name".equals(fieldName))
      {				
         setName((String) value);
      }
      else      // uri
      if ("uri".equals(fieldName))
      {				
         setUri((String) value);
      }
      else      // requestTemplate
      if ("requestTemplate".equals(fieldName))
      {				
         setRequestTemplate((String) value);
      }
      else      // preconditions
      if ("preconditions".equals(fieldName))
      {				
         addToPreconditions ((fast.FactPort) value);
      }
      else      // postconditions
      if ("postconditions".equals(fieldName))
      {				
         addToPostconditions ((fast.FactPort) value);
      }
      else      // mappingRules
      if ("mappingRules".equals(fieldName))
      {				
         addToMappingRules ((fast.FASTMappingRule) value);
      }
      else      // serviceDesigner
      if ("serviceDesigner".equals(fieldName))
      {				
         setServiceDesigner ((fast.ServiceDesigner) value);
      }
      else      // templateParameters
      if ("templateParameters".equals(fieldName))
      {				
         addToTemplateParameters ((fast.TemplateParameter) value);
      }
   }

   public Object get (String fieldName)
   {
      // name
      if ("name".equals(fieldName))
      {
         return (String) getName();
      }
      else      // uri
      if ("uri".equals(fieldName))
      {
         return (String) getUri();
      }
      else      // requestTemplate
      if ("requestTemplate".equals(fieldName))
      {
         return (String) getRequestTemplate();
      }
      else      if ("preconditions".equals(fieldName))
      {				
         return iteratorOfPreconditions();
      }
      else      if ("postconditions".equals(fieldName))
      {				
         return iteratorOfPostconditions();
      }
      else      if ("mappingRules".equals(fieldName))
      {				
         return iteratorOfMappingRules();
      }
      else      if ("serviceDesigner".equals(fieldName))
      {				
         return getServiceDesigner();
      }
      else      if ("templateParameters".equals(fieldName))
      {				
         return iteratorOfTemplateParameters();
      }
      return null;
   }

   /**
    * <pre>
    *           0..1     mappingRules     0..*
    * ServiceScreen ------------------------- FASTMappingRule
    *           serviceScreen               mappingRules
    * </pre>
    */
   public static final String PROPERTY_MAPPING_RULES = "mappingRules";

   private FPropHashSet mappingRules;

   public boolean addToMappingRules (FASTMappingRule value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.mappingRules == null)
         {
            this.mappingRules = new FPropHashSet (this, PROPERTY_MAPPING_RULES);

         }
      
         changed = this.mappingRules.add (value);
         if (changed)
         {
            value.setServiceScreen (this);
         }
      
      }
      return changed;
   }

   public ServiceScreen withMappingRules (FASTMappingRule value)
   {
      addToMappingRules (value);
      return this;
   }

   public ServiceScreen withoutMappingRules (FASTMappingRule value)
   {
      removeFromMappingRules (value);
      return this;
   }

   public boolean removeFromMappingRules (FASTMappingRule value)
   {
      boolean changed = false;

      if ((this.mappingRules != null) && (value != null))
      {
      
         changed = this.mappingRules.remove (value);
         if (changed)
         {
            value.setServiceScreen (null);
         }
      
      }
      return changed;
   }

   public void removeAllFromMappingRules ()
   {
   
      FASTMappingRule tmpValue;

      if (mappingRules != null) {
         java.util.Vector tempSet = new java.util.Vector(mappingRules);
         Iterator iter = tempSet.iterator ();
      
         while (iter.hasNext ())
         {
            tmpValue = (FASTMappingRule) iter.next ();
            this.removeFromMappingRules (tmpValue);
         }
      } 
   
   }

   public boolean hasInMappingRules (FASTMappingRule value)
   {
      return ((this.mappingRules != null) &&
              (value != null) &&
              this.mappingRules.contains (value));
   }

   public Iterator iteratorOfMappingRules ()
   {
      return ((this.mappingRules == null)
              ? FEmptyIterator.get ()
              : this.mappingRules.iterator ());
   }

   public int sizeOfMappingRules ()
   {
      return ((this.mappingRules == null)
              ? 0
              : this.mappingRules.size ());
   }

   public static final String PROPERTY_NAME = "name";

   private String name;

   public void setName (String value)
   {
      if ( ! JavaSDM.stringEquals (this.name, value))
      {
         String oldValue = this.name;
         this.name = value;
         getPropertyChangeSupport().firePropertyChange(PROPERTY_NAME, oldValue, value);
      }
   }

   public ServiceScreen withName (String value)
   {
      setName (value);
      return this;
   }

   public String getName ()
   {
      return this.name;
   }

   /**
    * <pre>
    *           0..1     postconditions     0..*
    * ServiceScreen ------------------------- FactPort
    *           serviceScreen2               postconditions
    * </pre>
    */
   public static final String PROPERTY_POSTCONDITIONS = "postconditions";

   private FPropHashSet postconditions;

   public boolean addToPostconditions (FactPort value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.postconditions == null)
         {
            this.postconditions = new FPropHashSet (this, PROPERTY_POSTCONDITIONS);

         }
      
         changed = this.postconditions.add (value);
         if (changed)
         {
            value.setServiceScreen2 (this);
         }
      
      }
      return changed;
   }

   public ServiceScreen withPostconditions (FactPort value)
   {
      addToPostconditions (value);
      return this;
   }

   public ServiceScreen withoutPostconditions (FactPort value)
   {
      removeFromPostconditions (value);
      return this;
   }

   public boolean removeFromPostconditions (FactPort value)
   {
      boolean changed = false;

      if ((this.postconditions != null) && (value != null))
      {
      
         changed = this.postconditions.remove (value);
         if (changed)
         {
            value.setServiceScreen2 (null);
         }
      
      }
      return changed;
   }

   public void removeAllFromPostconditions ()
   {
   
      FactPort tmpValue;

      if (postconditions != null) {
         java.util.Vector tempSet = new java.util.Vector(postconditions);
         Iterator iter = tempSet.iterator ();
      
         while (iter.hasNext ())
         {
            tmpValue = (FactPort) iter.next ();
            this.removeFromPostconditions (tmpValue);
         }
      } 
   
   }

   public boolean hasInPostconditions (FactPort value)
   {
      return ((this.postconditions != null) &&
              (value != null) &&
              this.postconditions.contains (value));
   }

   public Iterator iteratorOfPostconditions ()
   {
      return ((this.postconditions == null)
              ? FEmptyIterator.get ()
              : this.postconditions.iterator ());
   }

   public int sizeOfPostconditions ()
   {
      return ((this.postconditions == null)
              ? 0
              : this.postconditions.size ());
   }

   /**
    * <pre>
    *           0..1     preconditions     0..*
    * ServiceScreen ------------------------- FactPort
    *           serviceScreen               preconditions
    * </pre>
    */
   public static final String PROPERTY_PRECONDITIONS = "preconditions";

   private FPropHashSet preconditions;

   public boolean addToPreconditions (FactPort value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.preconditions == null)
         {
            this.preconditions = new FPropHashSet (this, PROPERTY_PRECONDITIONS);

         }
      
         changed = this.preconditions.add (value);
         if (changed)
         {
            value.setServiceScreen (this);
         }
      
      }
      return changed;
   }

   public ServiceScreen withPreconditions (FactPort value)
   {
      addToPreconditions (value);
      return this;
   }

   public ServiceScreen withoutPreconditions (FactPort value)
   {
      removeFromPreconditions (value);
      return this;
   }

   public boolean removeFromPreconditions (FactPort value)
   {
      boolean changed = false;

      if ((this.preconditions != null) && (value != null))
      {
      
         changed = this.preconditions.remove (value);
         if (changed)
         {
            value.setServiceScreen (null);
         }
      
      }
      return changed;
   }

   public void removeAllFromPreconditions ()
   {
   
      FactPort tmpValue;

      if (preconditions != null) {
         java.util.Vector tempSet = new java.util.Vector(preconditions);
         Iterator iter = tempSet.iterator ();
      
         while (iter.hasNext ())
         {
            tmpValue = (FactPort) iter.next ();
            this.removeFromPreconditions (tmpValue);
         }
      } 
   
   }

   public boolean hasInPreconditions (FactPort value)
   {
      return ((this.preconditions != null) &&
              (value != null) &&
              this.preconditions.contains (value));
   }

   public Iterator iteratorOfPreconditions ()
   {
      return ((this.preconditions == null)
              ? FEmptyIterator.get ()
              : this.preconditions.iterator ());
   }

   public int sizeOfPreconditions ()
   {
      return ((this.preconditions == null)
              ? 0
              : this.preconditions.size ());
   }

   public static final String PROPERTY_REQUEST_TEMPLATE = "requestTemplate";

   private String requestTemplate;

   public void setRequestTemplate (String value)
   {
      if ( ! JavaSDM.stringEquals (this.requestTemplate, value))
      {
         String oldValue = this.requestTemplate;
         this.requestTemplate = value;
         getPropertyChangeSupport().firePropertyChange(PROPERTY_REQUEST_TEMPLATE, oldValue, value);
      }
   }

   public ServiceScreen withRequestTemplate (String value)
   {
      setRequestTemplate (value);
      return this;
   }

   public String getRequestTemplate ()
   {
      return this.requestTemplate;
   }

   /**
    * <pre>
    *           0..n     screens     0..1
    * ServiceScreen ------------------------- ServiceDesigner
    *           screens               serviceDesigner
    * </pre>
    */
   public static final String PROPERTY_SERVICE_DESIGNER = "serviceDesigner";

   private ServiceDesigner serviceDesigner;

   public boolean setServiceDesigner (ServiceDesigner value)
   {
      boolean changed = false;

      if (this.serviceDesigner != value)
      {
      
         ServiceDesigner oldValue = this.serviceDesigner;
         ServiceScreen source = this;
         if (this.serviceDesigner != null)
         {
            this.serviceDesigner = null;
            oldValue.removeFromScreens (this);
         }
         this.serviceDesigner = value;

         if (value != null)
         {
            value.addToScreens (this);
         }
            getPropertyChangeSupport().firePropertyChange(PROPERTY_SERVICE_DESIGNER, oldValue, value);
         changed = true;
      
      }
      return changed;
   }

   public ServiceScreen withServiceDesigner (ServiceDesigner value)
   {
      setServiceDesigner (value);
      return this;
   }

   public ServiceDesigner getServiceDesigner ()
   {
      return this.serviceDesigner;
   }

   /**
    * <pre>
    *           0..1     templateParameters     0..n
    * ServiceScreen ------------------------- TemplateParameter
    *           serviceScreen               templateParameters
    * </pre>
    */
   public static final String PROPERTY_TEMPLATE_PARAMETERS = "templateParameters";

   private FPropLinkedList templateParameters;

   public boolean addToTemplateParameters (TemplateParameter value)
   {
      boolean changed = false;

      if (value != null && !this.hasInTemplateParameters (value))
      {
         if (this.templateParameters == null)
         {
            this.templateParameters = new FPropLinkedList (this, PROPERTY_TEMPLATE_PARAMETERS);

         }
      
         changed = this.templateParameters.add (value);
         if (changed)
         {
            value.setServiceScreen (this);
         }
      
      }
      return changed;
   }

   public ServiceScreen withTemplateParameters (TemplateParameter value)
   {
      addToTemplateParameters (value);
      return this;
   }

   public ServiceScreen withoutTemplateParameters (TemplateParameter value)
   {
      removeFromTemplateParameters (value);
      return this;
   }

   public boolean removeFromTemplateParameters (TemplateParameter value)
   {
      boolean changed = false;

      if ((this.templateParameters != null) && (value != null))
      {
      
         changed = this.templateParameters.remove (value);
         if (changed)
         {
            value.setServiceScreen (null);
         }
      
      }
      return changed;
   }

   public void removeAllFromTemplateParameters ()
   {
   
      TemplateParameter tmpValue;

      if (templateParameters != null) {
         java.util.Vector tempSet = new java.util.Vector(templateParameters);
         Iterator iter = tempSet.iterator ();
      
         while (iter.hasNext ())
         {
            tmpValue = (TemplateParameter) iter.next ();
            this.removeFromTemplateParameters (tmpValue);
         }
      } 
   
   }

   public boolean hasInTemplateParameters (TemplateParameter value)
   {
      return ((this.templateParameters != null) &&
              (value != null) &&
              this.templateParameters.contains (value));
   }

   public ListIterator iteratorOfTemplateParameters ()
   {
      return ((this.templateParameters == null)
              ? FEmptyListIterator.get ()
              : this.templateParameters.listIterator());
   }

   public int sizeOfTemplateParameters ()
   {
      return ((this.templateParameters == null)
              ? 0
              : this.templateParameters.size ());
   }
   public TemplateParameter getFirstOfTemplateParameters ()
   {
      if (templateParameters == null)
      {
         return null;
      }
      else
      {
         if (templateParameters.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (TemplateParameter) templateParameters.getFirst ();
      }
   }

   public TemplateParameter getLastOfTemplateParameters ()
   {
      if (templateParameters == null)
      {
         return null;
      }
      else
      {
         if (templateParameters.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (TemplateParameter) templateParameters.getLast ();
      }
   }
   public TemplateParameter getFromTemplateParameters ( int index )
   {
      if (index >= 0 && index < sizeOfTemplateParameters ())
      {
         return (TemplateParameter) this.templateParameters.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getTemplateParametersAt(" + index + ")" );
      }
   }

   public int indexOfTemplateParameters ( TemplateParameter value )
   {
      return ((this.templateParameters == null)
              ? -1
              : this.templateParameters.indexOf (value));
   }

   public int indexOfTemplateParameters ( TemplateParameter value, int index )
   {
      return ((this.templateParameters == null)
   	       ? -1
   	       : this.templateParameters.indexOf (value, index));
   }

   public int lastIndexOfTemplateParameters ( TemplateParameter value )
   {
      return ((this.templateParameters == null)
               ? -1
               : this.templateParameters.lastIndexOf (value));
   }

   public int lastIndexOfTemplateParameters ( TemplateParameter value, int index )
   {
      return ((this.templateParameters == null)
               ? -1
               : this.templateParameters.lastIndexOf (value, index));
   }

   public boolean isBeforeOfTemplateParameters ( TemplateParameter leftObject, TemplateParameter rightObject)
   {
      if (templateParameters == null)
      {
         return false;
      }
      else
      {
         return templateParameters.isBefore (leftObject, rightObject);
      }
   }

   public boolean isAfterOfTemplateParameters ( TemplateParameter leftObject, TemplateParameter rightObject)
   {
      if (templateParameters == null)
      {
         return false;
      }
      else
      {
         return templateParameters.isAfter (leftObject, rightObject);
      }
   }

   public TemplateParameter getNextOfTemplateParameters ( TemplateParameter object )
   {
      if (templateParameters == null)
      {
         return null;
      }
      else
      {
         return (TemplateParameter) templateParameters.getNextOf (object);
      }
   }

   public TemplateParameter getNextOfTemplateParameters ( TemplateParameter object, int index)
   {
      if (templateParameters == null)
      {
         return null;
      }
      else
      {
         return (TemplateParameter) templateParameters.getNextOf (object, index);
      }
   }

   public TemplateParameter getPreviousOfTemplateParameters ( TemplateParameter object)
   {
      if (templateParameters == null)
      {
         return null;
      }
      else
      {
         return (TemplateParameter) templateParameters.getPreviousOf (object);
      }
   }

   public TemplateParameter getPreviousOfTemplateParameters ( TemplateParameter object, int index )
   {
      if (templateParameters == null)
      {
         return null;
      }
      else
      {
         return (TemplateParameter) templateParameters.getPreviousOf (object, index);
      }
   }

   public boolean addAfterOfTemplateParameters ( TemplateParameter refObject, TemplateParameter value)
   {
      boolean changed = false;
      if (templateParameters != null)
      {
         int index = templateParameters.indexOf (refObject);
         changed = addToTemplateParameters (index+1, value);
      }
      return changed;
   }

   public boolean addBeforeOfTemplateParameters ( TemplateParameter refObject, TemplateParameter value)
   {
      boolean changed = false;
      if (templateParameters != null)
      {
         int index = templateParameters.indexOf (refObject);
         changed = addToTemplateParameters (index, value);
      }
      return changed;
   }

   public boolean addToTemplateParameters (int index, TemplateParameter value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.templateParameters == null)
         {
            this.templateParameters = new FPropLinkedList (this, PROPERTY_TEMPLATE_PARAMETERS); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfTemplateParameters (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  templateParameters.remove (oldIndex);
               }
               templateParameters.add (index, value);
               if (oldIndex < 0)
               {
                  value.setServiceScreen (this);
               }
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   public boolean setInTemplateParameters (int index, TemplateParameter value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.templateParameters == null)
         {
            this.templateParameters = new FPropLinkedList (this, PROPERTY_TEMPLATE_PARAMETERS); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfTemplateParameters (value);
         if (oldIndex != index)
         {
            try
            {
            
               TemplateParameter oldValue = (TemplateParameter)this.templateParameters.set (index, value);
               if (oldIndex > -1)
               {
                  this.templateParameters.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  if (oldValue != null)
                  {
                     oldValue.setServiceScreen (null);
                  }
                  if (oldIndex < 0)
                  {
                     value.setServiceScreen (this);
                  }
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   public boolean removeFromTemplateParameters (int index)
   {
      boolean changed = false;

      if (this.templateParameters != null && (index >= 0 && index < this.templateParameters.size ()))
      {
      
         TemplateParameter tmpValue = (TemplateParameter) this.templateParameters.remove (index);
         if (tmpValue != null)
         {
            tmpValue.setServiceScreen (null);
            changed = true;
         }
      
      }
      return changed;
   }

   public boolean removeFromTemplateParameters (int index, TemplateParameter value)
   {
      boolean changed = false;

      if ((this.templateParameters != null) && (value != null) && 
          (index >= 0 && index < this.templateParameters.size ()))
      {
         TemplateParameter oldValue = (TemplateParameter) this.templateParameters.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromTemplateParameters (index);
         
         }
      }
      return changed;
   }

   public ListIterator iteratorOfTemplateParameters ( TemplateParameter  lowerBound )
   {
      ListIterator result = FEmptyListIterator.get ();

      if (templateParameters != null && lowerBound != null)
      {
         int index = templateParameters.indexOf (lowerBound) + 1;
         result = templateParameters.listIterator (index);
      }
      else if (templateParameters != null && lowerBound == null)
      {
         result = templateParameters.listIterator (0);
      }

      return result;
   }

   public ListIterator iteratorOfTemplateParameters (int index)
   {
      return ((this.templateParameters == null)
              ? FEmptyListIterator.get ()
              : this.templateParameters.listIterator (Math.max(0,Math.min(index,this.templateParameters.size ()))));
   }

   public static final String PROPERTY_URI = "uri";

   private String uri;

   public void setUri (String value)
   {
      if ( ! JavaSDM.stringEquals (this.uri, value))
      {
         String oldValue = this.uri;
         this.uri = value;
         getPropertyChangeSupport().firePropertyChange(PROPERTY_URI, oldValue, value);
      }
   }

   public ServiceScreen withUri (String value)
   {
      setUri (value);
      return this;
   }

   public String getUri ()
   {
      return this.uri;
   }

   public void removeYou()
   {
      this.removeAllFromMappingRules ();
      this.removeAllFromPostconditions ();
      this.removeAllFromPreconditions ();
      this.setServiceDesigner (null);
      this.removeAllFromTemplateParameters ();
      super.removeYou ();
   }
}


