/*
 * GWT compliant generated by Fujaba - CodeGen2 version 25.3.2009
 */

package fast;

// GWT: fast.FactType
// GWT: java.util.*

import java.util.*;
// GWT: de.upb.tools.fca.*

import fujaba.web.runtime.client.*;
// GWT: fast.ServiceScreen
// GWT: fast.FastObject
import fujaba.web.runtime.client.reflect.*;
import fujaba.web.runtime.client.*;
import java.util.Iterator;

public class ServiceDesigner extends FastObject
{

   public void removeAllFrom(String className) {
      if ("fast.ServiceScreen".equals(className))
      {				
         removeAllFromScreens();
      }
      else      if ("fast.FactType".equals(className))
      {				
         removeAllFromFactTypes();
      }
   }
   
   /**
   Return ArrayList of all atrr names
   */
   public java.util.ArrayList arrayListOfAttrNames() {
   	java.util.ArrayList vec = new java.util.ArrayList();
   	
   	return vec;
   }

   // generic set and get methods
   public void set (String fieldName, Object value)
   {
      // screens
      if ("screens".equals(fieldName))
      {				
         addToScreens ((fast.ServiceScreen) value);
      }
      else      // factTypes
      if ("factTypes".equals(fieldName))
      {				
         addToFactTypes ((fast.FactType) value);
      }
   }

   public Object get (String fieldName)
   {
      if ("screens".equals(fieldName))
      {				
         return iteratorOfScreens();
      }
      else      if ("factTypes".equals(fieldName))
      {				
         return iteratorOfFactTypes();
      }
      return null;
   }

   /**
    * <pre>
    *           0..1     factTypes     0..*
    * ServiceDesigner ------------------------- FactType
    *           serviceDesigner               factTypes
    * </pre>
    */
   public static final String PROPERTY_FACT_TYPES = "factTypes";

   private FPropHashSet factTypes;

   public boolean addToFactTypes (FactType value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.factTypes == null)
         {
            this.factTypes = new FPropHashSet (this, PROPERTY_FACT_TYPES);

         }
      
         changed = this.factTypes.add (value);
         if (changed)
         {
            value.setServiceDesigner (this);
         }
      
      }
      return changed;
   }

   public ServiceDesigner withFactTypes (FactType value)
   {
      addToFactTypes (value);
      return this;
   }

   public ServiceDesigner withoutFactTypes (FactType value)
   {
      removeFromFactTypes (value);
      return this;
   }

   public boolean removeFromFactTypes (FactType value)
   {
      boolean changed = false;

      if ((this.factTypes != null) && (value != null))
      {
      
         changed = this.factTypes.remove (value);
         if (changed)
         {
            value.setServiceDesigner (null);
         }
      
      }
      return changed;
   }

   public void removeAllFromFactTypes ()
   {
   
      FactType tmpValue;

      if (factTypes != null) {
         java.util.Vector tempSet = new java.util.Vector(factTypes);
         Iterator iter = tempSet.iterator ();
      
         while (iter.hasNext ())
         {
            tmpValue = (FactType) iter.next ();
            this.removeFromFactTypes (tmpValue);
         }
      } 
   
   }

   public boolean hasInFactTypes (FactType value)
   {
      return ((this.factTypes != null) &&
              (value != null) &&
              this.factTypes.contains (value));
   }

   public Iterator iteratorOfFactTypes ()
   {
      return ((this.factTypes == null)
              ? FEmptyIterator.get ()
              : this.factTypes.iterator ());
   }

   public int sizeOfFactTypes ()
   {
      return ((this.factTypes == null)
              ? 0
              : this.factTypes.size ());
   }

   /**
    * <pre>
    *           0..1     screens     0..n
    * ServiceDesigner ------------------------- ServiceScreen
    *           serviceDesigner               screens
    * </pre>
    */
   public static final String PROPERTY_SCREENS = "screens";

   private FPropHashSet screens;

   public boolean addToScreens (ServiceScreen value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.screens == null)
         {
            this.screens = new FPropHashSet (this, PROPERTY_SCREENS);

         }
      
         changed = this.screens.add (value);
         if (changed)
         {
            value.setServiceDesigner (this);
         }
      
      }
      return changed;
   }

   public ServiceDesigner withScreens (ServiceScreen value)
   {
      addToScreens (value);
      return this;
   }

   public ServiceDesigner withoutScreens (ServiceScreen value)
   {
      removeFromScreens (value);
      return this;
   }

   public boolean removeFromScreens (ServiceScreen value)
   {
      boolean changed = false;

      if ((this.screens != null) && (value != null))
      {
      
         changed = this.screens.remove (value);
         if (changed)
         {
            value.setServiceDesigner (null);
         }
      
      }
      return changed;
   }

   public void removeAllFromScreens ()
   {
   
      ServiceScreen tmpValue;

      if (screens != null) {
         java.util.Vector tempSet = new java.util.Vector(screens);
         Iterator iter = tempSet.iterator ();
      
         while (iter.hasNext ())
         {
            tmpValue = (ServiceScreen) iter.next ();
            this.removeFromScreens (tmpValue);
         }
      } 
   
   }

   public boolean hasInScreens (ServiceScreen value)
   {
      return ((this.screens != null) &&
              (value != null) &&
              this.screens.contains (value));
   }

   public Iterator iteratorOfScreens ()
   {
      return ((this.screens == null)
              ? FEmptyIterator.get ()
              : this.screens.iterator ());
   }

   public int sizeOfScreens ()
   {
      return ((this.screens == null)
              ? 0
              : this.screens.size ());
   }

   public void removeYou()
   {
      this.removeAllFromFactTypes ();
      this.removeAllFromScreens ();
      super.removeYou ();
   }
}


