/*
 * GWT compliant generated by Fujaba - CodeGen2 version 03.12.2009
 */

package fast.common.client;

import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.Button;
import fast.common.client.ServiceDesigner;
import fast.common.client.ServiceScreen;
import fast.common.client.ScreenPanel;
import java.util.*;
import com.google.gwt.user.client.ui.TabPanel;
import fast.servicescreen.client.ServiceScreenDesignerWep;
import fujaba.web.runtime.client.reflect.*;
import fujaba.web.runtime.client.*;
import java.util.*;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.ClickEvent;




public class ServiceWrapperOverviewTab implements PropertyChangeClient
{

   public void removeAllFrom(String className) 
   {
   }
   
   /**
   Return ArrayList of all atrr names
   */
   public java.util.ArrayList arrayListOfAttrNames() 
   {
      java.util.ArrayList vec = new java.util.ArrayList();
   	
      return vec;
   }

   // generic set and get methods
   public void set (String fieldName, Object value)
   {
   }  

   public void add (String fieldName, Object value)
   {
      set (fieldName, value);
   }

   public Object get (String fieldName)
   {
      return null;
   }
	protected final PropertyChangeSupport listeners = new PropertyChangeSupport(this);

	public void addPropertyChangeListener(PropertyChangeListener listener)
	{
		getPropertyChangeSupport().addPropertyChangeListener(listener);
	}

	public void removePropertyChangeListener(PropertyChangeListener listener)
	{
		getPropertyChangeSupport().removePropertyChangeListener(listener);
	}

	public void addPropertyChangeListener(String property, PropertyChangeListener listener)
	{
		getPropertyChangeSupport().addPropertyChangeListener(property, listener);
	}

	public void removePropertyChangeListener(String property, PropertyChangeListener listener)
	{
		getPropertyChangeSupport().removePropertyChangeListener(property, listener);
	}

	public PropertyChangeSupport getPropertyChangeSupport()
	{
		return listeners;
	}


   // create attributes for all objects in all states of this statechart
   private Button button;
   private ServiceScreen newScreen;
   private ServiceScreen screen;
   private FlowPanel overviewFlowPanel;
   private ScreenPanel screenPanel;
   private ServiceDesigner designer;
   private Iterator fujaba__IterDesignerToScreen;

   public void start()
   {
      initStateChart();
      // call doAction on initial state
      buildGUI.doAction();
   }

   public void start(FAction parent)
   {
      initStateChart();
      //set parent of rootState
      buildGUI.setToParent(parent);
      // call doAction on rootState
      buildGUI.doAction();
   }

   // GWT statechart code
   public void initStateChart()
   {
      if(buildGUI != null)
         return;

      addScreenButton = new AddScreenButton ();
      addScreenButtonHandler = new AddScreenButtonHandler ();
      addScreenPanels = new AddScreenPanels ();
      buildGUI = new BuildGUI ();
      refreshOverviewPanel = new RefreshOverviewPanel ();
      // NONE

      //buildGUI.addToFollowers("auto", refreshOverviewPanel);
      // NONE

      //refreshOverviewPanel.addToFollowers("auto", addScreenPanels);
      // NONE

      //addScreenPanels.addToFollowers("auto", addScreenButton);
      // NONE

      //addScreenButton.addToFollowers("button.click", addScreenButtonHandler);
      // NONE

      //buildGUI.addToFollowers("designer.change", refreshOverviewPanel);
   }


   private AddScreenButton addScreenButton;
   public class AddScreenButton extends FAction
   {
       public void doAction()
       {
   		 boolean fujaba__Success = false;

         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object overviewFlowPanel is really bound
            JavaSDM.ensure ( overviewFlowPanel != null );
            // create object button
            button = new Button ( );

            // assign attribute button
            button.setText ("add");
            // create link widget from overviewFlowPanel to button
            overviewFlowPanel.add (button);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


         button.addClickHandler(addScreenButtonHandler);

       }

   }

   private AddScreenButtonHandler addScreenButtonHandler;
   public class AddScreenButtonHandler extends FAction
   {
       public void doAction()
       {
   		 boolean fujaba__Success = false;

         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object designer is really bound
            JavaSDM.ensure ( designer != null );
            // create object newScreen
            newScreen = new ServiceScreen ( );

            // assign attribute newScreen
            newScreen.setName ("new Screen");
            // create link screens from newScreen to designer
            newScreen.setServiceDesigner (designer);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }



       }

   }

   private AddScreenPanels addScreenPanels;
   public class AddScreenPanels extends FAction
   {
       public void doAction()
       {
   		 boolean fujaba__Success = false;

         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object designer is really bound
            JavaSDM.ensure ( designer != null );
            // check object overviewFlowPanel is really bound
            JavaSDM.ensure ( overviewFlowPanel != null );
            // iterate to-many link screens from designer to screen
            fujaba__Success = false;
            fujaba__IterDesignerToScreen = designer.iteratorOfScreens ();

            while ( fujaba__IterDesignerToScreen.hasNext () )
            {
               try
               {
                  screen = (ServiceScreen) fujaba__IterDesignerToScreen.next ();

                  // check object screen is really bound
                  JavaSDM.ensure ( screen != null );
                  // create object screenPanel
                  screenPanel = new ScreenPanel ( );

                  // collabStat call
                  screenPanel.start(wrapperTool, screen, overviewFlowPanel, refreshOverviewPanel);

                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }
            }
            JavaSDM.ensure (fujaba__Success);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }



   		 if( autoGuardAddScreenPanels1 == null)
   		 {
   			 autoGuardAddScreenPanels1 = new AutoGuardAddScreenPanels1();
   			 autoGuardAddScreenPanels1.setSource(addScreenPanels);
   			 autoGuardAddScreenPanels1.setTarget(addScreenButton);
   			 addScreenPanels.addToAutoTransitions(autoGuardAddScreenPanels1.toString(), autoGuardAddScreenPanels1);
   		 }

   		 doAuto();
       }

      private AutoGuardAddScreenPanels1 autoGuardAddScreenPanels1;
      private class AutoGuardAddScreenPanels1 extends FGuard
      {
      }

   }

   private BuildGUI buildGUI;
   public class BuildGUI extends FAction
   {
       public void doAction()
       {
   		 boolean fujaba__Success = false;

         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object tabPanel is really bound
            JavaSDM.ensure ( tabPanel != null );
            // check object wrapperTool is really bound
            JavaSDM.ensure ( wrapperTool != null );
            // search to-one link designer from wrapperTool to designer
            designer = wrapperTool.getDesigner ();

            // check object designer is really bound
            JavaSDM.ensure ( designer != null );


            // create object overviewFlowPanel
            overviewFlowPanel = new FlowPanel ( );

            // collabStat call
            tabPanel.setWidth("900px");
            // collabStat call
            tabPanel.add(overviewFlowPanel, "Overview");
            // collabStat call
            tabPanel.selectTab(0);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


         designer.addPropertyChangeListener(refreshOverviewPanel);

   		 if( autoGuardBuildGUI1 == null)
   		 {
   			 autoGuardBuildGUI1 = new AutoGuardBuildGUI1();
   			 autoGuardBuildGUI1.setSource(buildGUI);
   			 autoGuardBuildGUI1.setTarget(refreshOverviewPanel);
   			 buildGUI.addToAutoTransitions(autoGuardBuildGUI1.toString(), autoGuardBuildGUI1);
   		 }

   		 doAuto();
       }

      private AutoGuardBuildGUI1 autoGuardBuildGUI1;
      private class AutoGuardBuildGUI1 extends FGuard
      {
      }

   }

   private RefreshOverviewPanel refreshOverviewPanel;
   public class RefreshOverviewPanel extends FAction
   {
       public void doAction()
       {
   		 boolean fujaba__Success = false;

         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object overviewFlowPanel is really bound
            JavaSDM.ensure ( overviewFlowPanel != null );
            // collabStat call
            overviewFlowPanel.clear();
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }



   		 if( autoGuardRefreshOverviewPanel1 == null)
   		 {
   			 autoGuardRefreshOverviewPanel1 = new AutoGuardRefreshOverviewPanel1();
   			 autoGuardRefreshOverviewPanel1.setSource(refreshOverviewPanel);
   			 autoGuardRefreshOverviewPanel1.setTarget(addScreenPanels);
   			 refreshOverviewPanel.addToAutoTransitions(autoGuardRefreshOverviewPanel1.toString(), autoGuardRefreshOverviewPanel1);
   		 }

   		 doAuto();
       }

      private AutoGuardRefreshOverviewPanel1 autoGuardRefreshOverviewPanel1;
      private class AutoGuardRefreshOverviewPanel1 extends FGuard
      {
      }

   }

   // my style test for method.vm


   // my style test for method.vm


   // my style test for method.vm


   // my style test for method.vm


   // my style test for method.vm

   public void start (ServiceScreenDesignerWep wrapperTool , TabPanel tabPanel )
   { 
      // copy parameters to attributes
      this.wrapperTool = wrapperTool;
      this.tabPanel = tabPanel;
      start();
   }

   // attributes for action container method parameters 
   public ServiceScreenDesignerWep wrapperTool;
   public TabPanel tabPanel;


   public void removeYou()
   {
   }
}


