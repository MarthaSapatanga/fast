/*
 * GWT compliant generated by Fujaba - CodeGen2 version 03.12.2009
 */

package fast.common.client;

import de.uni_kassel.webcoobra.client.ModelRootEventListener;
import fujaba.web.runtime.client.CObject;
import de.uni_kassel.webcoobra.client.ModelRoot;
import fujaba.web.runtime.client.reflect.*;
import fujaba.web.runtime.client.*;
import java.util.*;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.ClickEvent;




public class ServiceScreenModel extends CObject implements PropertyChangeClient, ModelRootEventListener
{
	// retrieve all class names
	public void registerModelRoot ()
	{
		CClass cclass;
		CAttribute cattr;
		CAssoc cassoc;
		CMethod cmeth;

		ModelRoot.get().addEventListener(this);


		/*********************************
		Generate CClass fast.common.client.FastObject
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.FastObject");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		//add methods
		cmeth = new CMethod();
		cmeth.setName("FastObject()");
		cmeth.setCClass(cclass);
		
		/*********************************
		Generate CClass fast.common.client.FactPort
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.FactPort");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		cattr = new CAttribute();
		cattr.setName ("name");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("uri");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("exampleValue");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("factType");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("mnemonic");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		//add methods

		/*********************************
		Generate CClass fast.common.client.BuildingBlock
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.BuildingBlock");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		cattr = new CAttribute();
		cattr.setName ("name");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		//add methods
		/*********************************
		Generate CClass fast.common.client.ServiceScreen
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.ServiceScreen");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		cattr = new CAttribute();
		cattr.setName ("requestTemplate");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("uri");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("name");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		//add methods

		/*********************************
		Generate CClass fast.common.client.TrafoOperator
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.TrafoOperator");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		cattr = new CAttribute();
		cattr.setName ("name");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		//add methods


		/*********************************
		Generate CClass fast.common.client.FASTMappingRule
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.FASTMappingRule");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		cattr = new CAttribute();
		cattr.setName ("sourceTagname");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("targetElemName");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("kind");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		//add methods

		/*********************************
		Generate CClass fast.common.client.ServiceDesigner
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.ServiceDesigner");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		//add methods

		/*********************************
		Generate CClass fast.common.client.FactAttribute
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.FactAttribute");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		cattr = new CAttribute();
		cattr.setName ("attrName");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("factType");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		//add methods

		/*********************************
		Generate CClass fast.common.client.FactType
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.FactType");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		cattr = new CAttribute();
		cattr.setName ("typeName");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("mnemonic");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("uri");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		//add methods

		/*********************************
		Generate CClass fast.common.client.TemplateParameter
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.TemplateParameter");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		cattr = new CAttribute();
		cattr.setName ("name");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		cattr = new CAttribute();
		cattr.setName ("value");
		cattr.setType("String");
		cclass.addToCAttributes (cattr); 

		//add methods




		/*********************************
		Generate CClass fast.common.client.ServiceScreenModel
		*********************************/
		cclass = new CClass ();
		cclass.setName("fast.common.client.ServiceScreenModel");
		ModelRoot.get().addToCClasses(cclass);
			
		
		// add attributes to cclass
		//add methods



		/***********************************
		Add CAssocs, CRoles and CCardinality
		***********************************/
		CRole crole = null;
		CRole rightRole = null;
		Iterator iter = null;
		CCardinality ccardinality = null;
		int upperBound = -1;
		CClass tClass = null;
			
		
		
		crole = new CRole();
		crole.setName("serviceScreen");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("preconditions");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.BuildingBlock");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("preconditions");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.FactPort")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("serviceScreen2");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("postconditions");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.BuildingBlock");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("postconditions");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.FactPort")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("serviceScreen");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("mappingRules");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.BuildingBlock");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("mappingRules");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.FASTMappingRule")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("serviceScreen");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("templateParameters");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.BuildingBlock");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("templateParameters");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.TemplateParameter")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		
		
		
		
		crole = new CRole();
		crole.setName("parent");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("kids");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.FASTMappingRule");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("kids");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.FASTMappingRule")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		
		crole = new CRole();
		crole.setName("fASTMappingRule");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("operationHandler");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.FASTMappingRule");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("operationHandler");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.servicescreen.client.gui.parser.OperationHandler")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("serviceDesigner");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("screens");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.ServiceDesigner");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("screens");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.ServiceScreen")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("serviceDesigner");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("factTypes");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.ServiceDesigner");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("factTypes");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.FactType")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("serviceDesigner");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("trafoOperators");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.ServiceDesigner");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("trafoOperators");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.TrafoOperator")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		
		
		
		crole = new CRole();
		crole.setName("owner");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("factAttributes");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.FactType");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("factAttributes");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.FactAttribute")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("subtypes");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("isa");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.FactType");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("isa");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.FactType")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		
		crole = new CRole();
		crole.setName("factType");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("factExamples");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.FactType");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("factExamples");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.FactExample")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
		crole = new CRole();
		crole.setName("factType");
		ccardinality = new CCardinality();
		upperBound = 1;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		crole.setCCardinality(ccardinality);
		
		cassoc = new CAssoc();
	    cassoc.setName("factExamples");
	    cassoc.addToCRole(crole);
		crole.setCAssoc(cassoc);
		tClass = ModelRoot.get().getCClass("fast.common.client.FactType");
		tClass.addToCRoles(crole);
		
		rightRole = new CRole();
		rightRole.setName("factExamples2");
		ccardinality = new CCardinality();
		upperBound = 2147483647;
		if (upperBound == 0) {
			 ccardinality.setCardString("0");
		} else if (upperBound == 1) {
			ccardinality.setCardString("1");
		} else {
			ccardinality.setCardString("n");
		}
		rightRole.setCCardinality(ccardinality);
		cassoc.addToCRole(rightRole);
		
		// Add role to CClass
		iter = ModelRoot.get().iteratorOfCClasses();
		while(iter.hasNext()) {
			CClass theCClass = (CClass) iter.next();
			
			if ( theCClass.getName().equals("fast.common.client.FactExample")) {
				theCClass.addToCRoles(rightRole);
				break;
			}
		}
		
	 
	}

   // gwt class table for the creation of objects from class names
   public ICObject createObject(String classname)
   {

      if ("fast.common.client.FastObject".equals(classname))
      {
         return new fast.common.client.FastObject();
      }

      else if ("fast.common.client.FactPort".equals(classname))
      {
         return new fast.common.client.FactPort();
      }
 
      else if ("fast.common.client.BuildingBlock".equals(classname))
      {
         return new fast.common.client.BuildingBlock();
      }

      else if ("fast.common.client.ServiceScreen".equals(classname))
      {
         return new fast.common.client.ServiceScreen();
      }
 
      else if ("fast.common.client.TrafoOperator".equals(classname))
      {
         return new fast.common.client.TrafoOperator();
      }
  
      else if ("fast.common.client.FASTMappingRule".equals(classname))
      {
         return new fast.common.client.FASTMappingRule();
      }
 
      else if ("fast.common.client.ServiceDesigner".equals(classname))
      {
         return new fast.common.client.ServiceDesigner();
      }
 
      else if ("fast.common.client.FactAttribute".equals(classname))
      {
         return new fast.common.client.FactAttribute();
      }
 
      else if ("fast.common.client.FactType".equals(classname))
      {
         return new fast.common.client.FactType();
      }
 
      else if ("fast.common.client.TemplateParameter".equals(classname))
      {
         return new fast.common.client.TemplateParameter();
      }
  
      else if ("fast.common.client.ServiceScreenModel".equals(classname))
      {
         return new fast.common.client.ServiceScreenModel();
      }
        return null;
   }

   public void removeAllFrom(String className) 
   {
   }
   
   /**
   Return ArrayList of all atrr names
   */
   public java.util.ArrayList arrayListOfAttrNames() 
   {
      java.util.ArrayList vec = new java.util.ArrayList();
   	
      return vec;
   }

   // generic set and get methods
   public void set (String fieldName, Object value)
   {
   }  

   public void add (String fieldName, Object value)
   {
      set (fieldName, value);
   }

   public Object get (String fieldName)
   {
      return null;
   }
	protected final PropertyChangeSupport listeners = new PropertyChangeSupport(this);

	public void addPropertyChangeListener(PropertyChangeListener listener)
	{
		getPropertyChangeSupport().addPropertyChangeListener(listener);
	}

	public void removePropertyChangeListener(PropertyChangeListener listener)
	{
		getPropertyChangeSupport().removePropertyChangeListener(listener);
	}

	public void addPropertyChangeListener(String property, PropertyChangeListener listener)
	{
		getPropertyChangeSupport().addPropertyChangeListener(property, listener);
	}

	public void removePropertyChangeListener(String property, PropertyChangeListener listener)
	{
		getPropertyChangeSupport().removePropertyChangeListener(property, listener);
	}

	public PropertyChangeSupport getPropertyChangeSupport()
	{
		return listeners;
	}


   public void removeYou()
   {
   }
}


