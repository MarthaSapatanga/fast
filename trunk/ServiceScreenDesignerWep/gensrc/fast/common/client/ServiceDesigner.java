/*
 * GWT compliant generated by Fujaba - CodeGen2 version 03.12.2009
 */

package fast.common.client;

import fast.common.client.FactType;
import java.util.*;
import fast.common.client.ServiceScreen;
import fast.common.client.TrafoOperator;
import fast.common.client.FastObject;
import fujaba.web.runtime.client.reflect.*;
import fujaba.web.runtime.client.*;
import java.util.*;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.ClickEvent;




public class ServiceDesigner extends FastObject
{

   public void removeAllFrom(String className) 
   {
      if ("fast.common.client.ServiceScreen".equals(className)){				
         removeAllFromScreens();
      }
      else      if ("fast.common.client.FactType".equals(className)){				
         removeAllFromFactTypes();
      }
      else      if ("fast.common.client.TrafoOperator".equals(className)){				
         removeAllFromTrafoOperators();
      }
   }
   
   /**
   Return ArrayList of all atrr names
   */
   public java.util.ArrayList arrayListOfAttrNames() 
   {
      java.util.ArrayList vec = new java.util.ArrayList();
   	
      return vec;
   }

   // generic set and get methods
   public void set (String fieldName, Object value)
   {
//( toMany true || toMany2 false || qualified $qualified || 
// internalQualified false ||  
// role.Qualifier $role.Qualifier || ordered $ordered || sorted $sorted)
 //2[! (  ( toMany || !toMany2) && !( toMany && toMany2)  && role.Qualifier  ) ]
//2.2[ !( qualified && !internalQualified ) ]
 // screens
      if ("screens".equals(fieldName)){				
         addToScreens ((fast.common.client.ServiceScreen) value);
      }//( toMany true || toMany2 false || qualified $qualified || 
// internalQualified false ||  
// role.Qualifier $role.Qualifier || ordered $ordered || sorted $sorted)
 //2[! (  ( toMany || !toMany2) && !( toMany && toMany2)  && role.Qualifier  ) ]
//2.2[ !( qualified && !internalQualified ) ]
 else// factTypes
      if ("factTypes".equals(fieldName)){				
         addToFactTypes ((fast.common.client.FactType) value);
      }//( toMany true || toMany2 false || qualified $qualified || 
// internalQualified false ||  
// role.Qualifier $role.Qualifier || ordered $ordered || sorted $sorted)
 //2[! (  ( toMany || !toMany2) && !( toMany && toMany2)  && role.Qualifier  ) ]
//2.2[ !( qualified && !internalQualified ) ]
 else// trafoOperators
      if ("trafoOperators".equals(fieldName)){				
         addToTrafoOperators ((fast.common.client.TrafoOperator) value);
      }   }  

   public void add (String fieldName, Object value)
   {
      set (fieldName, value);
   }

   public Object get (String fieldName)
   {
      if ("screens".equals(fieldName))
      {				
         return iteratorOfScreens();
      }
      else      if ("factTypes".equals(fieldName))
      {				
         return iteratorOfFactTypes();
      }
      else      if ("trafoOperators".equals(fieldName))
      {				
         return iteratorOfTrafoOperators();
      }
      return null;
   }

   /**
    * <pre>
    *           0..1     factTypes     0..*
    * ServiceDesigner ------------------------- FactType
    *           serviceDesigner               factTypes
    * </pre>
    */
   public static final String PROPERTY_FACT_TYPES = "factTypes";

   private FPropHashSet<FactType> factTypes;

   public FPropHashSet<FactType> getFactTypes () {
      return factTypes;
   }

   public boolean addToFactTypes (FactType value) {
      boolean changed = false;

      if (value != null)
      {
         if (this.factTypes == null)
         {
            this.factTypes = new FPropHashSet<FactType> (this, PROPERTY_FACT_TYPES);

         }
      
         changed = this.factTypes.add (value);
         if (changed)
         {
            value.setServiceDesigner (this);
         }
      
      }
      return changed;
   }

   public ServiceDesigner withFactTypes (FactType value ) {
         addToFactTypes ( value);
      return this;
   }

   public ServiceDesigner withoutFactTypes (FactType value) {
      removeFromFactTypes (value);
      return this;
   }

   public boolean removeFromFactTypes (FactType value) {
      boolean changed = false;

      if ((this.factTypes != null) && (value != null))
      {
      
         changed = this.factTypes.remove (value);
         if (changed)
         {
            value.setServiceDesigner (null);
         }
      
      }
      return changed;
   }

   public void removeAllFromFactTypes () {
   
      FactType tmpValue;

      if (factTypes != null) {
         java.util.Vector tempSet = new java.util.Vector(factTypes);
         Iterator iter = tempSet.iterator ();
      
         while (iter.hasNext ())
         {
            tmpValue = (FactType) iter.next ();
            this.removeFromFactTypes (tmpValue);
         }
      } 
   
   }

   public boolean hasInFactTypes (FactType value) {
      return ((this.factTypes != null) &&
              (value != null) &&
              this.factTypes.contains (value));
   }

   public Iterator iteratorOfFactTypes () {
      return ((this.factTypes == null)
              ? FEmptyIterator.get ()
              : this.factTypes.iterator ());

   }

   public int sizeOfFactTypes () {
      return ((this.factTypes == null)
              ? 0
              : this.factTypes.size ());
   }

   /**
    * <pre>
    *           0..1     screens     0..n
    * ServiceDesigner ------------------------- ServiceScreen
    *           serviceDesigner               screens
    * </pre>
    */
   public static final String PROPERTY_SCREENS = "screens";

   private FPropHashSet<ServiceScreen> screens;

   public FPropHashSet<ServiceScreen> getScreens () {
      return screens;
   }

   public boolean addToScreens (ServiceScreen value) {
      boolean changed = false;

      if (value != null)
      {
         if (this.screens == null)
         {
            this.screens = new FPropHashSet<ServiceScreen> (this, PROPERTY_SCREENS);

         }
      
         changed = this.screens.add (value);
         if (changed)
         {
            value.setServiceDesigner (this);
         }
      
      }
      return changed;
   }

   public ServiceDesigner withScreens (ServiceScreen value ) {
         addToScreens ( value);
      return this;
   }

   public ServiceDesigner withoutScreens (ServiceScreen value) {
      removeFromScreens (value);
      return this;
   }

   public boolean removeFromScreens (ServiceScreen value) {
      boolean changed = false;

      if ((this.screens != null) && (value != null))
      {
      
         changed = this.screens.remove (value);
         if (changed)
         {
            value.setServiceDesigner (null);
         }
      
      }
      return changed;
   }

   public void removeAllFromScreens () {
   
      ServiceScreen tmpValue;

      if (screens != null) {
         java.util.Vector tempSet = new java.util.Vector(screens);
         Iterator iter = tempSet.iterator ();
      
         while (iter.hasNext ())
         {
            tmpValue = (ServiceScreen) iter.next ();
            this.removeFromScreens (tmpValue);
         }
      } 
   
   }

   public boolean hasInScreens (ServiceScreen value) {
      return ((this.screens != null) &&
              (value != null) &&
              this.screens.contains (value));
   }

   public Iterator iteratorOfScreens () {
      return ((this.screens == null)
              ? FEmptyIterator.get ()
              : this.screens.iterator ());

   }

   public int sizeOfScreens () {
      return ((this.screens == null)
              ? 0
              : this.screens.size ());
   }

   /**
    * <pre>
    *           0..1     trafoOperators     0..*
    * ServiceDesigner ------------------------- TrafoOperator
    *           serviceDesigner               trafoOperators
    * </pre>
    */
   public static final String PROPERTY_TRAFO_OPERATORS = "trafoOperators";

   private FPropHashSet<TrafoOperator> trafoOperators;

   public FPropHashSet<TrafoOperator> getTrafoOperators () {
      return trafoOperators;
   }

   public boolean addToTrafoOperators (TrafoOperator value) {
      boolean changed = false;

      if (value != null)
      {
         if (this.trafoOperators == null)
         {
            this.trafoOperators = new FPropHashSet<TrafoOperator> (this, PROPERTY_TRAFO_OPERATORS);

         }
      
         changed = this.trafoOperators.add (value);
         if (changed)
         {
            value.setServiceDesigner (this);
         }
      
      }
      return changed;
   }

   public ServiceDesigner withTrafoOperators (TrafoOperator value ) {
         addToTrafoOperators ( value);
      return this;
   }

   public ServiceDesigner withoutTrafoOperators (TrafoOperator value) {
      removeFromTrafoOperators (value);
      return this;
   }

   public boolean removeFromTrafoOperators (TrafoOperator value) {
      boolean changed = false;

      if ((this.trafoOperators != null) && (value != null))
      {
      
         changed = this.trafoOperators.remove (value);
         if (changed)
         {
            value.setServiceDesigner (null);
         }
      
      }
      return changed;
   }

   public void removeAllFromTrafoOperators () {
   
      TrafoOperator tmpValue;

      if (trafoOperators != null) {
         java.util.Vector tempSet = new java.util.Vector(trafoOperators);
         Iterator iter = tempSet.iterator ();
      
         while (iter.hasNext ())
         {
            tmpValue = (TrafoOperator) iter.next ();
            this.removeFromTrafoOperators (tmpValue);
         }
      } 
   
   }

   public boolean hasInTrafoOperators (TrafoOperator value) {
      return ((this.trafoOperators != null) &&
              (value != null) &&
              this.trafoOperators.contains (value));
   }

   public Iterator iteratorOfTrafoOperators () {
      return ((this.trafoOperators == null)
              ? FEmptyIterator.get ()
              : this.trafoOperators.iterator ());

   }

   public int sizeOfTrafoOperators () {
      return ((this.trafoOperators == null)
              ? 0
              : this.trafoOperators.size ());
   }

   public void removeYou()
   {
      this.removeAllFromFactTypes ();
      this.removeAllFromScreens ();
      this.removeAllFromTrafoOperators ();
      super.removeYou ();
   }
}


