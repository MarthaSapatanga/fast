# FAST Gadget Ontology
# 
# developed as part of the EU FAST Project (FP7-ICT-2007-1-216048)
# 
# editor: Knud Hinnerk Möller, DERI, National Unversity of Ireland, Galway
# contributor: Ismael Rivera, DERI, National Unversity of Ireland, Galway
#
# this turtle file is the original document, from which all other versions
# (html, rdf/xml) are created
#
# $Id$
# (NO_DELIV) 
# (NO_DELIV) To have comments that can be removed easily for integration in the deliverable,
# (NO_DELIV) put a (NO_DELIV) into the line.
# (NO_DELIV) 

@prefix fgo: <http://purl.oclc.org/fast/ontology/gadget#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>  .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix misc: <http://data.semanticweb.org/ns/misc#> .
@prefix ctag: <http://commontag.org/ns#> .

<http://purl.oclc.org/fast/ontology/gadget> a owl:Ontology ;
rdfs:label "The FAST Gagdet Ontology v0.2 (M24)"@en ;
rdfs:comment """This ontology defines terms for modelling semantic, interoperable gadgets or widgets. It has been developed as part of the EU project 'FAST' (FAST AND ADVANCED STORYBOARD TOOLS), FP7-ICT-2007-1-216048."""@en ;
dcterms:created "2009-02-09"@en ;
dcterms:modified "$Date$"@en ;
dcterms:creator <http://kantenwerk.org/metadata/foaf.rdf#me> ;
dcterms:contributor fgo:Ismael ;
dcterms:contributor fgo:fast_members ;
foaf:maker <http://kantenwerk.org/metadata/foaf.rdf#me> ;
doap:revision "$Revision$" .

<http://kantenwerk.org/metadata/foaf.rdf#me> a foaf:Person ;
foaf:name "Knud Möller"@en ;
foaf:homepage <http://kantenwerk.org> ;
rdfs:seeAlso <http://kantenwerk.org/metadata/foaf.rdf> .

<http://data.semanticweb.org/organization/deri-nui-galway> a foaf:Organization;
foaf:name "DERI"@en ;
foaf:homepage <http://www.deri.ie> ;
foaf:member <http://kantenwerk.org/metadata/foaf.rdf#me> ;
foaf:member fgo:Ismael .

fgo:fast_members a foaf:Group ;
foaf:name "Members of the FAST project"@en .

fgo:Ismael a foaf:Person ;
foaf:name "Ismael Rivera"@en ;
foaf:homepage <http://www.deri.ie/about/team/member/ismael_rivera/> ;
rdfs:seeAlso <http://www.deri.ie/fileadmin/scripts/foaf.php?id=356> .

# Classes

fgo:BuildingBlock a owl:Class ;
rdfs:label "BuildingBlock"@en ;
rdfs:comment """Anything that is part of a gadget. Tentatively anything that can be 'touched' and moved around in the FAST IDE, from the most complex units such as screen flows, down to atomic form elements like a button or a label in a form."""@en .

fgo:ScreenFlow a owl:Class ;
rdfs:subClassOf fgo:BuildingBlock ;
rdfs:label "Screen Flow"@en ;
rdfs:comment "A set of screens from which a gadget for a given target platform can be generated."@en .

### Screens and screen components

fgo:Screen a owl:Class ;
rdfs:subClassOf fgo:BuildingBlock ;
rdfs:label "Screen"@en ;
rdfs:comment "An individual screen; the basic unit of user interaction in FAST. A screen is the interface through which a user gets access to data and functionality of a backend service."@en .

fgo:ScreenComponent a owl:Class ;
rdfs:subClassOf fgo:BuildingBlock ;
rdfs:label "Screen Component"@en ;
rdfs:comment "Screens are made up of screen components, which fundamentally include service resources, operators and forms."@en .

fgo:Operator a owl:Class ;
rdfs:subClassOf fgo:ScreenComponent ;
rdfs:label "Operator"@en ;
rdfs:comment """Operators are intended to transform and/or modify data within a screen, usually for preparing data coming from service resources for the use in the screen's interface. Operators cover different kinds of data manipulations, from simple aggregation to mediating data with incompatible schemas."""@en .

fgo:Resource a owl:Class ;
rdfs:subClassOf fgo:ScreenComponent ;
rdfs:label "Resource"@en ;
rdfs:comment "A service resource in FAST is a wrapper around a Web service (the backend service), which makes the service available to the platform, e.g., by mapping its definition to FAST facts and actions."@en .

fgo:Form a owl:Class ;
rdfs:subClassOf fgo:ScreenComponent ;
rdfs:label "Form"@en ;
rdfs:comment "A form is the visual aspect of a screen: its user interface. Each form is made up of individual form elements."@en .

fgo:BackendService a owl:Class ;
rdfs:subClassOf fgo:BuildingBlock ;
rdfs:label "Backend Service"@en ;
rdfs:comment """A Web service which provides data and/or functionality to a screen. The actual backend service is external to FAST, and only available through a wrapper (the service Resource)."""@en .

fgo:FormElement a owl:Class ;
rdfs:subClassOf fgo:BuildingBlock ;
rdfs:label "Form Element"@en ;
rdfs:comment "Form elements are UI elements in a particular screen, such as buttons, lists or labels."@en .

### Conditions

fgo:Condition a owl:Class ;
rdfs:subClassOf fgo:BuildingBlock ;
rdfs:label "Condition"@en ;
rdfs:comment """The pre- or post-condition of a certain kinds of building block. If the building block is a screen flow, each target platform will use these conditions in its own way, or may also ignore them. E.g., in EzWeb pre- and post-conditions correspond to the concepts of slot and event.
A condition is made up of individual facts, where each fact is represented internally as an RDF triple, usually involving a variable of blank node."""@en .

# (NO_DELIV) fgo:Fact a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:BuildingBlock ;
# (NO_DELIV) rdfs:label "Fact"@en ;
# (NO_DELIV) rdfs:comment """The 'basic information unit of a FAST gadget'. In terms of RDF, a fact is a statement consisting of a subject, predicate and object (S, P, O)."""@en .

fgo:WithPreConditions a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:BuildingBlock ;
owl:unionOf (fgo:ScreenFlow fgo:Screen fgo:Action) ;
rdfs:label "With Pre-condition"@en ;
rdfs:comment """Those kinds of building blocks which can have pre-conditions."""@en .

fgo:WithPostConditions a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:BuildingBlock ;
owl:unionOf (fgo:ScreenFlow fgo:Screen fgo:ScreenComponent) ;
rdfs:label "With Post-condition"@en ;
rdfs:comment """Those kinds of building blocks which can have post-conditions."""@en .

# defining building blocks

fgo:WithDefinition a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:BuildingBlock ;
owl:unionOf (fgo:Screen fgo:Form) ;
rdfs:label "With Definition"@en ;
rdfs:comment "Any kind of building block that can be defined declaratively in the GVS."@en .

fgo:WithCode a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:BuildingBlock ;
owl:unionOf (fgo:Screen fgo:Form fgo:Resource fgo:Operator) ;
rdfs:label "With Code"@en ;
rdfs:comment "Any kind of building block that can be defined as a whole through code."@en .

# (NO_DELIV) I removed the following three classes, I don't get what we need them for:
# (NO_DELIV) 
# (NO_DELIV) fgo:Precondition a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:BuildingBlock ;
# (NO_DELIV) rdfs:label "Precondition"@en ;
# (NO_DELIV) rdfs:comment """A precondition is a satisfied condition within a screenflow. It can be seen
# (NO_DELIV) as an input of the screenflow."""@en .
# (NO_DELIV) 
# (NO_DELIV) fgo:Postcondition a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:BuildingBlock ;
# (NO_DELIV) rdfs:label "Postcondition"@en ;
# (NO_DELIV) rdfs:comment """A postcondition is a result condition within a screenflow. It can be seen
# (NO_DELIV) as an output of the screenflow."""@en .
# (NO_DELIV) 
# (NO_DELIV) fgo:WithConditions a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:BuildingBlock ;
# (NO_DELIV) owl:unionOf (fgo:WithPreConditions fgo:WithPostConditions) ;
# (NO_DELIV) rdfs:label "With-condition"@en ;
# (NO_DELIV) rdfs:comment """Those kinds of building blocks which can have either pre- or post-conditions."""@en .
# (NO_DELIV) 
fgo:Action a owl:Class ;
rdfs:subClassOf fgo:BuildingBlock ;
rdfs:label "Action"@en ;
rdfs:comment """An action represents a specific routine which will be performed when a certain
condition is fulfilled within a certain screen component. Examples are methods of a Web service (e.g., getItem) or functionality to update or change the contents of a form."""@en .

fgo:Library a owl:Class ;
rdfs:subClassOf fgo:BuildingBlock ;
rdfs:label "Library"@en ;
rdfs:comment """Libraries are references to external code libraries required for the execution of a particular building block at runtime."""@en .

fgo:Pipe a owl:Class ;
rdfs:subClassOf fgo:BuildingBlock ;
rdfs:label "pipe or connector"@en ;
rdfs:comment """Pipes are used to explicitly define the flow of data within a screen, e.g., from service resource to operator to a specific form element."""@en .

fgo:Trigger a owl:Class ;
rdfs:subClassOf fgo:BuildingBlock ;
rdfs:label "Trigger"@en ;
rdfs:comment """Triggers are the flip-side of actions. Certain events in a building block can cause a trigger to be fired. Other building blocks within the same screen, which are listening to it, will react with an action."""@en .

# (NO_DELIV) Removed ResourceReference, we don't need two references for a resource. The URI is enough.
# (NO_DELIV) 
# (NO_DELIV) fgo:ResourceReference a owl:Class ;
# (NO_DELIV) rdfs:label "Resource reference"@en ;
# (NO_DELIV) rdfs:comment """It's a reference to a certain resource. Needs a 'id' for internal
# (NO_DELIV) 	identification for the resource which is referencing it, and the 'uri' of the
# (NO_DELIV) 	resource."""@en .
# (NO_DELIV) 
### (NO_DELIV) Declarative Definitions
# (NO_DELIV) 
# (NO_DELIV) I'm not sure we need these Definition classes at all. If we want to define a building block
# (NO_DELIV) declaratively, we can just link it to the parts of the definition (e.g., form, resource and actions
# (NO_DELIV) for a screen) directly.
# (NO_DELIV) 
# (NO_DELIV) fgo:Definition a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:BuildingBlock ;
# (NO_DELIV) rdfs:label "Resource definition"@en ;
# (NO_DELIV) rdfs:comment """Declarative structural and behaviour definition of a building block."""@en .
# (NO_DELIV) 
# (NO_DELIV) fgo:ScreenDefinition a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:Definition;
# (NO_DELIV) rdfs:label "Screen definition"@en ;
# (NO_DELIV) rdfs:comment """Declarative definition of a screen. This will contain which form, operators and 
# (NO_DELIV) backend services the screen is composed, and how they are connected."""@en .
# (NO_DELIV) 
# (NO_DELIV) fgo:FormDefinition a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:Definition;
# (NO_DELIV) rdfs:label "Form Definition"@en;
# (NO_DELIV) rdfs:comment """Declarative definition of a form, comprising of its form elements and their layout."""@en .
# (NO_DELIV) 
# (NO_DELIV) fgo:OperatorDefinition a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:Definition;
# (NO_DELIV) rdfs:label "Operator Definition"@en;
# (NO_DELIV) rdfs:comment """Declarative definition of an operator building block."""@en .
# (NO_DELIV) 
# (NO_DELIV) fgo:ResourceDefinition a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:Definition;
# (NO_DELIV) rdfs:label "Resource Definition"@en;
# (NO_DELIV) rdfs:comment """Declarative definition of a service resource, comprising of its backend service and possibly other elements."""@en .
# (NO_DELIV) 
# (NO_DELIV) Marcos says no FlowControl Elements are currently implemented, and probably none are planned.
# (NO_DELIV) 
# (NO_DELIV) fgo:FlowControlElement a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:BuildingBlock ;
# (NO_DELIV) rdfs:label "Flow Control Element"@en ;
# (NO_DELIV) rdfs:comment """Any kind of component which can restrict the default flow of screens 
# (NO_DELIV)     in a gadget."""@en .
# (NO_DELIV) 
# (NO_DELIV) fgo:ScreenFlowStart a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:FlowControlElement ;
# (NO_DELIV) rdfs:label "Screen Flow Start"@en ;
# (NO_DELIV) rdfs:comment "The entry point to a wigdet; the first screen."@en .
# (NO_DELIV) 
# (NO_DELIV) fgo:ScreenFlowEnd a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:FlowControlElement ;
# (NO_DELIV) rdfs:label "Screen Flow End"@en ;
# (NO_DELIV) rdfs:comment "A screen that ends the workflow of the gadget."@en .
# (NO_DELIV) 
# (NO_DELIV) fgo:Connector a owl:Class ;
# (NO_DELIV) rdfs:subClassOf fgo:FlowControlElement ;
# (NO_DELIV) rdfs:label "Connector"@en ;
# (NO_DELIV) rdfs:comment "An explicit connection between two screens."@en .
# (NO_DELIV) 

# Properties

fgo:contains a owl:ObjectProperty ;
rdfs:label "contains"@en ;
rdfs:comment """Many kinds of components in FAST can contain other components: screenflows contain screens, screens contain forms, operators and resources, forms contain form elements, etc."""@en ;
rdfs:domain fgo:BuildingBlock ;
rdfs:range fgo:BuildingBlock .

fgo:hasForm a owl:ObjectProperty ;
rdfs:subPropertyOf fgo:contains ;
rdfs:label "has form"@en ;
rdfs:comment "If a screen is defined declaratively, this property links it to its form (i.e., its visual user interface)."@en ;
rdfs:domain fgo:Screen ;
rdfs:range fgo:Form .

fgo:hasResource a owl:ObjectProperty ;
rdfs:subPropertyOf fgo:contains ;
rdfs:label "has resource"@en ;
rdfs:comment "If a screen is defined declaratively, this property links it to its service resource (i.e., its backend)."@en ;
rdfs:domain fgo:Screen ;
rdfs:range fgo:Resource .

fgo:hasOperator a owl:ObjectProperty ;
rdfs:subPropertyOf fgo:contains ;
rdfs:label "has operator"@en ;
rdfs:comment "If a screen is defined declaratively, this property links it to an operator it might contain."@en ;
rdfs:domain fgo:Screen ;
rdfs:range fgo:Operator .

fgo:hasFormElement a owl:ObjectProperty ;
rdfs:subPropertyOf fgo:contains ;
rdfs:label "has form element"@en ;
rdfs:comment "If a form is defined declaratively, its elements are linked to it with this property."@en ;
rdfs:domain fgo:Form ;
rdfs:range fgo:FormElement .

fgo:hasPreCondition a owl:ObjectProperty ;
rdfs:label "has pre-condition"@en ;
rdfs:comment """This property links certain type of building blocks to their pre-condition, i.e., the facts that need to be fulfilled in order for the building block to be reachable."""@en ;
rdfs:domain fgo:WithPreConditions ;
# (NO_DELIV) I removed the rdf:bag from the range. We can have several conditions anyway, just
# (NO_DELIV) by having several hasPreCondition statements.
rdfs:range fgo:Condition .

fgo:hasPostCondition a owl:ObjectProperty ;
rdfs:label "has post-condition"@en ;
rdfs:comment """This property links certain type of building blocks to their post-condition, i.e., the facts that are produced once the building block has been executed."""@en ;
rdfs:domain fgo:WithPostConditions ;
# (NO_DELIV) see comment @ hasPreCondition.
rdfs:range fgo:Condition .

fgo:hasAction a owl:ObjectProperty ;
rdfs:label "has action"@en ;
rdfs:comment """This property indicates which actions are associated and can be perfomed within a screen component."""@en ;
rdfs:domain fgo:ScreenComponent ;
rdfs:range fgo:Action .

fgo:hasTrigger a owl:DatatypeProperty ;
rdfs:label "has trigger string"@en ;
rdfs:comment """This property links a buildiong block to a trigger."""@en ;
rdfs:domain fgo:ScreenComponent ;
rdfs:range fgo:Trigger .

fgo:uses a owl:ObjectProperty ;
rdfs:label "uses"@en ;
rdfs:comment """This property indicates concepts used within a building block, without being a pre- or post-condition."""@en ;
rdfs:domain fgo:BuildingBlock ;
# (NO_DELIV) instead of the weird fgo:ResourceReference, why not just use rdfs:Resource?
rdfs:range rdfs:Resource .

# Defining Condtions:

fgo:hasPattern a owl:ObjectProperty ;
rdfs:label "has pattern"@en ;
rdfs:comment """This property links the abstract representation of a fact (i.e., an RDF triple) in FAST to a graph resource containing the actual triple."""@en ;
rdfs:domain fgo:Condition ;
rdfs:range rdfs:Resource .

fgo:hasPatternString a owl:DatatypeProperty ;
rdfs:label "has pattern string"@en ;
rdfs:comment """This property links to the textual representation of a fact (i.e., an RDF triple), e.g., in N3."""@en ;
rdfs:domain fgo:Condition ;
rdfs:range xsd:String .

fgo:isPositive a owl:DatatypeProperty ;
rdfs:label "is positive"@en ;
rdfs:comment """Facts can be set to a specific scope: design time, execution time, or both of them. This property defines how they have to be taken into account by the inference engine or reasoner."""@en ;
rdfs:domain fgo:Condition ;
rdfs:range xsd:boolean .

# annotating building blocks

fgo:hasIcon a owl:ObjectProperty ;
rdfs:label "has icon"@en ;
rdfs:comment "A small graphical representation of any FAST component or sub-component."@en ;
rdfs:subPropertyOf foaf:depiction ;
rdfs:domain fgo:BuildingBlock ;
rdfs:range foaf:Image .

fgo:hasScreenshot a owl:ObjectProperty ;
rdfs:label "has screenshot"@en ;
rdfs:comment """An image which shows a particular screen or screenflow in action, to aid users in deciding which screen or screenflow to choose out of many."""@en ;
rdfs:subPropertyOf foaf:depiction ;
rdfs:domain fgo:BuildingBlock ;
rdfs:range foaf:Image .

# (NO_DELIV) We don't use hasTag anymore. Instead, we use ctag:tagged
# (NO_DELIV) 
# (NO_DELIV) fgo:hasTag a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has tag"@en ;
# (NO_DELIV) rdfs:comment """A tag is used to annotate keywords of a particular resource."""@en ;
# (NO_DELIV) rdfs:domain fgo:Resource ;
# (NO_DELIV) rdfs:range xsd:string .
# (NO_DELIV) 
# (NO_DELIV) We should probably use doap:revision instead of hasVersion
# (NO_DELIV) 
# (NO_DELIV) fgo:hasVersion a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has version"@en ;
# (NO_DELIV) rdfs:comment """The version of a particular screen or screenflow, such as 1.0, 0.2beta, etc."""@en ;
# (NO_DELIV) rdfs:domain fgo:Resource ;
# (NO_DELIV) rdfs:range xsd:string .
# (NO_DELIV) 

# properties concerning definitions through code

fgo:hasCode a owl:ObjectProperty ;
rdfs:label "has code"@en ;
rdfs:comment """This property links to the executable code of a particular building block (currently screens or screen components)."""@en ;
rdfs:domain fgo:WithCode ;
rdfs:range foaf:Document .

fgo:hasLibrary a owl:ObjectProperty ;
rdfs:label "has library"@en ;
rdfs:comment """This property indicates which programming libraries are used by the code of a screen component."""@en ;
rdfs:domain fgo:WithCode ;
rdfs:range fgo:Library .

fgo:hasLanguage a owl:DatatypeProperty ;
rdfs:label "has language string"@en ;
rdfs:comment """This property defines the programming language a particular programming library uses."""@en ;
rdfs:domain fgo:Library ;
rdfs:range xsd:string .

# (NO_DELIV) I don't see how this property makes sense if we already have hasPreCondition and hasPostCondition
# (NO_DELIV) 
# (NO_DELIV) fgo:hasCondition a owl:ObjectProperty ;
# (NO_DELIV) rdfs:label "has condition"@en ;
# (NO_DELIV) rdfs:comment """This property links a precondition or postcondition to a certain condition."""@en ;
# (NO_DELIV) rdfs:domain fgo:Precondition, fgo:Postcondition ;
# (NO_DELIV) rdfs:range fgo:Condition, rdf:Bag .
# (NO_DELIV) 

# (NO_DELIV) Instead of hasSource, why don't we just use hasCode? Isn't it the same?
# (NO_DELIV) 
# (NO_DELIV) fgo:hasSource a owl:ObjectProperty ;
# (NO_DELIV) rdfs:label "has source"@en ;
# (NO_DELIV) rdfs:comment """URL of the source code of a particular library."""@en ;
# (NO_DELIV) rdfs:domain fgo:Library ;
# (NO_DELIV) rdfs:range foaf:Document .
# (NO_DELIV) 
# (NO_DELIV) hasId, hasName, hasType and hasURI are all completely superfluous!
# (NO_DELIV) 
# (NO_DELIV) fgo:hasId a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has id"@en ;
# (NO_DELIV) rdfs:comment """The internal ID of the resource within the container resource."""@en ;
# (NO_DELIV) rdfs:domain fgo:Resource, fgo:ResourceReference ;
# (NO_DELIV) rdfs:range xsd:string .
# (NO_DELIV) 
# (NO_DELIV) fgo:hasName a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has name"@en ;
# (NO_DELIV) rdfs:comment """The name the user gives to the resource."""@en ;
# (NO_DELIV) rdfs:domain fgo:Resource ;
# (NO_DELIV) rdfs:range xsd:string .
# (NO_DELIV) 
# (NO_DELIV) fgo:hasType a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has type"@en ;
# (NO_DELIV) rdfs:comment """The type of the resource."""@en ;
# (NO_DELIV) rdfs:domain fgo:Resource ;
# (NO_DELIV) rdfs:range xsd:string .
# (NO_DELIV) 
# (NO_DELIV) fgo:hasUri a owl:ObjectProperty ;
# (NO_DELIV) rdfs:label "has uri"@en ;
# (NO_DELIV) rdfs:comment """URI of a particular resource pointing from a reference within
# (NO_DELIV) another resource."""@en ;
# (NO_DELIV) rdfs:domain fgo:ResourceReference ;
# (NO_DELIV) rdfs:range foaf:Document .
# (NO_DELIV) 
# (NO_DELIV) fgo:hasDefinition a owl:ObjectProperty ;
# (NO_DELIV) rdfs:label "has definition"@en ;
# (NO_DELIV) rdfs:comment """The structure and behaviour of a resource."""@en ;
# (NO_DELIV) rdfs:domain fgo:Resource ;
# (NO_DELIV) rdfs:range fgo:Definition .
# (NO_DELIV) 
# (NO_DELIV) fgo:hasIdBBFrom a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has id building block from"@en ;
# (NO_DELIV) rdfs:comment """building block id of the 'from' point of the pipe or trigger."""@en ;
# (NO_DELIV) rdfs:domain fgo:Pipe, fgo:Trigger ;
# (NO_DELIV) rdfs:range xsd:string .
# (NO_DELIV) 
# (NO_DELIV) fgo:hasIdConditionFrom a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has id condition from"@en ;
# (NO_DELIV) rdfs:comment """condition id of the 'from' point of the pipe."""@en ;
# (NO_DELIV) rdfs:domain fgo:Pipe ;
# (NO_DELIV) rdfs:range xsd:string .
# (NO_DELIV) 
# (NO_DELIV) fgo:hasIdBBTo a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has id building block to"@en ;
# (NO_DELIV) rdfs:comment """building block id of the 'to' point of the pipe or trigger."""@en ;
# (NO_DELIV) rdfs:domain fgo:Pipe, fgo:Trigger ;
# (NO_DELIV) rdfs:range xsd:string .
# (NO_DELIV) 
# (NO_DELIV) fgo:hasIdConditionTo a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has id condition to"@en ;
# (NO_DELIV) rdfs:comment """condition id of the 'to' point of the pipe."""@en ;
# (NO_DELIV) rdfs:domain fgo:Pipe ;
# (NO_DELIV) rdfs:range xsd:string .
# (NO_DELIV) 
# (NO_DELIV) fgo:hasIdActionTo a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has id action to"@en ;
# (NO_DELIV) rdfs:comment """action id of the 'to' point of the pipe or trigger."""@en ;
# (NO_DELIV) rdfs:domain fgo:Pipe, fgo:Trigger ;
# (NO_DELIV) rdfs:range xsd:string .
# (NO_DELIV) 
# (NO_DELIV) fgo:hasNameFrom a owl:DatatypeProperty ;
# (NO_DELIV) rdfs:label "has name from"@en ;
# (NO_DELIV) rdfs:comment """name of the trigger."""@en ;
# (NO_DELIV) rdfs:domain fgo:Trigger ;
# (NO_DELIV) rdfs:range xsd:string .

# relating resource templates and copies:

fgo:hasTemplate a owl:ObjectProperty ;
rdfs:label "has template"@en ;
rdfs:comment "Links the copy of a building block as used in a particular screen flow to its template, as used in the palette or catalogue of available building blocks."@en ;
rdfs:domain fgo:BuildingBlock ;
rdfs:range fgo:BuildingBlock ;
owl:inverseOf fgo:hasCopy .

fgo:hasCopy a owl:ObjectProperty ;
rdfs:label "has copy"@en ;
rdfs:comment "Links the template of a building block as used in the palette or catalogue of available building blocks to its copy, as used in a particular screen flow."@en ;
rdfs:domain fgo:BuildingBlock ;
rdfs:range fgo:BuildingBlock ;
owl:inverseOf fgo:hasTemplate .

# defining pipes

fgo:from a owl:ObjectProperty ;
rdfs:label "from"@en ;
rdfs:comment "This property defines the starting point of a pipe within a screen." ;
rdfs:domain fgo:Pipe ;
rdfs:range fgo:Condition .

fgo:to a owl:ObjectProperty ;
rdfs:label "to"@en ;
rdfs:comment "This property defines the end point of a pipe within a screen." ;
rdfs:domain fgo:Pipe ;
rdfs:range fgo:Condition .

# terms used from other ontologies

misc:integratesTerm a owl:ObjectProperty ;
rdfs:label "integratesTerm"@en ;
rdfs:comment """A way to explicitly say that an ontology uses terms from another namespace."""@en .

# this partially reflects the integration document of the FAST gadget ontology

<http://purl.oclc.org/fast/ontology/gadget> misc:integratesTerm  
foaf:Person, foaf:Image, foaf:OnlineAccount, 
foaf:holdsAccount, foaf:depiction, foaf:name, foaf:mbox, foaf:mbox_sha1sum, foaf:interest, 
foaf:accountName,
sioc:User,
ctag:Tag,
ctag:tagged, ctag:means,
dcterms:title, dcterms:creator, dcterms:description, dcterms:created, dcterms:subject, 
dcterms:rights, dcterms:RightsStatement, dcterms:rightsHolder,
doap:revision .

# statements to ensure that the ontology stays in DL
# according to Pellet reasoner: http://www.mindswap.org/2003/pellet/demo

foaf:Person a owl:Class .
foaf:Organization a owl:Class .
foaf:Image a owl:Class .
foaf:OnlineAccount a owl:Class .
sioc:User a owl:Class .
dcterms:RightsStatement a owl:Class .
ctag:Tag a owl:Class .

dcterms:modified a owl:DatatypeProperty .
dcterms:created a owl:DatatypeProperty .
dcterms:creator a owl:ObjectProperty .
dcterms:title a owl:DatatypeProperty .
dcterms:description a owl:DatatypeProperty .
dcterms:subject a owl:ObjectProperty .
dcterms:rights a owl:ObjectProperty .
dcterms:rightsHolder a owl:ObjectProperty .

foaf:name a owl:DatatypeProperty .
foaf:accountName a owl:DatatypeProperty .
foaf:holdsAccount a owl:ObjectProperty .
foaf:depiction a owl:ObjectProperty .
foaf:mbox a owl:ObjectProperty .
foaf:mbox_sha1sum a owl:DatatypeProperty .
foaf:interest a owl:ObjectProperty .
foaf:member a owl:ObjectProperty .

doap:revision a owl:DatatypeProperty .

ctag:tagged a owl:ObjectProperty .
ctag:means a owl:ObjectProperty .

<http://purl.oclc.org/fast/ontology/gadget> a owl:Thing.
